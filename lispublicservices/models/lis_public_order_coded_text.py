# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicOrderCodedText(object):

    """Implementation of the 'LISPublicOrderCodedText' model.

    The LISOrderCodedText data contract.

    Attributes:
        direction (DirectionEnum): Gets or sets Direction.
        text_type (int): Gets or sets TextType.
        text (string): Gets or sets Text.
        order_id (int): Gets or sets OrderId.
        date_time_value (datetime): Gets or sets the date time value.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "direction": 'direction',
        "text_type": 'textType',
        "text": 'text',
        "order_id": 'orderId',
        "date_time_value": 'dateTimeValue'
    }

    _optionals = [
        'direction',
        'text_type',
        'text',
        'order_id',
        'date_time_value',
    ]

    def __init__(self,
                 direction=APIHelper.SKIP,
                 text_type=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 order_id=APIHelper.SKIP,
                 date_time_value=APIHelper.SKIP):
        """Constructor for the LISPublicOrderCodedText class"""

        # Initialize members of the class
        if direction is not APIHelper.SKIP:
            self.direction = direction 
        if text_type is not APIHelper.SKIP:
            self.text_type = text_type 
        if text is not APIHelper.SKIP:
            self.text = text 
        if order_id is not APIHelper.SKIP:
            self.order_id = order_id 
        if date_time_value is not APIHelper.SKIP:
            self.date_time_value = APIHelper.RFC3339DateTime(date_time_value) if date_time_value else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        direction = dictionary.get("direction") if dictionary.get("direction") else APIHelper.SKIP
        text_type = dictionary.get("textType") if dictionary.get("textType") else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        order_id = dictionary.get("orderId") if dictionary.get("orderId") else APIHelper.SKIP
        date_time_value = APIHelper.RFC3339DateTime.from_value(dictionary.get("dateTimeValue")).datetime if dictionary.get("dateTimeValue") else APIHelper.SKIP
        # Return an object of this model
        return cls(direction,
                   text_type,
                   text,
                   order_id,
                   date_time_value)
