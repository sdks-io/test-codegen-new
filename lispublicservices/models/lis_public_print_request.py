# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_invoicing_preview_request import LISPublicInvoicingPreviewRequest
from lispublicservices.models.lis_public_user_print_settings import LISPublicUserPrintSettings


class LISPublicPrintRequest(object):

    """Implementation of the 'LISPublicPrintRequest' model.

    TODO: type model description here.

    Attributes:
        print_job_id (int): TODO: type description here.
        selection_field_string (string): TODO: type description here.
        selection_condition_ansi (string): TODO: type description here.
        selection_condition_cr (string): TODO: type description here.
        additional_constraint_ansi (string): TODO: type description here.
        additional_constraint_cr (string): TODO: type description here.
        has_additional_constraint (bool): TODO: type description here.
        ignore_empty_selection (bool): TODO: type description here.
        invoicing_preview_request (LISPublicInvoicingPreviewRequest): TODO:
            type description here.
        is_custom_print (bool): TODO: type description here.
        report_group_id (int): TODO: type description here.
        form_type (int): TODO: type description here.
        has_form_type (bool): TODO: type description here.
        form_sub_type (int): TODO: type description here.
        has_form_sub_type (bool): TODO: type description here.
        modify_type (int): TODO: type description here.
        has_modify_type (bool): TODO: type description here.
        print_description (string): TODO: type description here.
        selection_field_type (SelectionFieldTypeEnum): TODO: type description
            here.
        selection_value_list (list of int): TODO: type description here.
        custom_print_name (string): TODO: type description here.
        custom_print_base (CustomPrintBaseEnum): TODO: type description here.
        formula_list (dict): TODO: type description here.
        print_action (PrintActionEnum): TODO: type description here.
        language_id (int): TODO: type description here.
        tables_to_replace (dict): TODO: type description here.
        user_print_settings (LISPublicUserPrintSettings):
            LISPrintCommandOverrids
        need_to_compile_request (bool): TODO: type description here.
        pdf_byte_buffer_to_print (string): TODO: type description here.
        caller_context (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "print_job_id": 'printJobId',
        "selection_field_string": 'selectionFieldString',
        "selection_condition_ansi": 'selectionConditionANSI',
        "selection_condition_cr": 'selectionConditionCR',
        "additional_constraint_ansi": 'additionalConstraintANSI',
        "additional_constraint_cr": 'additionalConstraintCR',
        "has_additional_constraint": 'hasAdditionalConstraint',
        "ignore_empty_selection": 'ignoreEmptySelection',
        "invoicing_preview_request": 'invoicingPreviewRequest',
        "is_custom_print": 'isCustomPrint',
        "report_group_id": 'reportGroupId',
        "form_type": 'formType',
        "has_form_type": 'hasFormType',
        "form_sub_type": 'formSubType',
        "has_form_sub_type": 'hasFormSubType',
        "modify_type": 'modifyType',
        "has_modify_type": 'hasModifyType',
        "print_description": 'printDescription',
        "selection_field_type": 'selectionFieldType',
        "selection_value_list": 'selectionValueList',
        "custom_print_name": 'customPrintName',
        "custom_print_base": 'customPrintBase',
        "formula_list": 'formulaList',
        "print_action": 'printAction',
        "language_id": 'languageId',
        "tables_to_replace": 'tablesToReplace',
        "user_print_settings": 'userPrintSettings',
        "need_to_compile_request": 'needToCompileRequest',
        "pdf_byte_buffer_to_print": 'pdfByteBufferToPrint',
        "caller_context": 'callerContext'
    }

    _optionals = [
        'print_job_id',
        'selection_field_string',
        'selection_condition_ansi',
        'selection_condition_cr',
        'additional_constraint_ansi',
        'additional_constraint_cr',
        'has_additional_constraint',
        'ignore_empty_selection',
        'invoicing_preview_request',
        'is_custom_print',
        'report_group_id',
        'form_type',
        'has_form_type',
        'form_sub_type',
        'has_form_sub_type',
        'modify_type',
        'has_modify_type',
        'print_description',
        'selection_field_type',
        'selection_value_list',
        'custom_print_name',
        'custom_print_base',
        'formula_list',
        'print_action',
        'language_id',
        'tables_to_replace',
        'user_print_settings',
        'need_to_compile_request',
        'pdf_byte_buffer_to_print',
        'caller_context',
    ]

    def __init__(self,
                 print_job_id=APIHelper.SKIP,
                 selection_field_string=APIHelper.SKIP,
                 selection_condition_ansi=APIHelper.SKIP,
                 selection_condition_cr=APIHelper.SKIP,
                 additional_constraint_ansi=APIHelper.SKIP,
                 additional_constraint_cr=APIHelper.SKIP,
                 has_additional_constraint=APIHelper.SKIP,
                 ignore_empty_selection=APIHelper.SKIP,
                 invoicing_preview_request=APIHelper.SKIP,
                 is_custom_print=APIHelper.SKIP,
                 report_group_id=APIHelper.SKIP,
                 form_type=APIHelper.SKIP,
                 has_form_type=APIHelper.SKIP,
                 form_sub_type=APIHelper.SKIP,
                 has_form_sub_type=APIHelper.SKIP,
                 modify_type=APIHelper.SKIP,
                 has_modify_type=APIHelper.SKIP,
                 print_description=APIHelper.SKIP,
                 selection_field_type=APIHelper.SKIP,
                 selection_value_list=APIHelper.SKIP,
                 custom_print_name=APIHelper.SKIP,
                 custom_print_base=APIHelper.SKIP,
                 formula_list=APIHelper.SKIP,
                 print_action=APIHelper.SKIP,
                 language_id=APIHelper.SKIP,
                 tables_to_replace=APIHelper.SKIP,
                 user_print_settings=APIHelper.SKIP,
                 need_to_compile_request=APIHelper.SKIP,
                 pdf_byte_buffer_to_print=APIHelper.SKIP,
                 caller_context=APIHelper.SKIP):
        """Constructor for the LISPublicPrintRequest class"""

        # Initialize members of the class
        if print_job_id is not APIHelper.SKIP:
            self.print_job_id = print_job_id 
        if selection_field_string is not APIHelper.SKIP:
            self.selection_field_string = selection_field_string 
        if selection_condition_ansi is not APIHelper.SKIP:
            self.selection_condition_ansi = selection_condition_ansi 
        if selection_condition_cr is not APIHelper.SKIP:
            self.selection_condition_cr = selection_condition_cr 
        if additional_constraint_ansi is not APIHelper.SKIP:
            self.additional_constraint_ansi = additional_constraint_ansi 
        if additional_constraint_cr is not APIHelper.SKIP:
            self.additional_constraint_cr = additional_constraint_cr 
        if has_additional_constraint is not APIHelper.SKIP:
            self.has_additional_constraint = has_additional_constraint 
        if ignore_empty_selection is not APIHelper.SKIP:
            self.ignore_empty_selection = ignore_empty_selection 
        if invoicing_preview_request is not APIHelper.SKIP:
            self.invoicing_preview_request = invoicing_preview_request 
        if is_custom_print is not APIHelper.SKIP:
            self.is_custom_print = is_custom_print 
        if report_group_id is not APIHelper.SKIP:
            self.report_group_id = report_group_id 
        if form_type is not APIHelper.SKIP:
            self.form_type = form_type 
        if has_form_type is not APIHelper.SKIP:
            self.has_form_type = has_form_type 
        if form_sub_type is not APIHelper.SKIP:
            self.form_sub_type = form_sub_type 
        if has_form_sub_type is not APIHelper.SKIP:
            self.has_form_sub_type = has_form_sub_type 
        if modify_type is not APIHelper.SKIP:
            self.modify_type = modify_type 
        if has_modify_type is not APIHelper.SKIP:
            self.has_modify_type = has_modify_type 
        if print_description is not APIHelper.SKIP:
            self.print_description = print_description 
        if selection_field_type is not APIHelper.SKIP:
            self.selection_field_type = selection_field_type 
        if selection_value_list is not APIHelper.SKIP:
            self.selection_value_list = selection_value_list 
        if custom_print_name is not APIHelper.SKIP:
            self.custom_print_name = custom_print_name 
        if custom_print_base is not APIHelper.SKIP:
            self.custom_print_base = custom_print_base 
        if formula_list is not APIHelper.SKIP:
            self.formula_list = formula_list 
        if print_action is not APIHelper.SKIP:
            self.print_action = print_action 
        if language_id is not APIHelper.SKIP:
            self.language_id = language_id 
        if tables_to_replace is not APIHelper.SKIP:
            self.tables_to_replace = tables_to_replace 
        if user_print_settings is not APIHelper.SKIP:
            self.user_print_settings = user_print_settings 
        if need_to_compile_request is not APIHelper.SKIP:
            self.need_to_compile_request = need_to_compile_request 
        if pdf_byte_buffer_to_print is not APIHelper.SKIP:
            self.pdf_byte_buffer_to_print = pdf_byte_buffer_to_print 
        if caller_context is not APIHelper.SKIP:
            self.caller_context = caller_context 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        print_job_id = dictionary.get("printJobId") if dictionary.get("printJobId") else APIHelper.SKIP
        selection_field_string = dictionary.get("selectionFieldString") if dictionary.get("selectionFieldString") else APIHelper.SKIP
        selection_condition_ansi = dictionary.get("selectionConditionANSI") if dictionary.get("selectionConditionANSI") else APIHelper.SKIP
        selection_condition_cr = dictionary.get("selectionConditionCR") if dictionary.get("selectionConditionCR") else APIHelper.SKIP
        additional_constraint_ansi = dictionary.get("additionalConstraintANSI") if dictionary.get("additionalConstraintANSI") else APIHelper.SKIP
        additional_constraint_cr = dictionary.get("additionalConstraintCR") if dictionary.get("additionalConstraintCR") else APIHelper.SKIP
        has_additional_constraint = dictionary.get("hasAdditionalConstraint") if "hasAdditionalConstraint" in dictionary.keys() else APIHelper.SKIP
        ignore_empty_selection = dictionary.get("ignoreEmptySelection") if "ignoreEmptySelection" in dictionary.keys() else APIHelper.SKIP
        invoicing_preview_request = LISPublicInvoicingPreviewRequest.from_dictionary(dictionary.get('invoicingPreviewRequest')) if 'invoicingPreviewRequest' in dictionary.keys() else APIHelper.SKIP
        is_custom_print = dictionary.get("isCustomPrint") if "isCustomPrint" in dictionary.keys() else APIHelper.SKIP
        report_group_id = dictionary.get("reportGroupId") if dictionary.get("reportGroupId") else APIHelper.SKIP
        form_type = dictionary.get("formType") if dictionary.get("formType") else APIHelper.SKIP
        has_form_type = dictionary.get("hasFormType") if "hasFormType" in dictionary.keys() else APIHelper.SKIP
        form_sub_type = dictionary.get("formSubType") if dictionary.get("formSubType") else APIHelper.SKIP
        has_form_sub_type = dictionary.get("hasFormSubType") if "hasFormSubType" in dictionary.keys() else APIHelper.SKIP
        modify_type = dictionary.get("modifyType") if dictionary.get("modifyType") else APIHelper.SKIP
        has_modify_type = dictionary.get("hasModifyType") if "hasModifyType" in dictionary.keys() else APIHelper.SKIP
        print_description = dictionary.get("printDescription") if dictionary.get("printDescription") else APIHelper.SKIP
        selection_field_type = dictionary.get("selectionFieldType") if dictionary.get("selectionFieldType") else APIHelper.SKIP
        selection_value_list = dictionary.get("selectionValueList") if dictionary.get("selectionValueList") else APIHelper.SKIP
        custom_print_name = dictionary.get("customPrintName") if dictionary.get("customPrintName") else APIHelper.SKIP
        custom_print_base = dictionary.get("customPrintBase") if dictionary.get("customPrintBase") else APIHelper.SKIP
        formula_list = dictionary.get("formulaList") if dictionary.get("formulaList") else APIHelper.SKIP
        print_action = dictionary.get("printAction") if dictionary.get("printAction") else APIHelper.SKIP
        language_id = dictionary.get("languageId") if dictionary.get("languageId") else APIHelper.SKIP
        tables_to_replace = dictionary.get("tablesToReplace") if dictionary.get("tablesToReplace") else APIHelper.SKIP
        user_print_settings = LISPublicUserPrintSettings.from_dictionary(dictionary.get('userPrintSettings')) if 'userPrintSettings' in dictionary.keys() else APIHelper.SKIP
        need_to_compile_request = dictionary.get("needToCompileRequest") if "needToCompileRequest" in dictionary.keys() else APIHelper.SKIP
        pdf_byte_buffer_to_print = dictionary.get("pdfByteBufferToPrint") if dictionary.get("pdfByteBufferToPrint") else APIHelper.SKIP
        caller_context = dictionary.get("callerContext") if dictionary.get("callerContext") else APIHelper.SKIP
        # Return an object of this model
        return cls(print_job_id,
                   selection_field_string,
                   selection_condition_ansi,
                   selection_condition_cr,
                   additional_constraint_ansi,
                   additional_constraint_cr,
                   has_additional_constraint,
                   ignore_empty_selection,
                   invoicing_preview_request,
                   is_custom_print,
                   report_group_id,
                   form_type,
                   has_form_type,
                   form_sub_type,
                   has_form_sub_type,
                   modify_type,
                   has_modify_type,
                   print_description,
                   selection_field_type,
                   selection_value_list,
                   custom_print_name,
                   custom_print_base,
                   formula_list,
                   print_action,
                   language_id,
                   tables_to_replace,
                   user_print_settings,
                   need_to_compile_request,
                   pdf_byte_buffer_to_print,
                   caller_context)
