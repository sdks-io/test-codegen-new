# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerClosedDate(object):

    """Implementation of the 'LISPublicCustomerClosedDate' model.

    The LISCustomerClosedDate data contract.

    Attributes:
        customer_id (int): Gets or sets CustomerId.
        closed_for_loading (bool): Gets or sets ClosedForLoading.
        closed_for_unloading (bool): Gets or sets ClosedForUnloading.
        closed_from (datetime): Gets or sets ClosedOn.
        closed_till (datetime): Gets or sets the closed till.
        reason (string): Gets or sets Reason.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "closed_for_loading": 'closedForLoading',
        "closed_for_unloading": 'closedForUnloading',
        "closed_from": 'closedFrom',
        "closed_till": 'closedTill',
        "reason": 'reason',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy'
    }

    _optionals = [
        'customer_id',
        'closed_for_loading',
        'closed_for_unloading',
        'closed_from',
        'closed_till',
        'reason',
        'changed_on',
        'changed_by',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 closed_for_loading=APIHelper.SKIP,
                 closed_for_unloading=APIHelper.SKIP,
                 closed_from=APIHelper.SKIP,
                 closed_till=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerClosedDate class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if closed_for_loading is not APIHelper.SKIP:
            self.closed_for_loading = closed_for_loading 
        if closed_for_unloading is not APIHelper.SKIP:
            self.closed_for_unloading = closed_for_unloading 
        if closed_from is not APIHelper.SKIP:
            self.closed_from = APIHelper.RFC3339DateTime(closed_from) if closed_from else None 
        if closed_till is not APIHelper.SKIP:
            self.closed_till = APIHelper.RFC3339DateTime(closed_till) if closed_till else None 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        closed_for_loading = dictionary.get("closedForLoading") if "closedForLoading" in dictionary.keys() else APIHelper.SKIP
        closed_for_unloading = dictionary.get("closedForUnloading") if "closedForUnloading" in dictionary.keys() else APIHelper.SKIP
        closed_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("closedFrom")).datetime if dictionary.get("closedFrom") else APIHelper.SKIP
        closed_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("closedTill")).datetime if dictionary.get("closedTill") else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   closed_for_loading,
                   closed_for_unloading,
                   closed_from,
                   closed_till,
                   reason,
                   changed_on,
                   changed_by)
