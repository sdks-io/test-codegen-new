# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_order_d_good import LISPublicOrderDGood
from lispublicservices.models.lis_public_order_detail_unit import LISPublicOrderDetailUnit


class LISPublicOrderDetail(object):

    """Implementation of the 'LISPublicOrderDetail' model.

    The LISOrderDetail data contract.

    Attributes:
        units (list of LISPublicOrderDetailUnit): Gets or sets Units.
        order_id (int): Gets or sets OrderId.
        detail_id (int): Gets or sets DetailId.
        reference (string): Gets or sets Reference.
        content (string): Gets or sets Content.
        weight (float): Gets or sets Weight.
        tare_weight (float): Gets or sets TareWeight.
        chargeable_weight (float): Gets or sets ChargeableWeight.
        bulky_weight (float): Gets or sets BulkyWeight.
        tariff_id (string): Gets or sets ChargeId.
        article_no (string): Gets or sets ArticleNo.
        cubic_decimeter (float): Gets or sets CubicDecimeter.
        loading_meter (float): Gets or sets LoadingMeter.
        square_meter (float): Gets or sets SquareMeter.
        storage_places (float): Gets or sets StoragePlaces.
        declared_value (float): Gets or sets DeclaredValue.
        hazardous_good_qualified (bool): Gets or sets HazardousGoodQualified.
        free_text_1 (string): Gets or sets FreeText1.
        free_text_2 (string): Gets or sets FreeText2.
        free_text_3 (string): Gets or sets FreeText3.
        free_number_1 (int): Gets or sets FreeNumber1.
        free_number_2 (int): Gets or sets FreeNumber2.
        free_date_1 (datetime): Gets or sets FreeDate1.
        free_date_2 (datetime): Gets or sets FreeDate2.
        free_amount_1 (float): Gets or sets FreeAmount1.
        free_amount_2 (float): Gets or sets FreeAmount2.
        free_amount_3 (float): Gets or sets the free amount3.
        free_amount_4 (float): Gets or sets the free amount4.
        free_amount_5 (float): Gets or sets the free amount5.
        free_amount_6 (float): Gets or sets the free amount6.
        free_amount_7 (float): Gets or sets the free amount7.
        free_amount_8 (float): Gets or sets the free amount8.
        free_amount_9 (float): Gets or sets the free amount9.
        free_amount_10 (float): Gets or sets the free amount10.
        free_amount_11 (float): Gets or sets the free amount11.
        free_amount_12 (float): Gets or sets the free amount12.
        temp_min (float): Gets or sets the temporary minimum.
        temp_max (float): Gets or sets the temporary maximum.
        freight_payer_id (int): Gets or sets FreightPayerId.
        reefer_cargo (bool): Gets or sets ReeferCargo.
        sub_pallet (string): Gets or sets SubPallet.
        height (int): Gets or sets Height.
        length (int): Gets or sets Length.
        width (int): Gets or sets Width.
        goods_group (string): Gets or sets GoodsGroup.
        target_quantity (float): Gets or sets TargetQuantity.
        content_2 (string): Gets or sets Content2.
        target_pallets (float): Gets or sets TargetPallets.
        target_weight (float): Gets or sets TargetWeight.
        cost_center (int): Gets or sets CostCenter.
        cost_unit (int): Gets or sets CostUnit.
        account_table (int): Gets or sets AccountTable.
        account_table_sap (string): Gets or sets AccountTableSAP.
        cost_center_sap (string): Gets or sets CostCenterSAP.
        cost_unit_sap (string): Gets or sets CostUnitSAP.
        target_package (float): Gets or sets TargetPackage.
        detail_reference (string): Gets or sets DetailReference.
        goods_class (string): Gets or sets GoodsClass.
        target_storage_places (float): Gets or sets TargetStoragePlaces.
        statistical_commodity_code (string): Gets or sets
            StatisticalCommodityCode.
        compartment (string): Gets or sets Compartment.
        insurable_value (float): Gets or sets InsurableValue.
        created_on (datetime): Gets or sets CreatedOn.
        created_by (string): Gets or sets CreatedBy.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.
        efb_observe (EfbObserveEnum): Gets or sets the efb observe.
        empties (EmptiesEnum): Gets or sets the empties.
        ecological_menace (EcologicalMenace1Enum): Gets or sets the ecological
            menace.
        dangerous_goods (list of LISPublicOrderDGood): Gets or sets the
            dangerous goods.
        un_number (int): Gets or sets the un number.
        un_class (string): Gets or sets the un class.
        un_digit (string): Gets or sets the un digit.
        order_d_good_id (int): Gets or sets the order d good identifier.
        transport_category (string): Gets or sets the transport category.
        container_id (string): Gets or sets the container identifier.
        container_amount (float): Gets or sets the container amount.
        container_type (string): Gets or sets the type of the container.
        statistic_value (float): Gets or sets the statistic value.
        component (string): Gets or sets the component.
        intra_int_nr (int): Gets or sets the intra int nr.
        outra_int_nr (int): Gets or sets the outra int nr.
        booking (int): Gets or sets the booking.
        zoll_intnr (int): Gets or sets the zoll intnr.
        cont_plombe (string): Gets or sets the cont plombe.
        delivery_note_package_reference (int): Gets or sets the delivery note
            package reference.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "units": 'units',
        "order_id": 'orderId',
        "detail_id": 'detailId',
        "reference": 'reference',
        "content": 'content',
        "weight": 'weight',
        "tare_weight": 'tareWeight',
        "chargeable_weight": 'chargeableWeight',
        "bulky_weight": 'bulkyWeight',
        "tariff_id": 'tariffId',
        "article_no": 'articleNo',
        "cubic_decimeter": 'cubicDecimeter',
        "loading_meter": 'loadingMeter',
        "square_meter": 'squareMeter',
        "storage_places": 'storagePlaces',
        "declared_value": 'declaredValue',
        "hazardous_good_qualified": 'hazardousGoodQualified',
        "free_text_1": 'freeText1',
        "free_text_2": 'freeText2',
        "free_text_3": 'freeText3',
        "free_number_1": 'freeNumber1',
        "free_number_2": 'freeNumber2',
        "free_date_1": 'freeDate1',
        "free_date_2": 'freeDate2',
        "free_amount_1": 'freeAmount1',
        "free_amount_2": 'freeAmount2',
        "free_amount_3": 'freeAmount3',
        "free_amount_4": 'freeAmount4',
        "free_amount_5": 'freeAmount5',
        "free_amount_6": 'freeAmount6',
        "free_amount_7": 'freeAmount7',
        "free_amount_8": 'freeAmount8',
        "free_amount_9": 'freeAmount9',
        "free_amount_10": 'freeAmount10',
        "free_amount_11": 'freeAmount11',
        "free_amount_12": 'freeAmount12',
        "temp_min": 'tempMin',
        "temp_max": 'tempMax',
        "freight_payer_id": 'freightPayerId',
        "reefer_cargo": 'reeferCargo',
        "sub_pallet": 'subPallet',
        "height": 'height',
        "length": 'length',
        "width": 'width',
        "goods_group": 'goodsGroup',
        "target_quantity": 'targetQuantity',
        "content_2": 'content2',
        "target_pallets": 'targetPallets',
        "target_weight": 'targetWeight',
        "cost_center": 'costCenter',
        "cost_unit": 'costUnit',
        "account_table": 'accountTable',
        "account_table_sap": 'accountTableSAP',
        "cost_center_sap": 'costCenterSAP',
        "cost_unit_sap": 'costUnitSAP',
        "target_package": 'targetPackage',
        "detail_reference": 'detailReference',
        "goods_class": 'goodsClass',
        "target_storage_places": 'targetStoragePlaces',
        "statistical_commodity_code": 'statisticalCommodityCode',
        "compartment": 'compartment',
        "insurable_value": 'insurableValue',
        "created_on": 'createdOn',
        "created_by": 'createdBy',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "efb_observe": 'efbObserve',
        "empties": 'empties',
        "ecological_menace": 'ecologicalMenace',
        "dangerous_goods": 'dangerousGoods',
        "un_number": 'unNumber',
        "un_class": 'unClass',
        "un_digit": 'unDigit',
        "order_d_good_id": 'orderDGoodId',
        "transport_category": 'transportCategory',
        "container_id": 'containerId',
        "container_amount": 'containerAmount',
        "container_type": 'containerType',
        "statistic_value": 'statisticValue',
        "component": 'component',
        "intra_int_nr": 'intraIntNr',
        "outra_int_nr": 'outraIntNr',
        "booking": 'booking',
        "zoll_intnr": 'zollIntnr',
        "cont_plombe": 'contPlombe',
        "delivery_note_package_reference": 'deliveryNotePackageReference'
    }

    _optionals = [
        'units',
        'order_id',
        'detail_id',
        'reference',
        'content',
        'weight',
        'tare_weight',
        'chargeable_weight',
        'bulky_weight',
        'tariff_id',
        'article_no',
        'cubic_decimeter',
        'loading_meter',
        'square_meter',
        'storage_places',
        'declared_value',
        'hazardous_good_qualified',
        'free_text_1',
        'free_text_2',
        'free_text_3',
        'free_number_1',
        'free_number_2',
        'free_date_1',
        'free_date_2',
        'free_amount_1',
        'free_amount_2',
        'free_amount_3',
        'free_amount_4',
        'free_amount_5',
        'free_amount_6',
        'free_amount_7',
        'free_amount_8',
        'free_amount_9',
        'free_amount_10',
        'free_amount_11',
        'free_amount_12',
        'temp_min',
        'temp_max',
        'freight_payer_id',
        'reefer_cargo',
        'sub_pallet',
        'height',
        'length',
        'width',
        'goods_group',
        'target_quantity',
        'content_2',
        'target_pallets',
        'target_weight',
        'cost_center',
        'cost_unit',
        'account_table',
        'account_table_sap',
        'cost_center_sap',
        'cost_unit_sap',
        'target_package',
        'detail_reference',
        'goods_class',
        'target_storage_places',
        'statistical_commodity_code',
        'compartment',
        'insurable_value',
        'created_on',
        'created_by',
        'changed_on',
        'changed_by',
        'efb_observe',
        'empties',
        'ecological_menace',
        'dangerous_goods',
        'un_number',
        'un_class',
        'un_digit',
        'order_d_good_id',
        'transport_category',
        'container_id',
        'container_amount',
        'container_type',
        'statistic_value',
        'component',
        'intra_int_nr',
        'outra_int_nr',
        'booking',
        'zoll_intnr',
        'cont_plombe',
        'delivery_note_package_reference',
    ]

    def __init__(self,
                 units=APIHelper.SKIP,
                 order_id=APIHelper.SKIP,
                 detail_id=APIHelper.SKIP,
                 reference=APIHelper.SKIP,
                 content=APIHelper.SKIP,
                 weight=APIHelper.SKIP,
                 tare_weight=APIHelper.SKIP,
                 chargeable_weight=APIHelper.SKIP,
                 bulky_weight=APIHelper.SKIP,
                 tariff_id=APIHelper.SKIP,
                 article_no=APIHelper.SKIP,
                 cubic_decimeter=APIHelper.SKIP,
                 loading_meter=APIHelper.SKIP,
                 square_meter=APIHelper.SKIP,
                 storage_places=APIHelper.SKIP,
                 declared_value=APIHelper.SKIP,
                 hazardous_good_qualified=APIHelper.SKIP,
                 free_text_1=APIHelper.SKIP,
                 free_text_2=APIHelper.SKIP,
                 free_text_3=APIHelper.SKIP,
                 free_number_1=APIHelper.SKIP,
                 free_number_2=APIHelper.SKIP,
                 free_date_1=APIHelper.SKIP,
                 free_date_2=APIHelper.SKIP,
                 free_amount_1=APIHelper.SKIP,
                 free_amount_2=APIHelper.SKIP,
                 free_amount_3=APIHelper.SKIP,
                 free_amount_4=APIHelper.SKIP,
                 free_amount_5=APIHelper.SKIP,
                 free_amount_6=APIHelper.SKIP,
                 free_amount_7=APIHelper.SKIP,
                 free_amount_8=APIHelper.SKIP,
                 free_amount_9=APIHelper.SKIP,
                 free_amount_10=APIHelper.SKIP,
                 free_amount_11=APIHelper.SKIP,
                 free_amount_12=APIHelper.SKIP,
                 temp_min=APIHelper.SKIP,
                 temp_max=APIHelper.SKIP,
                 freight_payer_id=APIHelper.SKIP,
                 reefer_cargo=APIHelper.SKIP,
                 sub_pallet=APIHelper.SKIP,
                 height=APIHelper.SKIP,
                 length=APIHelper.SKIP,
                 width=APIHelper.SKIP,
                 goods_group=APIHelper.SKIP,
                 target_quantity=APIHelper.SKIP,
                 content_2=APIHelper.SKIP,
                 target_pallets=APIHelper.SKIP,
                 target_weight=APIHelper.SKIP,
                 cost_center=APIHelper.SKIP,
                 cost_unit=APIHelper.SKIP,
                 account_table=APIHelper.SKIP,
                 account_table_sap=APIHelper.SKIP,
                 cost_center_sap=APIHelper.SKIP,
                 cost_unit_sap=APIHelper.SKIP,
                 target_package=APIHelper.SKIP,
                 detail_reference=APIHelper.SKIP,
                 goods_class=APIHelper.SKIP,
                 target_storage_places=APIHelper.SKIP,
                 statistical_commodity_code=APIHelper.SKIP,
                 compartment=APIHelper.SKIP,
                 insurable_value=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 efb_observe=APIHelper.SKIP,
                 empties=APIHelper.SKIP,
                 ecological_menace=APIHelper.SKIP,
                 dangerous_goods=APIHelper.SKIP,
                 un_number=APIHelper.SKIP,
                 un_class=APIHelper.SKIP,
                 un_digit=APIHelper.SKIP,
                 order_d_good_id=APIHelper.SKIP,
                 transport_category=APIHelper.SKIP,
                 container_id=APIHelper.SKIP,
                 container_amount=APIHelper.SKIP,
                 container_type=APIHelper.SKIP,
                 statistic_value=APIHelper.SKIP,
                 component=APIHelper.SKIP,
                 intra_int_nr=APIHelper.SKIP,
                 outra_int_nr=APIHelper.SKIP,
                 booking=APIHelper.SKIP,
                 zoll_intnr=APIHelper.SKIP,
                 cont_plombe=APIHelper.SKIP,
                 delivery_note_package_reference=APIHelper.SKIP):
        """Constructor for the LISPublicOrderDetail class"""

        # Initialize members of the class
        if units is not APIHelper.SKIP:
            self.units = units 
        if order_id is not APIHelper.SKIP:
            self.order_id = order_id 
        if detail_id is not APIHelper.SKIP:
            self.detail_id = detail_id 
        if reference is not APIHelper.SKIP:
            self.reference = reference 
        if content is not APIHelper.SKIP:
            self.content = content 
        if weight is not APIHelper.SKIP:
            self.weight = weight 
        if tare_weight is not APIHelper.SKIP:
            self.tare_weight = tare_weight 
        if chargeable_weight is not APIHelper.SKIP:
            self.chargeable_weight = chargeable_weight 
        if bulky_weight is not APIHelper.SKIP:
            self.bulky_weight = bulky_weight 
        if tariff_id is not APIHelper.SKIP:
            self.tariff_id = tariff_id 
        if article_no is not APIHelper.SKIP:
            self.article_no = article_no 
        if cubic_decimeter is not APIHelper.SKIP:
            self.cubic_decimeter = cubic_decimeter 
        if loading_meter is not APIHelper.SKIP:
            self.loading_meter = loading_meter 
        if square_meter is not APIHelper.SKIP:
            self.square_meter = square_meter 
        if storage_places is not APIHelper.SKIP:
            self.storage_places = storage_places 
        if declared_value is not APIHelper.SKIP:
            self.declared_value = declared_value 
        if hazardous_good_qualified is not APIHelper.SKIP:
            self.hazardous_good_qualified = hazardous_good_qualified 
        if free_text_1 is not APIHelper.SKIP:
            self.free_text_1 = free_text_1 
        if free_text_2 is not APIHelper.SKIP:
            self.free_text_2 = free_text_2 
        if free_text_3 is not APIHelper.SKIP:
            self.free_text_3 = free_text_3 
        if free_number_1 is not APIHelper.SKIP:
            self.free_number_1 = free_number_1 
        if free_number_2 is not APIHelper.SKIP:
            self.free_number_2 = free_number_2 
        if free_date_1 is not APIHelper.SKIP:
            self.free_date_1 = APIHelper.RFC3339DateTime(free_date_1) if free_date_1 else None 
        if free_date_2 is not APIHelper.SKIP:
            self.free_date_2 = APIHelper.RFC3339DateTime(free_date_2) if free_date_2 else None 
        if free_amount_1 is not APIHelper.SKIP:
            self.free_amount_1 = free_amount_1 
        if free_amount_2 is not APIHelper.SKIP:
            self.free_amount_2 = free_amount_2 
        if free_amount_3 is not APIHelper.SKIP:
            self.free_amount_3 = free_amount_3 
        if free_amount_4 is not APIHelper.SKIP:
            self.free_amount_4 = free_amount_4 
        if free_amount_5 is not APIHelper.SKIP:
            self.free_amount_5 = free_amount_5 
        if free_amount_6 is not APIHelper.SKIP:
            self.free_amount_6 = free_amount_6 
        if free_amount_7 is not APIHelper.SKIP:
            self.free_amount_7 = free_amount_7 
        if free_amount_8 is not APIHelper.SKIP:
            self.free_amount_8 = free_amount_8 
        if free_amount_9 is not APIHelper.SKIP:
            self.free_amount_9 = free_amount_9 
        if free_amount_10 is not APIHelper.SKIP:
            self.free_amount_10 = free_amount_10 
        if free_amount_11 is not APIHelper.SKIP:
            self.free_amount_11 = free_amount_11 
        if free_amount_12 is not APIHelper.SKIP:
            self.free_amount_12 = free_amount_12 
        if temp_min is not APIHelper.SKIP:
            self.temp_min = temp_min 
        if temp_max is not APIHelper.SKIP:
            self.temp_max = temp_max 
        if freight_payer_id is not APIHelper.SKIP:
            self.freight_payer_id = freight_payer_id 
        if reefer_cargo is not APIHelper.SKIP:
            self.reefer_cargo = reefer_cargo 
        if sub_pallet is not APIHelper.SKIP:
            self.sub_pallet = sub_pallet 
        if height is not APIHelper.SKIP:
            self.height = height 
        if length is not APIHelper.SKIP:
            self.length = length 
        if width is not APIHelper.SKIP:
            self.width = width 
        if goods_group is not APIHelper.SKIP:
            self.goods_group = goods_group 
        if target_quantity is not APIHelper.SKIP:
            self.target_quantity = target_quantity 
        if content_2 is not APIHelper.SKIP:
            self.content_2 = content_2 
        if target_pallets is not APIHelper.SKIP:
            self.target_pallets = target_pallets 
        if target_weight is not APIHelper.SKIP:
            self.target_weight = target_weight 
        if cost_center is not APIHelper.SKIP:
            self.cost_center = cost_center 
        if cost_unit is not APIHelper.SKIP:
            self.cost_unit = cost_unit 
        if account_table is not APIHelper.SKIP:
            self.account_table = account_table 
        if account_table_sap is not APIHelper.SKIP:
            self.account_table_sap = account_table_sap 
        if cost_center_sap is not APIHelper.SKIP:
            self.cost_center_sap = cost_center_sap 
        if cost_unit_sap is not APIHelper.SKIP:
            self.cost_unit_sap = cost_unit_sap 
        if target_package is not APIHelper.SKIP:
            self.target_package = target_package 
        if detail_reference is not APIHelper.SKIP:
            self.detail_reference = detail_reference 
        if goods_class is not APIHelper.SKIP:
            self.goods_class = goods_class 
        if target_storage_places is not APIHelper.SKIP:
            self.target_storage_places = target_storage_places 
        if statistical_commodity_code is not APIHelper.SKIP:
            self.statistical_commodity_code = statistical_commodity_code 
        if compartment is not APIHelper.SKIP:
            self.compartment = compartment 
        if insurable_value is not APIHelper.SKIP:
            self.insurable_value = insurable_value 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if efb_observe is not APIHelper.SKIP:
            self.efb_observe = efb_observe 
        if empties is not APIHelper.SKIP:
            self.empties = empties 
        if ecological_menace is not APIHelper.SKIP:
            self.ecological_menace = ecological_menace 
        if dangerous_goods is not APIHelper.SKIP:
            self.dangerous_goods = dangerous_goods 
        if un_number is not APIHelper.SKIP:
            self.un_number = un_number 
        if un_class is not APIHelper.SKIP:
            self.un_class = un_class 
        if un_digit is not APIHelper.SKIP:
            self.un_digit = un_digit 
        if order_d_good_id is not APIHelper.SKIP:
            self.order_d_good_id = order_d_good_id 
        if transport_category is not APIHelper.SKIP:
            self.transport_category = transport_category 
        if container_id is not APIHelper.SKIP:
            self.container_id = container_id 
        if container_amount is not APIHelper.SKIP:
            self.container_amount = container_amount 
        if container_type is not APIHelper.SKIP:
            self.container_type = container_type 
        if statistic_value is not APIHelper.SKIP:
            self.statistic_value = statistic_value 
        if component is not APIHelper.SKIP:
            self.component = component 
        if intra_int_nr is not APIHelper.SKIP:
            self.intra_int_nr = intra_int_nr 
        if outra_int_nr is not APIHelper.SKIP:
            self.outra_int_nr = outra_int_nr 
        if booking is not APIHelper.SKIP:
            self.booking = booking 
        if zoll_intnr is not APIHelper.SKIP:
            self.zoll_intnr = zoll_intnr 
        if cont_plombe is not APIHelper.SKIP:
            self.cont_plombe = cont_plombe 
        if delivery_note_package_reference is not APIHelper.SKIP:
            self.delivery_note_package_reference = delivery_note_package_reference 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        units = None
        if dictionary.get('units') is not None:
            units = [LISPublicOrderDetailUnit.from_dictionary(x) for x in dictionary.get('units')]
        else:
            units = APIHelper.SKIP
        order_id = dictionary.get("orderId") if dictionary.get("orderId") else APIHelper.SKIP
        detail_id = dictionary.get("detailId") if dictionary.get("detailId") else APIHelper.SKIP
        reference = dictionary.get("reference") if dictionary.get("reference") else APIHelper.SKIP
        content = dictionary.get("content") if dictionary.get("content") else APIHelper.SKIP
        weight = dictionary.get("weight") if dictionary.get("weight") else APIHelper.SKIP
        tare_weight = dictionary.get("tareWeight") if dictionary.get("tareWeight") else APIHelper.SKIP
        chargeable_weight = dictionary.get("chargeableWeight") if dictionary.get("chargeableWeight") else APIHelper.SKIP
        bulky_weight = dictionary.get("bulkyWeight") if dictionary.get("bulkyWeight") else APIHelper.SKIP
        tariff_id = dictionary.get("tariffId") if dictionary.get("tariffId") else APIHelper.SKIP
        article_no = dictionary.get("articleNo") if dictionary.get("articleNo") else APIHelper.SKIP
        cubic_decimeter = dictionary.get("cubicDecimeter") if dictionary.get("cubicDecimeter") else APIHelper.SKIP
        loading_meter = dictionary.get("loadingMeter") if dictionary.get("loadingMeter") else APIHelper.SKIP
        square_meter = dictionary.get("squareMeter") if dictionary.get("squareMeter") else APIHelper.SKIP
        storage_places = dictionary.get("storagePlaces") if dictionary.get("storagePlaces") else APIHelper.SKIP
        declared_value = dictionary.get("declaredValue") if dictionary.get("declaredValue") else APIHelper.SKIP
        hazardous_good_qualified = dictionary.get("hazardousGoodQualified") if "hazardousGoodQualified" in dictionary.keys() else APIHelper.SKIP
        free_text_1 = dictionary.get("freeText1") if dictionary.get("freeText1") else APIHelper.SKIP
        free_text_2 = dictionary.get("freeText2") if dictionary.get("freeText2") else APIHelper.SKIP
        free_text_3 = dictionary.get("freeText3") if dictionary.get("freeText3") else APIHelper.SKIP
        free_number_1 = dictionary.get("freeNumber1") if dictionary.get("freeNumber1") else APIHelper.SKIP
        free_number_2 = dictionary.get("freeNumber2") if dictionary.get("freeNumber2") else APIHelper.SKIP
        free_date_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("freeDate1")).datetime if dictionary.get("freeDate1") else APIHelper.SKIP
        free_date_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("freeDate2")).datetime if dictionary.get("freeDate2") else APIHelper.SKIP
        free_amount_1 = dictionary.get("freeAmount1") if dictionary.get("freeAmount1") else APIHelper.SKIP
        free_amount_2 = dictionary.get("freeAmount2") if dictionary.get("freeAmount2") else APIHelper.SKIP
        free_amount_3 = dictionary.get("freeAmount3") if dictionary.get("freeAmount3") else APIHelper.SKIP
        free_amount_4 = dictionary.get("freeAmount4") if dictionary.get("freeAmount4") else APIHelper.SKIP
        free_amount_5 = dictionary.get("freeAmount5") if dictionary.get("freeAmount5") else APIHelper.SKIP
        free_amount_6 = dictionary.get("freeAmount6") if dictionary.get("freeAmount6") else APIHelper.SKIP
        free_amount_7 = dictionary.get("freeAmount7") if dictionary.get("freeAmount7") else APIHelper.SKIP
        free_amount_8 = dictionary.get("freeAmount8") if dictionary.get("freeAmount8") else APIHelper.SKIP
        free_amount_9 = dictionary.get("freeAmount9") if dictionary.get("freeAmount9") else APIHelper.SKIP
        free_amount_10 = dictionary.get("freeAmount10") if dictionary.get("freeAmount10") else APIHelper.SKIP
        free_amount_11 = dictionary.get("freeAmount11") if dictionary.get("freeAmount11") else APIHelper.SKIP
        free_amount_12 = dictionary.get("freeAmount12") if dictionary.get("freeAmount12") else APIHelper.SKIP
        temp_min = dictionary.get("tempMin") if dictionary.get("tempMin") else APIHelper.SKIP
        temp_max = dictionary.get("tempMax") if dictionary.get("tempMax") else APIHelper.SKIP
        freight_payer_id = dictionary.get("freightPayerId") if dictionary.get("freightPayerId") else APIHelper.SKIP
        reefer_cargo = dictionary.get("reeferCargo") if "reeferCargo" in dictionary.keys() else APIHelper.SKIP
        sub_pallet = dictionary.get("subPallet") if dictionary.get("subPallet") else APIHelper.SKIP
        height = dictionary.get("height") if dictionary.get("height") else APIHelper.SKIP
        length = dictionary.get("length") if dictionary.get("length") else APIHelper.SKIP
        width = dictionary.get("width") if dictionary.get("width") else APIHelper.SKIP
        goods_group = dictionary.get("goodsGroup") if dictionary.get("goodsGroup") else APIHelper.SKIP
        target_quantity = dictionary.get("targetQuantity") if dictionary.get("targetQuantity") else APIHelper.SKIP
        content_2 = dictionary.get("content2") if dictionary.get("content2") else APIHelper.SKIP
        target_pallets = dictionary.get("targetPallets") if dictionary.get("targetPallets") else APIHelper.SKIP
        target_weight = dictionary.get("targetWeight") if dictionary.get("targetWeight") else APIHelper.SKIP
        cost_center = dictionary.get("costCenter") if dictionary.get("costCenter") else APIHelper.SKIP
        cost_unit = dictionary.get("costUnit") if dictionary.get("costUnit") else APIHelper.SKIP
        account_table = dictionary.get("accountTable") if dictionary.get("accountTable") else APIHelper.SKIP
        account_table_sap = dictionary.get("accountTableSAP") if dictionary.get("accountTableSAP") else APIHelper.SKIP
        cost_center_sap = dictionary.get("costCenterSAP") if dictionary.get("costCenterSAP") else APIHelper.SKIP
        cost_unit_sap = dictionary.get("costUnitSAP") if dictionary.get("costUnitSAP") else APIHelper.SKIP
        target_package = dictionary.get("targetPackage") if dictionary.get("targetPackage") else APIHelper.SKIP
        detail_reference = dictionary.get("detailReference") if dictionary.get("detailReference") else APIHelper.SKIP
        goods_class = dictionary.get("goodsClass") if dictionary.get("goodsClass") else APIHelper.SKIP
        target_storage_places = dictionary.get("targetStoragePlaces") if dictionary.get("targetStoragePlaces") else APIHelper.SKIP
        statistical_commodity_code = dictionary.get("statisticalCommodityCode") if dictionary.get("statisticalCommodityCode") else APIHelper.SKIP
        compartment = dictionary.get("compartment") if dictionary.get("compartment") else APIHelper.SKIP
        insurable_value = dictionary.get("insurableValue") if dictionary.get("insurableValue") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        efb_observe = dictionary.get("efbObserve") if dictionary.get("efbObserve") else APIHelper.SKIP
        empties = dictionary.get("empties") if dictionary.get("empties") else APIHelper.SKIP
        ecological_menace = dictionary.get("ecologicalMenace") if dictionary.get("ecologicalMenace") else APIHelper.SKIP
        dangerous_goods = None
        if dictionary.get('dangerousGoods') is not None:
            dangerous_goods = [LISPublicOrderDGood.from_dictionary(x) for x in dictionary.get('dangerousGoods')]
        else:
            dangerous_goods = APIHelper.SKIP
        un_number = dictionary.get("unNumber") if dictionary.get("unNumber") else APIHelper.SKIP
        un_class = dictionary.get("unClass") if dictionary.get("unClass") else APIHelper.SKIP
        un_digit = dictionary.get("unDigit") if dictionary.get("unDigit") else APIHelper.SKIP
        order_d_good_id = dictionary.get("orderDGoodId") if dictionary.get("orderDGoodId") else APIHelper.SKIP
        transport_category = dictionary.get("transportCategory") if dictionary.get("transportCategory") else APIHelper.SKIP
        container_id = dictionary.get("containerId") if dictionary.get("containerId") else APIHelper.SKIP
        container_amount = dictionary.get("containerAmount") if dictionary.get("containerAmount") else APIHelper.SKIP
        container_type = dictionary.get("containerType") if dictionary.get("containerType") else APIHelper.SKIP
        statistic_value = dictionary.get("statisticValue") if dictionary.get("statisticValue") else APIHelper.SKIP
        component = dictionary.get("component") if dictionary.get("component") else APIHelper.SKIP
        intra_int_nr = dictionary.get("intraIntNr") if dictionary.get("intraIntNr") else APIHelper.SKIP
        outra_int_nr = dictionary.get("outraIntNr") if dictionary.get("outraIntNr") else APIHelper.SKIP
        booking = dictionary.get("booking") if dictionary.get("booking") else APIHelper.SKIP
        zoll_intnr = dictionary.get("zollIntnr") if dictionary.get("zollIntnr") else APIHelper.SKIP
        cont_plombe = dictionary.get("contPlombe") if dictionary.get("contPlombe") else APIHelper.SKIP
        delivery_note_package_reference = dictionary.get("deliveryNotePackageReference") if dictionary.get("deliveryNotePackageReference") else APIHelper.SKIP
        # Return an object of this model
        return cls(units,
                   order_id,
                   detail_id,
                   reference,
                   content,
                   weight,
                   tare_weight,
                   chargeable_weight,
                   bulky_weight,
                   tariff_id,
                   article_no,
                   cubic_decimeter,
                   loading_meter,
                   square_meter,
                   storage_places,
                   declared_value,
                   hazardous_good_qualified,
                   free_text_1,
                   free_text_2,
                   free_text_3,
                   free_number_1,
                   free_number_2,
                   free_date_1,
                   free_date_2,
                   free_amount_1,
                   free_amount_2,
                   free_amount_3,
                   free_amount_4,
                   free_amount_5,
                   free_amount_6,
                   free_amount_7,
                   free_amount_8,
                   free_amount_9,
                   free_amount_10,
                   free_amount_11,
                   free_amount_12,
                   temp_min,
                   temp_max,
                   freight_payer_id,
                   reefer_cargo,
                   sub_pallet,
                   height,
                   length,
                   width,
                   goods_group,
                   target_quantity,
                   content_2,
                   target_pallets,
                   target_weight,
                   cost_center,
                   cost_unit,
                   account_table,
                   account_table_sap,
                   cost_center_sap,
                   cost_unit_sap,
                   target_package,
                   detail_reference,
                   goods_class,
                   target_storage_places,
                   statistical_commodity_code,
                   compartment,
                   insurable_value,
                   created_on,
                   created_by,
                   changed_on,
                   changed_by,
                   efb_observe,
                   empties,
                   ecological_menace,
                   dangerous_goods,
                   un_number,
                   un_class,
                   un_digit,
                   order_d_good_id,
                   transport_category,
                   container_id,
                   container_amount,
                   container_type,
                   statistic_value,
                   component,
                   intra_int_nr,
                   outra_int_nr,
                   booking,
                   zoll_intnr,
                   cont_plombe,
                   delivery_note_package_reference)
