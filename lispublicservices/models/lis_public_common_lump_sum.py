# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_meta_info_collection import LISMetaInfoCollection


class LISPublicCommonLumpSum(object):

    """Implementation of the 'LISPublicCommonLumpSum' model.

    TODO: type model description here.

    Attributes:
        object_id (uuid|string): TODO: type description here.
        is_new (bool): TODO: type description here.
        original_hash_snapshot (string): TODO: type description here.
        original_snapshot (object): TODO: type description here.
        current_snapshot (object): TODO: type description here.
        meta_info (LISMetaInfoCollection): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object_id": 'objectId',
        "is_new": 'isNew',
        "original_hash_snapshot": 'originalHashSnapshot',
        "original_snapshot": 'originalSnapshot',
        "current_snapshot": 'currentSnapshot',
        "meta_info": 'metaInfo'
    }

    _optionals = [
        'object_id',
        'is_new',
        'original_hash_snapshot',
        'original_snapshot',
        'current_snapshot',
        'meta_info',
    ]

    def __init__(self,
                 object_id=APIHelper.SKIP,
                 is_new=APIHelper.SKIP,
                 original_hash_snapshot=APIHelper.SKIP,
                 original_snapshot=APIHelper.SKIP,
                 current_snapshot=APIHelper.SKIP,
                 meta_info=APIHelper.SKIP):
        """Constructor for the LISPublicCommonLumpSum class"""

        # Initialize members of the class
        if object_id is not APIHelper.SKIP:
            self.object_id = object_id 
        if is_new is not APIHelper.SKIP:
            self.is_new = is_new 
        if original_hash_snapshot is not APIHelper.SKIP:
            self.original_hash_snapshot = original_hash_snapshot 
        if original_snapshot is not APIHelper.SKIP:
            self.original_snapshot = original_snapshot 
        if current_snapshot is not APIHelper.SKIP:
            self.current_snapshot = current_snapshot 
        if meta_info is not APIHelper.SKIP:
            self.meta_info = meta_info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        object_id = dictionary.get("objectId") if dictionary.get("objectId") else APIHelper.SKIP
        is_new = dictionary.get("isNew") if "isNew" in dictionary.keys() else APIHelper.SKIP
        original_hash_snapshot = dictionary.get("originalHashSnapshot") if dictionary.get("originalHashSnapshot") else APIHelper.SKIP
        original_snapshot = dictionary.get("originalSnapshot") if dictionary.get("originalSnapshot") else APIHelper.SKIP
        current_snapshot = dictionary.get("currentSnapshot") if dictionary.get("currentSnapshot") else APIHelper.SKIP
        meta_info = LISMetaInfoCollection.from_dictionary(dictionary.get('metaInfo')) if 'metaInfo' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(object_id,
                   is_new,
                   original_hash_snapshot,
                   original_snapshot,
                   current_snapshot,
                   meta_info)
