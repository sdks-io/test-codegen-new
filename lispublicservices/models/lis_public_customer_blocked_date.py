# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerBlockedDate(object):

    """Implementation of the 'LISPublicCustomerBlockedDate' model.

    The LISCustomerBlockedDate data contract.

    Attributes:
        customer_id (int): Gets or sets CustomerId.
        address_type (AddressTypeEnum): Gets or sets AddressType.
        blocked_from (datetime): Gets or sets BlockedFrom.
        track_changes (bool): Gets or sets TrackChanges.
        has_changes (bool): Gets or sets HasChanges.
        unlock_date (datetime): Gets or sets the unlock date.
        lock_status (LockStatusEnum): Gets or sets the lock status.
        lock_reason (string): Gets or sets the lock reason.
        unlock_reason (string): Gets or sets the unlock reason.
        blocked_date_id (int): Gets or sets the blocked from identifier.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "address_type": 'addressType',
        "blocked_from": 'blockedFrom',
        "track_changes": 'trackChanges',
        "has_changes": 'hasChanges',
        "unlock_date": 'unlockDate',
        "lock_status": 'lockStatus',
        "lock_reason": 'lockReason',
        "unlock_reason": 'unlockReason',
        "blocked_date_id": 'blockedDateId'
    }

    _optionals = [
        'customer_id',
        'address_type',
        'blocked_from',
        'track_changes',
        'has_changes',
        'unlock_date',
        'lock_status',
        'lock_reason',
        'unlock_reason',
        'blocked_date_id',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 address_type=APIHelper.SKIP,
                 blocked_from=APIHelper.SKIP,
                 track_changes=APIHelper.SKIP,
                 has_changes=APIHelper.SKIP,
                 unlock_date=APIHelper.SKIP,
                 lock_status=APIHelper.SKIP,
                 lock_reason=APIHelper.SKIP,
                 unlock_reason=APIHelper.SKIP,
                 blocked_date_id=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerBlockedDate class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if address_type is not APIHelper.SKIP:
            self.address_type = address_type 
        if blocked_from is not APIHelper.SKIP:
            self.blocked_from = APIHelper.RFC3339DateTime(blocked_from) if blocked_from else None 
        if track_changes is not APIHelper.SKIP:
            self.track_changes = track_changes 
        if has_changes is not APIHelper.SKIP:
            self.has_changes = has_changes 
        if unlock_date is not APIHelper.SKIP:
            self.unlock_date = APIHelper.RFC3339DateTime(unlock_date) if unlock_date else None 
        if lock_status is not APIHelper.SKIP:
            self.lock_status = lock_status 
        if lock_reason is not APIHelper.SKIP:
            self.lock_reason = lock_reason 
        if unlock_reason is not APIHelper.SKIP:
            self.unlock_reason = unlock_reason 
        if blocked_date_id is not APIHelper.SKIP:
            self.blocked_date_id = blocked_date_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        address_type = dictionary.get("addressType") if dictionary.get("addressType") else APIHelper.SKIP
        blocked_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("blockedFrom")).datetime if dictionary.get("blockedFrom") else APIHelper.SKIP
        track_changes = dictionary.get("trackChanges") if "trackChanges" in dictionary.keys() else APIHelper.SKIP
        has_changes = dictionary.get("hasChanges") if "hasChanges" in dictionary.keys() else APIHelper.SKIP
        unlock_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("unlockDate")).datetime if dictionary.get("unlockDate") else APIHelper.SKIP
        lock_status = dictionary.get("lockStatus") if dictionary.get("lockStatus") else APIHelper.SKIP
        lock_reason = dictionary.get("lockReason") if dictionary.get("lockReason") else APIHelper.SKIP
        unlock_reason = dictionary.get("unlockReason") if dictionary.get("unlockReason") else APIHelper.SKIP
        blocked_date_id = dictionary.get("blockedDateId") if dictionary.get("blockedDateId") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   address_type,
                   blocked_from,
                   track_changes,
                   has_changes,
                   unlock_date,
                   lock_status,
                   lock_reason,
                   unlock_reason,
                   blocked_date_id)
