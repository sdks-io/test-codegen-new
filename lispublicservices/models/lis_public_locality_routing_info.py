# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_coordinate import LISPublicCoordinate


class LISPublicLocalityRoutingInfo(object):

    """Implementation of the 'LISPublicLocalityRoutingInfo' model.

    Partial class with the correct namespace

    Attributes:
        is_middle (bool): Gets or sets a value indicating whether this
            instance is middle.
        bsl (string): Gets or sets the BSL.
        degt (string): Gets or sets the DEGT.
        community_code (int): Gets or sets the community code.
        area (int): Gets or sets the area.
        method (MethodEnum): Gets or sets the method.
        coordinate (LISPublicCoordinate): This class represents the public
            coordinate object.
        area_node_1 (int): Gets or sets the node1.
        area_node_2 (int): Gets or sets the node2.
        area_node_3 (int): Gets or sets the node3.
        area_node_4 (int): Gets or sets the node4.
        area_node_5 (int): Gets or sets the node5.
        area_node_6 (int): Gets or sets the node6.
        area_node_7 (int): Gets or sets the node7.
        area_node_8 (int): Gets or sets the node8.
        area_node_9 (int): Gets or sets the node9.
        area_node_10 (int): Gets or sets the node10.
        displacement_km_1 (int): Gets or sets the displacement KM1.
        displacement_km_2 (int): Gets or sets the displacement KM2.
        displacement_km_3 (int): Gets or sets the displacement KM3.
        displacement_km_4 (int): Gets or sets the displacement KM4.
        displacement_km_5 (int): Gets or sets the displacement KM5.
        displacement_km_6 (int): Gets or sets the displacement KM6.
        displacement_km_7 (int): Gets or sets the displacement KM7.
        displacement_km_8 (int): Gets or sets the displacement KM8.
        displacement_km_9 (int): Gets or sets the displacement KM9.
        displacement_km_10 (int): Gets or sets the displacement KM10.
        source (SourceEnum): Is it the middle of the locality?
        ews_node (int): TODO: type description here.
        ews_old_node (int): TODO: type description here.
        astag_node (int): TODO: type description here.
        astag_old_node (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "is_middle": 'isMiddle',
        "bsl": 'bsl',
        "degt": 'degt',
        "community_code": 'communityCode',
        "area": 'area',
        "method": 'method',
        "coordinate": 'coordinate',
        "area_node_1": 'areaNode1',
        "area_node_2": 'areaNode2',
        "area_node_3": 'areaNode3',
        "area_node_4": 'areaNode4',
        "area_node_5": 'areaNode5',
        "area_node_6": 'areaNode6',
        "area_node_7": 'areaNode7',
        "area_node_8": 'areaNode8',
        "area_node_9": 'areaNode9',
        "area_node_10": 'areaNode10',
        "displacement_km_1": 'displacementKm1',
        "displacement_km_2": 'displacementKm2',
        "displacement_km_3": 'displacementKm3',
        "displacement_km_4": 'displacementKm4',
        "displacement_km_5": 'displacementKm5',
        "displacement_km_6": 'displacementKm6',
        "displacement_km_7": 'displacementKm7',
        "displacement_km_8": 'displacementKm8',
        "displacement_km_9": 'displacementKm9',
        "displacement_km_10": 'displacementKm10',
        "source": 'source',
        "ews_node": 'ewsNode',
        "ews_old_node": 'ewsOldNode',
        "astag_node": 'astagNode',
        "astag_old_node": 'astagOldNode'
    }

    _optionals = [
        'is_middle',
        'bsl',
        'degt',
        'community_code',
        'area',
        'method',
        'coordinate',
        'area_node_1',
        'area_node_2',
        'area_node_3',
        'area_node_4',
        'area_node_5',
        'area_node_6',
        'area_node_7',
        'area_node_8',
        'area_node_9',
        'area_node_10',
        'displacement_km_1',
        'displacement_km_2',
        'displacement_km_3',
        'displacement_km_4',
        'displacement_km_5',
        'displacement_km_6',
        'displacement_km_7',
        'displacement_km_8',
        'displacement_km_9',
        'displacement_km_10',
        'source',
        'ews_node',
        'ews_old_node',
        'astag_node',
        'astag_old_node',
    ]

    def __init__(self,
                 is_middle=APIHelper.SKIP,
                 bsl=APIHelper.SKIP,
                 degt=APIHelper.SKIP,
                 community_code=APIHelper.SKIP,
                 area=APIHelper.SKIP,
                 method=APIHelper.SKIP,
                 coordinate=APIHelper.SKIP,
                 area_node_1=APIHelper.SKIP,
                 area_node_2=APIHelper.SKIP,
                 area_node_3=APIHelper.SKIP,
                 area_node_4=APIHelper.SKIP,
                 area_node_5=APIHelper.SKIP,
                 area_node_6=APIHelper.SKIP,
                 area_node_7=APIHelper.SKIP,
                 area_node_8=APIHelper.SKIP,
                 area_node_9=APIHelper.SKIP,
                 area_node_10=APIHelper.SKIP,
                 displacement_km_1=APIHelper.SKIP,
                 displacement_km_2=APIHelper.SKIP,
                 displacement_km_3=APIHelper.SKIP,
                 displacement_km_4=APIHelper.SKIP,
                 displacement_km_5=APIHelper.SKIP,
                 displacement_km_6=APIHelper.SKIP,
                 displacement_km_7=APIHelper.SKIP,
                 displacement_km_8=APIHelper.SKIP,
                 displacement_km_9=APIHelper.SKIP,
                 displacement_km_10=APIHelper.SKIP,
                 source=APIHelper.SKIP,
                 ews_node=APIHelper.SKIP,
                 ews_old_node=APIHelper.SKIP,
                 astag_node=APIHelper.SKIP,
                 astag_old_node=APIHelper.SKIP):
        """Constructor for the LISPublicLocalityRoutingInfo class"""

        # Initialize members of the class
        if is_middle is not APIHelper.SKIP:
            self.is_middle = is_middle 
        if bsl is not APIHelper.SKIP:
            self.bsl = bsl 
        if degt is not APIHelper.SKIP:
            self.degt = degt 
        if community_code is not APIHelper.SKIP:
            self.community_code = community_code 
        if area is not APIHelper.SKIP:
            self.area = area 
        if method is not APIHelper.SKIP:
            self.method = method 
        if coordinate is not APIHelper.SKIP:
            self.coordinate = coordinate 
        if area_node_1 is not APIHelper.SKIP:
            self.area_node_1 = area_node_1 
        if area_node_2 is not APIHelper.SKIP:
            self.area_node_2 = area_node_2 
        if area_node_3 is not APIHelper.SKIP:
            self.area_node_3 = area_node_3 
        if area_node_4 is not APIHelper.SKIP:
            self.area_node_4 = area_node_4 
        if area_node_5 is not APIHelper.SKIP:
            self.area_node_5 = area_node_5 
        if area_node_6 is not APIHelper.SKIP:
            self.area_node_6 = area_node_6 
        if area_node_7 is not APIHelper.SKIP:
            self.area_node_7 = area_node_7 
        if area_node_8 is not APIHelper.SKIP:
            self.area_node_8 = area_node_8 
        if area_node_9 is not APIHelper.SKIP:
            self.area_node_9 = area_node_9 
        if area_node_10 is not APIHelper.SKIP:
            self.area_node_10 = area_node_10 
        if displacement_km_1 is not APIHelper.SKIP:
            self.displacement_km_1 = displacement_km_1 
        if displacement_km_2 is not APIHelper.SKIP:
            self.displacement_km_2 = displacement_km_2 
        if displacement_km_3 is not APIHelper.SKIP:
            self.displacement_km_3 = displacement_km_3 
        if displacement_km_4 is not APIHelper.SKIP:
            self.displacement_km_4 = displacement_km_4 
        if displacement_km_5 is not APIHelper.SKIP:
            self.displacement_km_5 = displacement_km_5 
        if displacement_km_6 is not APIHelper.SKIP:
            self.displacement_km_6 = displacement_km_6 
        if displacement_km_7 is not APIHelper.SKIP:
            self.displacement_km_7 = displacement_km_7 
        if displacement_km_8 is not APIHelper.SKIP:
            self.displacement_km_8 = displacement_km_8 
        if displacement_km_9 is not APIHelper.SKIP:
            self.displacement_km_9 = displacement_km_9 
        if displacement_km_10 is not APIHelper.SKIP:
            self.displacement_km_10 = displacement_km_10 
        if source is not APIHelper.SKIP:
            self.source = source 
        if ews_node is not APIHelper.SKIP:
            self.ews_node = ews_node 
        if ews_old_node is not APIHelper.SKIP:
            self.ews_old_node = ews_old_node 
        if astag_node is not APIHelper.SKIP:
            self.astag_node = astag_node 
        if astag_old_node is not APIHelper.SKIP:
            self.astag_old_node = astag_old_node 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        is_middle = dictionary.get("isMiddle") if "isMiddle" in dictionary.keys() else APIHelper.SKIP
        bsl = dictionary.get("bsl") if dictionary.get("bsl") else APIHelper.SKIP
        degt = dictionary.get("degt") if dictionary.get("degt") else APIHelper.SKIP
        community_code = dictionary.get("communityCode") if dictionary.get("communityCode") else APIHelper.SKIP
        area = dictionary.get("area") if dictionary.get("area") else APIHelper.SKIP
        method = dictionary.get("method") if dictionary.get("method") else APIHelper.SKIP
        coordinate = LISPublicCoordinate.from_dictionary(dictionary.get('coordinate')) if 'coordinate' in dictionary.keys() else APIHelper.SKIP
        area_node_1 = dictionary.get("areaNode1") if dictionary.get("areaNode1") else APIHelper.SKIP
        area_node_2 = dictionary.get("areaNode2") if dictionary.get("areaNode2") else APIHelper.SKIP
        area_node_3 = dictionary.get("areaNode3") if dictionary.get("areaNode3") else APIHelper.SKIP
        area_node_4 = dictionary.get("areaNode4") if dictionary.get("areaNode4") else APIHelper.SKIP
        area_node_5 = dictionary.get("areaNode5") if dictionary.get("areaNode5") else APIHelper.SKIP
        area_node_6 = dictionary.get("areaNode6") if dictionary.get("areaNode6") else APIHelper.SKIP
        area_node_7 = dictionary.get("areaNode7") if dictionary.get("areaNode7") else APIHelper.SKIP
        area_node_8 = dictionary.get("areaNode8") if dictionary.get("areaNode8") else APIHelper.SKIP
        area_node_9 = dictionary.get("areaNode9") if dictionary.get("areaNode9") else APIHelper.SKIP
        area_node_10 = dictionary.get("areaNode10") if dictionary.get("areaNode10") else APIHelper.SKIP
        displacement_km_1 = dictionary.get("displacementKm1") if dictionary.get("displacementKm1") else APIHelper.SKIP
        displacement_km_2 = dictionary.get("displacementKm2") if dictionary.get("displacementKm2") else APIHelper.SKIP
        displacement_km_3 = dictionary.get("displacementKm3") if dictionary.get("displacementKm3") else APIHelper.SKIP
        displacement_km_4 = dictionary.get("displacementKm4") if dictionary.get("displacementKm4") else APIHelper.SKIP
        displacement_km_5 = dictionary.get("displacementKm5") if dictionary.get("displacementKm5") else APIHelper.SKIP
        displacement_km_6 = dictionary.get("displacementKm6") if dictionary.get("displacementKm6") else APIHelper.SKIP
        displacement_km_7 = dictionary.get("displacementKm7") if dictionary.get("displacementKm7") else APIHelper.SKIP
        displacement_km_8 = dictionary.get("displacementKm8") if dictionary.get("displacementKm8") else APIHelper.SKIP
        displacement_km_9 = dictionary.get("displacementKm9") if dictionary.get("displacementKm9") else APIHelper.SKIP
        displacement_km_10 = dictionary.get("displacementKm10") if dictionary.get("displacementKm10") else APIHelper.SKIP
        source = dictionary.get("source") if dictionary.get("source") else APIHelper.SKIP
        ews_node = dictionary.get("ewsNode") if dictionary.get("ewsNode") else APIHelper.SKIP
        ews_old_node = dictionary.get("ewsOldNode") if dictionary.get("ewsOldNode") else APIHelper.SKIP
        astag_node = dictionary.get("astagNode") if dictionary.get("astagNode") else APIHelper.SKIP
        astag_old_node = dictionary.get("astagOldNode") if dictionary.get("astagOldNode") else APIHelper.SKIP
        # Return an object of this model
        return cls(is_middle,
                   bsl,
                   degt,
                   community_code,
                   area,
                   method,
                   coordinate,
                   area_node_1,
                   area_node_2,
                   area_node_3,
                   area_node_4,
                   area_node_5,
                   area_node_6,
                   area_node_7,
                   area_node_8,
                   area_node_9,
                   area_node_10,
                   displacement_km_1,
                   displacement_km_2,
                   displacement_km_3,
                   displacement_km_4,
                   displacement_km_5,
                   displacement_km_6,
                   displacement_km_7,
                   displacement_km_8,
                   displacement_km_9,
                   displacement_km_10,
                   source,
                   ews_node,
                   ews_old_node,
                   astag_node,
                   astag_old_node)
