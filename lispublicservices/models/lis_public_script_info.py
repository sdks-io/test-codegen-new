# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicScriptInfo(object):

    """Implementation of the 'LISPublicScriptInfo' model.

    This class contains meta information about a script.

    Attributes:
        script_id (string): The script identifier (GUID).
        script_name (string): The name of the script.
        script_comment (string): A description of the script.
        event_type (EventTypeEnum): The event type.
        implementation_type (string): The implementation type.
        product (ProductEnum): The product.
        external_key (string): The external key.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "script_id": 'scriptId',
        "script_name": 'scriptName',
        "script_comment": 'scriptComment',
        "event_type": 'eventType',
        "implementation_type": 'implementationType',
        "product": 'product',
        "external_key": 'externalKey'
    }

    _optionals = [
        'script_id',
        'script_name',
        'script_comment',
        'event_type',
        'implementation_type',
        'product',
        'external_key',
    ]

    def __init__(self,
                 script_id=APIHelper.SKIP,
                 script_name=APIHelper.SKIP,
                 script_comment=APIHelper.SKIP,
                 event_type=APIHelper.SKIP,
                 implementation_type=APIHelper.SKIP,
                 product=APIHelper.SKIP,
                 external_key=APIHelper.SKIP):
        """Constructor for the LISPublicScriptInfo class"""

        # Initialize members of the class
        if script_id is not APIHelper.SKIP:
            self.script_id = script_id 
        if script_name is not APIHelper.SKIP:
            self.script_name = script_name 
        if script_comment is not APIHelper.SKIP:
            self.script_comment = script_comment 
        if event_type is not APIHelper.SKIP:
            self.event_type = event_type 
        if implementation_type is not APIHelper.SKIP:
            self.implementation_type = implementation_type 
        if product is not APIHelper.SKIP:
            self.product = product 
        if external_key is not APIHelper.SKIP:
            self.external_key = external_key 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        script_id = dictionary.get("scriptId") if dictionary.get("scriptId") else APIHelper.SKIP
        script_name = dictionary.get("scriptName") if dictionary.get("scriptName") else APIHelper.SKIP
        script_comment = dictionary.get("scriptComment") if dictionary.get("scriptComment") else APIHelper.SKIP
        event_type = dictionary.get("eventType") if dictionary.get("eventType") else APIHelper.SKIP
        implementation_type = dictionary.get("implementationType") if dictionary.get("implementationType") else APIHelper.SKIP
        product = dictionary.get("product") if dictionary.get("product") else APIHelper.SKIP
        external_key = dictionary.get("externalKey") if dictionary.get("externalKey") else APIHelper.SKIP
        # Return an object of this model
        return cls(script_id,
                   script_name,
                   script_comment,
                   event_type,
                   implementation_type,
                   product,
                   external_key)
