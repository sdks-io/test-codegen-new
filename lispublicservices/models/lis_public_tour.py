# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_address import LISPublicAddress
from lispublicservices.models.lis_public_tour_aggregates import LISPublicTourAggregates
from lispublicservices.models.lis_public_tour_route_info import LISPublicTourRouteInfo


class LISPublicTour(object):

    """Implementation of the 'LISPublicTour' model.

    The public tour

    Attributes:
        tour_id (int): Gets or sets the tour id.
        tour_no (int): Gets or sets the tour no.
        dossier_no (string): Gets or sets the pos no.
        state (StateEnum): Gets or sets the state.
        loading_date (datetime): Gets or sets the loading date.
        loading_time (datetime): Gets or sets the loading time.
        unloading_date (datetime): Gets or sets the unloading date.
        unloading_time (datetime): Gets or sets the unloading time.
        carrier_id (int): Gets or sets the carrier id.
        lorry_id (string): Gets or sets the lorry id.
        trailer_id (string): Gets or sets the trailer id.
        loading_point (LISPublicAddress): This class represents the public
            address object.
        unloading_point (LISPublicAddress): This class represents the public
            address object.
        changed_on (datetime): Gets or sets the date of the last change to
            this item.
        changed_by (string): Gets or sets the name of the user that made the
            last change to this item.
        tour_information_1 (int): Gets or sets the tour information 1.
        tour_information_2 (int): Gets or sets the tour information 2.
        tour_information_3 (int): Gets or sets the tour information 3.
        tour_information_4 (int): Gets or sets the tour information 4.
        tour_information_5 (int): Gets or sets the tour information 5.
        tour_information_6 (int): Gets or sets the tour information 6.
        tour_information_7 (int): Gets or sets the tour information 7.
        tour_information_8 (int): Gets or sets the tour information 8.
        tour_information_9 (int): Gets or sets the tour information 9.
        tour_information_10 (int): Gets or sets the tour information 10.
        created_on (datetime): Gets or sets the name of the user that created
            this item.
        created_by (string): Gets or sets the date the item was created.
        planned_by (string): Gets or sets the planned by.
        lorry_license_plate (string): Gets or sets the lorry license plate.
        trailer_license_plate (string): Gets or sets the trailer license
            plate.
        carrier_condition_type (CarrierConditionTypeEnum): Gets or sets the
            type of the carrier condition.
        route_info (LISPublicTourRouteInfo): The public common route info
        aggregates (LISPublicTourAggregates): The public tour aggregates
        charges (float): Gets or sets the charges.
        calculated_charges (float): Gets or sets the calculated charges.
        proceeds (float): Gets or sets the proceeds.
        proportional_calculated_invoice_amount (float): Gets or sets the
            proportional calculated invoice amount.
        proportional_credit_net_amount (float): Gets or sets the proportional
            credit net amount.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tour_id": 'tourId',
        "tour_no": 'tourNo',
        "dossier_no": 'dossierNo',
        "state": 'state',
        "loading_date": 'loadingDate',
        "loading_time": 'loadingTime',
        "unloading_date": 'unloadingDate',
        "unloading_time": 'unloadingTime',
        "carrier_id": 'carrierId',
        "lorry_id": 'lorryId',
        "trailer_id": 'trailerId',
        "loading_point": 'loadingPoint',
        "unloading_point": 'unloadingPoint',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "tour_information_1": 'tourInformation1',
        "tour_information_2": 'tourInformation2',
        "tour_information_3": 'tourInformation3',
        "tour_information_4": 'tourInformation4',
        "tour_information_5": 'tourInformation5',
        "tour_information_6": 'tourInformation6',
        "tour_information_7": 'tourInformation7',
        "tour_information_8": 'tourInformation8',
        "tour_information_9": 'tourInformation9',
        "tour_information_10": 'tourInformation10',
        "created_on": 'createdOn',
        "created_by": 'createdBy',
        "planned_by": 'plannedBy',
        "lorry_license_plate": 'lorryLicensePlate',
        "trailer_license_plate": 'trailerLicensePlate',
        "carrier_condition_type": 'carrierConditionType',
        "route_info": 'routeInfo',
        "aggregates": 'aggregates',
        "charges": 'charges',
        "calculated_charges": 'calculatedCharges',
        "proceeds": 'proceeds',
        "proportional_calculated_invoice_amount": 'proportionalCalculatedInvoiceAmount',
        "proportional_credit_net_amount": 'proportionalCreditNetAmount'
    }

    _optionals = [
        'tour_id',
        'tour_no',
        'dossier_no',
        'state',
        'loading_date',
        'loading_time',
        'unloading_date',
        'unloading_time',
        'carrier_id',
        'lorry_id',
        'trailer_id',
        'loading_point',
        'unloading_point',
        'changed_on',
        'changed_by',
        'tour_information_1',
        'tour_information_2',
        'tour_information_3',
        'tour_information_4',
        'tour_information_5',
        'tour_information_6',
        'tour_information_7',
        'tour_information_8',
        'tour_information_9',
        'tour_information_10',
        'created_on',
        'created_by',
        'planned_by',
        'lorry_license_plate',
        'trailer_license_plate',
        'carrier_condition_type',
        'route_info',
        'aggregates',
        'charges',
        'calculated_charges',
        'proceeds',
        'proportional_calculated_invoice_amount',
        'proportional_credit_net_amount',
    ]

    def __init__(self,
                 tour_id=APIHelper.SKIP,
                 tour_no=APIHelper.SKIP,
                 dossier_no=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 loading_date=APIHelper.SKIP,
                 loading_time=APIHelper.SKIP,
                 unloading_date=APIHelper.SKIP,
                 unloading_time=APIHelper.SKIP,
                 carrier_id=APIHelper.SKIP,
                 lorry_id=APIHelper.SKIP,
                 trailer_id=APIHelper.SKIP,
                 loading_point=APIHelper.SKIP,
                 unloading_point=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 tour_information_1=APIHelper.SKIP,
                 tour_information_2=APIHelper.SKIP,
                 tour_information_3=APIHelper.SKIP,
                 tour_information_4=APIHelper.SKIP,
                 tour_information_5=APIHelper.SKIP,
                 tour_information_6=APIHelper.SKIP,
                 tour_information_7=APIHelper.SKIP,
                 tour_information_8=APIHelper.SKIP,
                 tour_information_9=APIHelper.SKIP,
                 tour_information_10=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 planned_by=APIHelper.SKIP,
                 lorry_license_plate=APIHelper.SKIP,
                 trailer_license_plate=APIHelper.SKIP,
                 carrier_condition_type=APIHelper.SKIP,
                 route_info=APIHelper.SKIP,
                 aggregates=APIHelper.SKIP,
                 charges=APIHelper.SKIP,
                 calculated_charges=APIHelper.SKIP,
                 proceeds=APIHelper.SKIP,
                 proportional_calculated_invoice_amount=APIHelper.SKIP,
                 proportional_credit_net_amount=APIHelper.SKIP):
        """Constructor for the LISPublicTour class"""

        # Initialize members of the class
        if tour_id is not APIHelper.SKIP:
            self.tour_id = tour_id 
        if tour_no is not APIHelper.SKIP:
            self.tour_no = tour_no 
        if dossier_no is not APIHelper.SKIP:
            self.dossier_no = dossier_no 
        if state is not APIHelper.SKIP:
            self.state = state 
        if loading_date is not APIHelper.SKIP:
            self.loading_date = APIHelper.RFC3339DateTime(loading_date) if loading_date else None 
        if loading_time is not APIHelper.SKIP:
            self.loading_time = APIHelper.RFC3339DateTime(loading_time) if loading_time else None 
        if unloading_date is not APIHelper.SKIP:
            self.unloading_date = APIHelper.RFC3339DateTime(unloading_date) if unloading_date else None 
        if unloading_time is not APIHelper.SKIP:
            self.unloading_time = APIHelper.RFC3339DateTime(unloading_time) if unloading_time else None 
        if carrier_id is not APIHelper.SKIP:
            self.carrier_id = carrier_id 
        if lorry_id is not APIHelper.SKIP:
            self.lorry_id = lorry_id 
        if trailer_id is not APIHelper.SKIP:
            self.trailer_id = trailer_id 
        if loading_point is not APIHelper.SKIP:
            self.loading_point = loading_point 
        if unloading_point is not APIHelper.SKIP:
            self.unloading_point = unloading_point 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if tour_information_1 is not APIHelper.SKIP:
            self.tour_information_1 = tour_information_1 
        if tour_information_2 is not APIHelper.SKIP:
            self.tour_information_2 = tour_information_2 
        if tour_information_3 is not APIHelper.SKIP:
            self.tour_information_3 = tour_information_3 
        if tour_information_4 is not APIHelper.SKIP:
            self.tour_information_4 = tour_information_4 
        if tour_information_5 is not APIHelper.SKIP:
            self.tour_information_5 = tour_information_5 
        if tour_information_6 is not APIHelper.SKIP:
            self.tour_information_6 = tour_information_6 
        if tour_information_7 is not APIHelper.SKIP:
            self.tour_information_7 = tour_information_7 
        if tour_information_8 is not APIHelper.SKIP:
            self.tour_information_8 = tour_information_8 
        if tour_information_9 is not APIHelper.SKIP:
            self.tour_information_9 = tour_information_9 
        if tour_information_10 is not APIHelper.SKIP:
            self.tour_information_10 = tour_information_10 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if planned_by is not APIHelper.SKIP:
            self.planned_by = planned_by 
        if lorry_license_plate is not APIHelper.SKIP:
            self.lorry_license_plate = lorry_license_plate 
        if trailer_license_plate is not APIHelper.SKIP:
            self.trailer_license_plate = trailer_license_plate 
        if carrier_condition_type is not APIHelper.SKIP:
            self.carrier_condition_type = carrier_condition_type 
        if route_info is not APIHelper.SKIP:
            self.route_info = route_info 
        if aggregates is not APIHelper.SKIP:
            self.aggregates = aggregates 
        if charges is not APIHelper.SKIP:
            self.charges = charges 
        if calculated_charges is not APIHelper.SKIP:
            self.calculated_charges = calculated_charges 
        if proceeds is not APIHelper.SKIP:
            self.proceeds = proceeds 
        if proportional_calculated_invoice_amount is not APIHelper.SKIP:
            self.proportional_calculated_invoice_amount = proportional_calculated_invoice_amount 
        if proportional_credit_net_amount is not APIHelper.SKIP:
            self.proportional_credit_net_amount = proportional_credit_net_amount 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        tour_id = dictionary.get("tourId") if dictionary.get("tourId") else APIHelper.SKIP
        tour_no = dictionary.get("tourNo") if dictionary.get("tourNo") else APIHelper.SKIP
        dossier_no = dictionary.get("dossierNo") if dictionary.get("dossierNo") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        loading_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingDate")).datetime if dictionary.get("loadingDate") else APIHelper.SKIP
        loading_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTime")).datetime if dictionary.get("loadingTime") else APIHelper.SKIP
        unloading_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingDate")).datetime if dictionary.get("unloadingDate") else APIHelper.SKIP
        unloading_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingTime")).datetime if dictionary.get("unloadingTime") else APIHelper.SKIP
        carrier_id = dictionary.get("carrierId") if dictionary.get("carrierId") else APIHelper.SKIP
        lorry_id = dictionary.get("lorryId") if dictionary.get("lorryId") else APIHelper.SKIP
        trailer_id = dictionary.get("trailerId") if dictionary.get("trailerId") else APIHelper.SKIP
        loading_point = LISPublicAddress.from_dictionary(dictionary.get('loadingPoint')) if 'loadingPoint' in dictionary.keys() else APIHelper.SKIP
        unloading_point = LISPublicAddress.from_dictionary(dictionary.get('unloadingPoint')) if 'unloadingPoint' in dictionary.keys() else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        tour_information_1 = dictionary.get("tourInformation1") if dictionary.get("tourInformation1") else APIHelper.SKIP
        tour_information_2 = dictionary.get("tourInformation2") if dictionary.get("tourInformation2") else APIHelper.SKIP
        tour_information_3 = dictionary.get("tourInformation3") if dictionary.get("tourInformation3") else APIHelper.SKIP
        tour_information_4 = dictionary.get("tourInformation4") if dictionary.get("tourInformation4") else APIHelper.SKIP
        tour_information_5 = dictionary.get("tourInformation5") if dictionary.get("tourInformation5") else APIHelper.SKIP
        tour_information_6 = dictionary.get("tourInformation6") if dictionary.get("tourInformation6") else APIHelper.SKIP
        tour_information_7 = dictionary.get("tourInformation7") if dictionary.get("tourInformation7") else APIHelper.SKIP
        tour_information_8 = dictionary.get("tourInformation8") if dictionary.get("tourInformation8") else APIHelper.SKIP
        tour_information_9 = dictionary.get("tourInformation9") if dictionary.get("tourInformation9") else APIHelper.SKIP
        tour_information_10 = dictionary.get("tourInformation10") if dictionary.get("tourInformation10") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        planned_by = dictionary.get("plannedBy") if dictionary.get("plannedBy") else APIHelper.SKIP
        lorry_license_plate = dictionary.get("lorryLicensePlate") if dictionary.get("lorryLicensePlate") else APIHelper.SKIP
        trailer_license_plate = dictionary.get("trailerLicensePlate") if dictionary.get("trailerLicensePlate") else APIHelper.SKIP
        carrier_condition_type = dictionary.get("carrierConditionType") if dictionary.get("carrierConditionType") else APIHelper.SKIP
        route_info = LISPublicTourRouteInfo.from_dictionary(dictionary.get('routeInfo')) if 'routeInfo' in dictionary.keys() else APIHelper.SKIP
        aggregates = LISPublicTourAggregates.from_dictionary(dictionary.get('aggregates')) if 'aggregates' in dictionary.keys() else APIHelper.SKIP
        charges = dictionary.get("charges") if dictionary.get("charges") else APIHelper.SKIP
        calculated_charges = dictionary.get("calculatedCharges") if dictionary.get("calculatedCharges") else APIHelper.SKIP
        proceeds = dictionary.get("proceeds") if dictionary.get("proceeds") else APIHelper.SKIP
        proportional_calculated_invoice_amount = dictionary.get("proportionalCalculatedInvoiceAmount") if dictionary.get("proportionalCalculatedInvoiceAmount") else APIHelper.SKIP
        proportional_credit_net_amount = dictionary.get("proportionalCreditNetAmount") if dictionary.get("proportionalCreditNetAmount") else APIHelper.SKIP
        # Return an object of this model
        return cls(tour_id,
                   tour_no,
                   dossier_no,
                   state,
                   loading_date,
                   loading_time,
                   unloading_date,
                   unloading_time,
                   carrier_id,
                   lorry_id,
                   trailer_id,
                   loading_point,
                   unloading_point,
                   changed_on,
                   changed_by,
                   tour_information_1,
                   tour_information_2,
                   tour_information_3,
                   tour_information_4,
                   tour_information_5,
                   tour_information_6,
                   tour_information_7,
                   tour_information_8,
                   tour_information_9,
                   tour_information_10,
                   created_on,
                   created_by,
                   planned_by,
                   lorry_license_plate,
                   trailer_license_plate,
                   carrier_condition_type,
                   route_info,
                   aggregates,
                   charges,
                   calculated_charges,
                   proceeds,
                   proportional_calculated_invoice_amount,
                   proportional_credit_net_amount)
