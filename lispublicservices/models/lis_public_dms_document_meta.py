# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicDMSDocumentMeta(object):

    """Implementation of the 'LISPublicDMSDocumentMeta' model.

    TODO: type model description here.

    Attributes:
        document_id (int): TODO: type description here.
        status (int): TODO: type description here.
        archiv_name (string): TODO: type description here.
        folder_name (string): TODO: type description here.
        doc_type_name (string): TODO: type description here.
        description (string): TODO: type description here.
        file_name (string): TODO: type description here.
        created_by (string): TODO: type description here.
        created_on (datetime): TODO: type description here.
        changed_by (string): TODO: type description here.
        changed_on (datetime): TODO: type description here.
        file_extension (string): TODO: type description here.
        key_item_values (dict): TODO: type description here.
        responsible_employee (string): TODO: type description here.
        responsible_employee_group (string): TODO: type description here.
        status_text_no (int): TODO: type description here.
        status_description (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "document_id": 'documentId',
        "status": 'status',
        "archiv_name": 'archivName',
        "folder_name": 'folderName',
        "doc_type_name": 'docTypeName',
        "description": 'description',
        "file_name": 'fileName',
        "created_by": 'createdBy',
        "created_on": 'createdOn',
        "changed_by": 'changedBy',
        "changed_on": 'changedOn',
        "file_extension": 'fileExtension',
        "key_item_values": 'keyItemValues',
        "responsible_employee": 'responsibleEmployee',
        "responsible_employee_group": 'responsibleEmployeeGroup',
        "status_text_no": 'statusTextNo',
        "status_description": 'statusDescription'
    }

    _optionals = [
        'document_id',
        'status',
        'archiv_name',
        'folder_name',
        'doc_type_name',
        'description',
        'file_name',
        'created_by',
        'created_on',
        'changed_by',
        'changed_on',
        'file_extension',
        'key_item_values',
        'responsible_employee',
        'responsible_employee_group',
        'status_text_no',
        'status_description',
    ]

    def __init__(self,
                 document_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 archiv_name=APIHelper.SKIP,
                 folder_name=APIHelper.SKIP,
                 doc_type_name=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 file_name=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 file_extension=APIHelper.SKIP,
                 key_item_values=APIHelper.SKIP,
                 responsible_employee=APIHelper.SKIP,
                 responsible_employee_group=APIHelper.SKIP,
                 status_text_no=APIHelper.SKIP,
                 status_description=APIHelper.SKIP):
        """Constructor for the LISPublicDMSDocumentMeta class"""

        # Initialize members of the class
        if document_id is not APIHelper.SKIP:
            self.document_id = document_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if archiv_name is not APIHelper.SKIP:
            self.archiv_name = archiv_name 
        if folder_name is not APIHelper.SKIP:
            self.folder_name = folder_name 
        if doc_type_name is not APIHelper.SKIP:
            self.doc_type_name = doc_type_name 
        if description is not APIHelper.SKIP:
            self.description = description 
        if file_name is not APIHelper.SKIP:
            self.file_name = file_name 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if file_extension is not APIHelper.SKIP:
            self.file_extension = file_extension 
        if key_item_values is not APIHelper.SKIP:
            self.key_item_values = key_item_values 
        if responsible_employee is not APIHelper.SKIP:
            self.responsible_employee = responsible_employee 
        if responsible_employee_group is not APIHelper.SKIP:
            self.responsible_employee_group = responsible_employee_group 
        if status_text_no is not APIHelper.SKIP:
            self.status_text_no = status_text_no 
        if status_description is not APIHelper.SKIP:
            self.status_description = status_description 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        document_id = dictionary.get("documentId") if dictionary.get("documentId") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        archiv_name = dictionary.get("archivName") if dictionary.get("archivName") else APIHelper.SKIP
        folder_name = dictionary.get("folderName") if dictionary.get("folderName") else APIHelper.SKIP
        doc_type_name = dictionary.get("docTypeName") if dictionary.get("docTypeName") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        file_name = dictionary.get("fileName") if dictionary.get("fileName") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        file_extension = dictionary.get("fileExtension") if dictionary.get("fileExtension") else APIHelper.SKIP
        key_item_values = dictionary.get("keyItemValues") if dictionary.get("keyItemValues") else APIHelper.SKIP
        responsible_employee = dictionary.get("responsibleEmployee") if dictionary.get("responsibleEmployee") else APIHelper.SKIP
        responsible_employee_group = dictionary.get("responsibleEmployeeGroup") if dictionary.get("responsibleEmployeeGroup") else APIHelper.SKIP
        status_text_no = dictionary.get("statusTextNo") if dictionary.get("statusTextNo") else APIHelper.SKIP
        status_description = dictionary.get("statusDescription") if dictionary.get("statusDescription") else APIHelper.SKIP
        # Return an object of this model
        return cls(document_id,
                   status,
                   archiv_name,
                   folder_name,
                   doc_type_name,
                   description,
                   file_name,
                   created_by,
                   created_on,
                   changed_by,
                   changed_on,
                   file_extension,
                   key_item_values,
                   responsible_employee,
                   responsible_employee_group,
                   status_text_no,
                   status_description)
