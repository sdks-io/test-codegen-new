# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerLoadingDevicesScope(object):

    """Implementation of the 'LISPublicCustomerLoadingDevicesScope' model.

    The LISCustomerLoadingDevicesScope data contract.

    Attributes:
        ledger_account (bool): Gets or sets LedgerAccount.
        reminder (bool): Gets or sets Reminder.
        is_edi_receiver (bool): Gets or sets IDEReceiver.
        print_schedule (bool): Gets or sets PrintSchedule.
        mprint (bool): Gets or sets Print.
        print_positive (bool): Gets or sets PrintPositiv.
        reminder_date (int): Gets or sets ReminderDate.
        days_return (int): Gets or sets DaysReturn.
        print_invoice (PrintInvoiceEnum): Gets or sets PrintInvoice.
        group (string): Gets or sets Group.
        account_number (int): Gets or sets AccountNumber.
        crediting_account (CreditingAccountEnum): Gets or sets
            CreditingAccount.
        debiting_account (DebitingAccountEnum): Gets or sets DebitingAccount.
        skip_statistic (bool): Gets or sets SkipStatistic.
        ledger_account_sales_tax_id (string): Gets or sets UCCode.
        account_table (int): Gets or sets AccountTable.
        crediting_booking (bool): Gets or sets CreditingBooking.
        auto_print_special_invoice (bool): Gets or sets
            AutoPrintSpecialInvoice.
        lock_booking (bool): Gets or sets LockBooking.
        is_transshipment_point (bool): Gets or sets a value indicating whether
            this instance is transshipment point.
        compensation_units_account_from (list of string): Gets or sets the
            compensation units account from.
        compensation_units_account_to (list of string): Gets or sets the
            compensation units account to.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ledger_account": 'ledgerAccount',
        "reminder": 'reminder',
        "is_edi_receiver": 'isEDIReceiver',
        "print_schedule": 'printSchedule',
        "mprint": 'print',
        "print_positive": 'printPositive',
        "reminder_date": 'reminderDate',
        "days_return": 'daysReturn',
        "print_invoice": 'printInvoice',
        "group": 'group',
        "account_number": 'accountNumber',
        "crediting_account": 'creditingAccount',
        "debiting_account": 'debitingAccount',
        "skip_statistic": 'skipStatistic',
        "ledger_account_sales_tax_id": 'ledgerAccountSalesTaxId',
        "account_table": 'accountTable',
        "crediting_booking": 'creditingBooking',
        "auto_print_special_invoice": 'autoPrintSpecialInvoice',
        "lock_booking": 'lockBooking',
        "is_transshipment_point": 'isTransshipmentPoint',
        "compensation_units_account_from": 'compensationUnitsAccountFrom',
        "compensation_units_account_to": 'compensationUnitsAccountTo'
    }

    _optionals = [
        'ledger_account',
        'reminder',
        'is_edi_receiver',
        'print_schedule',
        'mprint',
        'print_positive',
        'reminder_date',
        'days_return',
        'print_invoice',
        'group',
        'account_number',
        'crediting_account',
        'debiting_account',
        'skip_statistic',
        'ledger_account_sales_tax_id',
        'account_table',
        'crediting_booking',
        'auto_print_special_invoice',
        'lock_booking',
        'is_transshipment_point',
        'compensation_units_account_from',
        'compensation_units_account_to',
    ]

    def __init__(self,
                 ledger_account=APIHelper.SKIP,
                 reminder=APIHelper.SKIP,
                 is_edi_receiver=APIHelper.SKIP,
                 print_schedule=APIHelper.SKIP,
                 mprint=APIHelper.SKIP,
                 print_positive=APIHelper.SKIP,
                 reminder_date=APIHelper.SKIP,
                 days_return=APIHelper.SKIP,
                 print_invoice=APIHelper.SKIP,
                 group=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 crediting_account=APIHelper.SKIP,
                 debiting_account=APIHelper.SKIP,
                 skip_statistic=APIHelper.SKIP,
                 ledger_account_sales_tax_id=APIHelper.SKIP,
                 account_table=APIHelper.SKIP,
                 crediting_booking=APIHelper.SKIP,
                 auto_print_special_invoice=APIHelper.SKIP,
                 lock_booking=APIHelper.SKIP,
                 is_transshipment_point=APIHelper.SKIP,
                 compensation_units_account_from=APIHelper.SKIP,
                 compensation_units_account_to=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerLoadingDevicesScope class"""

        # Initialize members of the class
        if ledger_account is not APIHelper.SKIP:
            self.ledger_account = ledger_account 
        if reminder is not APIHelper.SKIP:
            self.reminder = reminder 
        if is_edi_receiver is not APIHelper.SKIP:
            self.is_edi_receiver = is_edi_receiver 
        if print_schedule is not APIHelper.SKIP:
            self.print_schedule = print_schedule 
        if mprint is not APIHelper.SKIP:
            self.mprint = mprint 
        if print_positive is not APIHelper.SKIP:
            self.print_positive = print_positive 
        if reminder_date is not APIHelper.SKIP:
            self.reminder_date = reminder_date 
        if days_return is not APIHelper.SKIP:
            self.days_return = days_return 
        if print_invoice is not APIHelper.SKIP:
            self.print_invoice = print_invoice 
        if group is not APIHelper.SKIP:
            self.group = group 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if crediting_account is not APIHelper.SKIP:
            self.crediting_account = crediting_account 
        if debiting_account is not APIHelper.SKIP:
            self.debiting_account = debiting_account 
        if skip_statistic is not APIHelper.SKIP:
            self.skip_statistic = skip_statistic 
        if ledger_account_sales_tax_id is not APIHelper.SKIP:
            self.ledger_account_sales_tax_id = ledger_account_sales_tax_id 
        if account_table is not APIHelper.SKIP:
            self.account_table = account_table 
        if crediting_booking is not APIHelper.SKIP:
            self.crediting_booking = crediting_booking 
        if auto_print_special_invoice is not APIHelper.SKIP:
            self.auto_print_special_invoice = auto_print_special_invoice 
        if lock_booking is not APIHelper.SKIP:
            self.lock_booking = lock_booking 
        if is_transshipment_point is not APIHelper.SKIP:
            self.is_transshipment_point = is_transshipment_point 
        if compensation_units_account_from is not APIHelper.SKIP:
            self.compensation_units_account_from = compensation_units_account_from 
        if compensation_units_account_to is not APIHelper.SKIP:
            self.compensation_units_account_to = compensation_units_account_to 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ledger_account = dictionary.get("ledgerAccount") if "ledgerAccount" in dictionary.keys() else APIHelper.SKIP
        reminder = dictionary.get("reminder") if "reminder" in dictionary.keys() else APIHelper.SKIP
        is_edi_receiver = dictionary.get("isEDIReceiver") if "isEDIReceiver" in dictionary.keys() else APIHelper.SKIP
        print_schedule = dictionary.get("printSchedule") if "printSchedule" in dictionary.keys() else APIHelper.SKIP
        mprint = dictionary.get("print") if "print" in dictionary.keys() else APIHelper.SKIP
        print_positive = dictionary.get("printPositive") if "printPositive" in dictionary.keys() else APIHelper.SKIP
        reminder_date = dictionary.get("reminderDate") if dictionary.get("reminderDate") else APIHelper.SKIP
        days_return = dictionary.get("daysReturn") if dictionary.get("daysReturn") else APIHelper.SKIP
        print_invoice = dictionary.get("printInvoice") if dictionary.get("printInvoice") else APIHelper.SKIP
        group = dictionary.get("group") if dictionary.get("group") else APIHelper.SKIP
        account_number = dictionary.get("accountNumber") if dictionary.get("accountNumber") else APIHelper.SKIP
        crediting_account = dictionary.get("creditingAccount") if dictionary.get("creditingAccount") else APIHelper.SKIP
        debiting_account = dictionary.get("debitingAccount") if dictionary.get("debitingAccount") else APIHelper.SKIP
        skip_statistic = dictionary.get("skipStatistic") if "skipStatistic" in dictionary.keys() else APIHelper.SKIP
        ledger_account_sales_tax_id = dictionary.get("ledgerAccountSalesTaxId") if dictionary.get("ledgerAccountSalesTaxId") else APIHelper.SKIP
        account_table = dictionary.get("accountTable") if dictionary.get("accountTable") else APIHelper.SKIP
        crediting_booking = dictionary.get("creditingBooking") if "creditingBooking" in dictionary.keys() else APIHelper.SKIP
        auto_print_special_invoice = dictionary.get("autoPrintSpecialInvoice") if "autoPrintSpecialInvoice" in dictionary.keys() else APIHelper.SKIP
        lock_booking = dictionary.get("lockBooking") if "lockBooking" in dictionary.keys() else APIHelper.SKIP
        is_transshipment_point = dictionary.get("isTransshipmentPoint") if "isTransshipmentPoint" in dictionary.keys() else APIHelper.SKIP
        compensation_units_account_from = dictionary.get("compensationUnitsAccountFrom") if dictionary.get("compensationUnitsAccountFrom") else APIHelper.SKIP
        compensation_units_account_to = dictionary.get("compensationUnitsAccountTo") if dictionary.get("compensationUnitsAccountTo") else APIHelper.SKIP
        # Return an object of this model
        return cls(ledger_account,
                   reminder,
                   is_edi_receiver,
                   print_schedule,
                   mprint,
                   print_positive,
                   reminder_date,
                   days_return,
                   print_invoice,
                   group,
                   account_number,
                   crediting_account,
                   debiting_account,
                   skip_statistic,
                   ledger_account_sales_tax_id,
                   account_table,
                   crediting_booking,
                   auto_print_special_invoice,
                   lock_booking,
                   is_transshipment_point,
                   compensation_units_account_from,
                   compensation_units_account_to)
