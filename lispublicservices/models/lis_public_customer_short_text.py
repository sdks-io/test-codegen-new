# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerShortText(object):

    """Implementation of the 'LISPublicCustomerShortText' model.

    The LISCustomerShortText data contract.

    Attributes:
        customer_id (int): Gets or sets CustomerId.
        section (SectionEnum): Gets or sets Section.
        function (FunctionEnum): Gets or sets Function.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.
        description (string): Gets or sets Description.
        number (int): Gets or sets Number.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "section": 'section',
        "function": 'function',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "description": 'description',
        "number": 'number'
    }

    _optionals = [
        'customer_id',
        'section',
        'function',
        'changed_on',
        'changed_by',
        'description',
        'number',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 section=APIHelper.SKIP,
                 function=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 number=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerShortText class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if section is not APIHelper.SKIP:
            self.section = section 
        if function is not APIHelper.SKIP:
            self.function = function 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if description is not APIHelper.SKIP:
            self.description = description 
        if number is not APIHelper.SKIP:
            self.number = number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        section = dictionary.get("section") if dictionary.get("section") else APIHelper.SKIP
        function = dictionary.get("function") if dictionary.get("function") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        number = dictionary.get("number") if dictionary.get("number") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   section,
                   function,
                   changed_on,
                   changed_by,
                   description,
                   number)
