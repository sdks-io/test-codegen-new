# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_customer_account_manager_scope import LISPublicCustomerAccountManagerScope
from lispublicservices.models.lis_public_customer_accounting_scope import LISPublicCustomerAccountingScope
from lispublicservices.models.lis_public_customer_additional_addresses_scope import LISPublicCustomerAdditionalAddressesScope
from lispublicservices.models.lis_public_customer_additional_info_scope import LISPublicCustomerAdditionalInfoScope
from lispublicservices.models.lis_public_customer_address import LISPublicCustomerAddress
from lispublicservices.models.lis_public_customer_addressable_print_scope import LISPublicCustomerAddressablePrintScope
from lispublicservices.models.lis_public_customer_calculation_basis_scope import LISPublicCustomerCalculationBasisScope
from lispublicservices.models.lis_public_customer_calculation_scope import LISPublicCustomerCalculationScope
from lispublicservices.models.lis_public_customer_contact_person_scope import LISPublicCustomerContactPersonScope
from lispublicservices.models.lis_public_customer_contact_scope import LISPublicCustomerContactScope
from lispublicservices.models.lis_public_customer_criterion_scope import LISPublicCustomerCriterionScope
from lispublicservices.models.lis_public_customer_customs_scope import LISPublicCustomerCustomsScope
from lispublicservices.models.lis_public_customer_disposition_scope import LISPublicCustomerDispositionScope
from lispublicservices.models.lis_public_customer_edi_scope import LISPublicCustomerEDIScope
from lispublicservices.models.lis_public_customer_extended_fields_scope import LISPublicCustomerExtendedFieldsScope
from lispublicservices.models.lis_public_customer_group_booking_scope import LISPublicCustomerGroupBookingScope
from lispublicservices.models.lis_public_customer_hazardous_goods_scope import LISPublicCustomerHazardousGoodsScope
from lispublicservices.models.lis_public_customer_identification_scope import LISPublicCustomerIdentificationScope
from lispublicservices.models.lis_public_customer_invoicing_scope import LISPublicCustomerInvoicingScope
from lispublicservices.models.lis_public_customer_loading_devices_scope import LISPublicCustomerLoadingDevicesScope
from lispublicservices.models.lis_public_customer_loading_point_scope import LISPublicCustomerLoadingPointScope
from lispublicservices.models.lis_public_customer_logistic_provider_network_scope import LISPublicCustomerLogisticProviderNetworkScope
from lispublicservices.models.lis_public_customer_mdm_scope import LISPublicCustomerMDMScope
from lispublicservices.models.lis_public_customer_outdated_fields_scope import LISPublicCustomerOutdatedFieldsScope
from lispublicservices.models.lis_public_customer_shipment_scope import LISPublicCustomerShipmentScope
from lispublicservices.models.lis_public_customer_slip_fees_scope import LISPublicCustomerSlipFeesScope
from lispublicservices.models.lis_public_customer_text_scope import LISPublicCustomerTextScope
from lispublicservices.models.lis_public_customer_time_scope import LISPublicCustomerTimeScope
from lispublicservices.models.lis_public_customer_voucher_printing_scope import LISPublicCustomerVoucherPrintingScope


class LISPublicCustomer(object):

    """Implementation of the 'LISPublicCustomer' model.

    Represents a customer.

    Attributes:
        contact_person_scope (LISPublicCustomerContactPersonScope): The
            LISCustomerContactPersonScope data contract.
        shipment_scope (LISPublicCustomerShipmentScope): The
            LISCustomerShipmentScope data contract.
        accounting_scope (LISPublicCustomerAccountingScope): The
            LISCustomerAccountingScope data contract.
        text_scope (LISPublicCustomerTextScope): The LISCustomerTextScope data
            contract.
        loading_point_scope (LISPublicCustomerLoadingPointScope): The
            LISCustomerLoadingPointScope data contract.
        time_scope (LISPublicCustomerTimeScope): The LISCustomerTimeScope data
            contract.
        contact_scope (LISPublicCustomerContactScope): The
            LISCustomerContactScope data contract.
        additional_addresses_scope
            (LISPublicCustomerAdditionalAddressesScope): The
            LISCustomerAdditionalAddressesScope data contract.
        calculation_scope (LISPublicCustomerCalculationScope): The
            LISCustomerCalculationScope data contract.
        invoicing_scope (LISPublicCustomerInvoicingScope): The
            LISCustomerInvoicingScope data contract.
        voucher_printing_scope (LISPublicCustomerVoucherPrintingScope): The
            LISCustomerVoucherPrintingScope data contract.
        additional_info_scope (LISPublicCustomerAdditionalInfoScope): The
            LISCustomerAdditionalInfoScope data contract.
        edi_scope (LISPublicCustomerEDIScope): The LISCustomerEDIScope data
            contract.
        disposition_scope (LISPublicCustomerDispositionScope): The
            LISCustomerDispositionScope data contract.
        customs_scope (LISPublicCustomerCustomsScope): The
            LISCustomerCustomsScope data contract.
        criterion_scope (LISPublicCustomerCriterionScope): The
            LISCustomerCriterionScope data contract.
        loading_devices_scope (LISPublicCustomerLoadingDevicesScope): The
            LISCustomerLoadingDevicesScope data contract.
        group_booking_scope (LISPublicCustomerGroupBookingScope): The
            LISCustomerGroupBookingScope data contract.
        calculation_basis_scope (LISPublicCustomerCalculationBasisScope): The
            LISCustomerCalculationBasisScope data contract.
        account_manager_scope (LISPublicCustomerAccountManagerScope): The
            LISCustomerAccountManagerScope data contract.
        outdated_fields_scope (LISPublicCustomerOutdatedFieldsScope): The
            LISCustomerOutdatedFieldsScope data contract.
        extended_fields_scope (LISPublicCustomerExtendedFieldsScope):
            LISCustomerExtendedFieldsScope data contract.
        hazardous_goods_scope (LISPublicCustomerHazardousGoodsScope):
            LISCustomerHazardousGoodsScope
        addressable_print_scope (LISPublicCustomerAddressablePrintScope): The
            LISCustomerAddressablePrintScope data contract.
        slip_fees_scope (LISPublicCustomerSlipFeesScope): The
            LISCustomerSlipFeesScope data contract.
        identification_scope (LISPublicCustomerIdentificationScope): The
            LISCustomerIdentificationScope data contract.
        logistic_provider_network_scope
            (LISPublicCustomerLogisticProviderNetworkScope): The
            LISCustomerSystemTrafficScope data contract.
        mdm_scope (LISPublicCustomerMDMScope): The LISCustomerMDMScope data
            contract.
        customer_id (int): Gets or sets the customer id.
        created_by (string): Gets or sets the date the item was created.
        created_on (datetime): Gets or sets the name of the user that created
            this item.
        changed_by (string): Gets or sets the name of the user that made the
            last change to this item.
        changed_on (datetime): Gets or sets the date of the last change to
            this item.
        customer_short (string): Gets or sets the customer short.
        name_1 (string): Gets or sets the name1.
        name_2 (string): Gets or sets the name2.
        name_3 (string): Gets or sets the name3.
        customer_type (CustomerTypeEnum): Gets or sets the type of the
            customer.
        address (LISPublicCustomerAddress): Represents a customer address.
        extended_address_id (string): Gets or sets the extended address id.
        blocked_from_date (datetime): Gets or sets the blocked from date.
        mdm_debit_state (MdmDebitStateEnum): Gets or sets the state of the MDM
            debit.
        mdm_credit_state (MdmCreditStateEnum): Gets or sets the state of the
            MDM credit.
        is_new (bool): Gets or sets a value indicating whether this entity
            will be inserted or updated.
        original_hash_snapshot (string): Gets or sets the original hash
            snapshot.
        original_snapshot (string): Gets or sets the original snapshot.
        current_snapshot (string): Gets or sets the current snapshot.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contact_person_scope": 'contactPersonScope',
        "shipment_scope": 'shipmentScope',
        "accounting_scope": 'accountingScope',
        "text_scope": 'textScope',
        "loading_point_scope": 'loadingPointScope',
        "time_scope": 'timeScope',
        "contact_scope": 'contactScope',
        "additional_addresses_scope": 'additionalAddressesScope',
        "calculation_scope": 'calculationScope',
        "invoicing_scope": 'invoicingScope',
        "voucher_printing_scope": 'voucherPrintingScope',
        "additional_info_scope": 'additionalInfoScope',
        "edi_scope": 'ediScope',
        "disposition_scope": 'dispositionScope',
        "customs_scope": 'customsScope',
        "criterion_scope": 'criterionScope',
        "loading_devices_scope": 'loadingDevicesScope',
        "group_booking_scope": 'groupBookingScope',
        "calculation_basis_scope": 'calculationBasisScope',
        "account_manager_scope": 'accountManagerScope',
        "outdated_fields_scope": 'outdatedFieldsScope',
        "extended_fields_scope": 'extendedFieldsScope',
        "hazardous_goods_scope": 'hazardousGoodsScope',
        "addressable_print_scope": 'addressablePrintScope',
        "slip_fees_scope": 'slipFeesScope',
        "identification_scope": 'identificationScope',
        "logistic_provider_network_scope": 'logisticProviderNetworkScope',
        "mdm_scope": 'mdmScope',
        "customer_id": 'customerId',
        "created_by": 'createdBy',
        "created_on": 'createdOn',
        "changed_by": 'changedBy',
        "changed_on": 'changedOn',
        "customer_short": 'customerShort',
        "name_1": 'name1',
        "name_2": 'name2',
        "name_3": 'name3',
        "customer_type": 'customerType',
        "address": 'address',
        "extended_address_id": 'extendedAddressId',
        "blocked_from_date": 'blockedFromDate',
        "mdm_debit_state": 'mdmDebitState',
        "mdm_credit_state": 'mdmCreditState',
        "is_new": 'isNew',
        "original_hash_snapshot": 'originalHashSnapshot',
        "original_snapshot": 'originalSnapshot',
        "current_snapshot": 'currentSnapshot'
    }

    _optionals = [
        'contact_person_scope',
        'shipment_scope',
        'accounting_scope',
        'text_scope',
        'loading_point_scope',
        'time_scope',
        'contact_scope',
        'additional_addresses_scope',
        'calculation_scope',
        'invoicing_scope',
        'voucher_printing_scope',
        'additional_info_scope',
        'edi_scope',
        'disposition_scope',
        'customs_scope',
        'criterion_scope',
        'loading_devices_scope',
        'group_booking_scope',
        'calculation_basis_scope',
        'account_manager_scope',
        'outdated_fields_scope',
        'extended_fields_scope',
        'hazardous_goods_scope',
        'addressable_print_scope',
        'slip_fees_scope',
        'identification_scope',
        'logistic_provider_network_scope',
        'mdm_scope',
        'customer_id',
        'created_by',
        'created_on',
        'changed_by',
        'changed_on',
        'customer_short',
        'name_1',
        'name_2',
        'name_3',
        'customer_type',
        'address',
        'extended_address_id',
        'blocked_from_date',
        'mdm_debit_state',
        'mdm_credit_state',
        'is_new',
        'original_hash_snapshot',
        'original_snapshot',
        'current_snapshot',
    ]

    def __init__(self,
                 contact_person_scope=APIHelper.SKIP,
                 shipment_scope=APIHelper.SKIP,
                 accounting_scope=APIHelper.SKIP,
                 text_scope=APIHelper.SKIP,
                 loading_point_scope=APIHelper.SKIP,
                 time_scope=APIHelper.SKIP,
                 contact_scope=APIHelper.SKIP,
                 additional_addresses_scope=APIHelper.SKIP,
                 calculation_scope=APIHelper.SKIP,
                 invoicing_scope=APIHelper.SKIP,
                 voucher_printing_scope=APIHelper.SKIP,
                 additional_info_scope=APIHelper.SKIP,
                 edi_scope=APIHelper.SKIP,
                 disposition_scope=APIHelper.SKIP,
                 customs_scope=APIHelper.SKIP,
                 criterion_scope=APIHelper.SKIP,
                 loading_devices_scope=APIHelper.SKIP,
                 group_booking_scope=APIHelper.SKIP,
                 calculation_basis_scope=APIHelper.SKIP,
                 account_manager_scope=APIHelper.SKIP,
                 outdated_fields_scope=APIHelper.SKIP,
                 extended_fields_scope=APIHelper.SKIP,
                 hazardous_goods_scope=APIHelper.SKIP,
                 addressable_print_scope=APIHelper.SKIP,
                 slip_fees_scope=APIHelper.SKIP,
                 identification_scope=APIHelper.SKIP,
                 logistic_provider_network_scope=APIHelper.SKIP,
                 mdm_scope=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 customer_short=APIHelper.SKIP,
                 name_1=APIHelper.SKIP,
                 name_2=APIHelper.SKIP,
                 name_3=APIHelper.SKIP,
                 customer_type=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 extended_address_id=APIHelper.SKIP,
                 blocked_from_date=APIHelper.SKIP,
                 mdm_debit_state=APIHelper.SKIP,
                 mdm_credit_state=APIHelper.SKIP,
                 is_new=APIHelper.SKIP,
                 original_hash_snapshot=APIHelper.SKIP,
                 original_snapshot=APIHelper.SKIP,
                 current_snapshot=APIHelper.SKIP):
        """Constructor for the LISPublicCustomer class"""

        # Initialize members of the class
        if contact_person_scope is not APIHelper.SKIP:
            self.contact_person_scope = contact_person_scope 
        if shipment_scope is not APIHelper.SKIP:
            self.shipment_scope = shipment_scope 
        if accounting_scope is not APIHelper.SKIP:
            self.accounting_scope = accounting_scope 
        if text_scope is not APIHelper.SKIP:
            self.text_scope = text_scope 
        if loading_point_scope is not APIHelper.SKIP:
            self.loading_point_scope = loading_point_scope 
        if time_scope is not APIHelper.SKIP:
            self.time_scope = time_scope 
        if contact_scope is not APIHelper.SKIP:
            self.contact_scope = contact_scope 
        if additional_addresses_scope is not APIHelper.SKIP:
            self.additional_addresses_scope = additional_addresses_scope 
        if calculation_scope is not APIHelper.SKIP:
            self.calculation_scope = calculation_scope 
        if invoicing_scope is not APIHelper.SKIP:
            self.invoicing_scope = invoicing_scope 
        if voucher_printing_scope is not APIHelper.SKIP:
            self.voucher_printing_scope = voucher_printing_scope 
        if additional_info_scope is not APIHelper.SKIP:
            self.additional_info_scope = additional_info_scope 
        if edi_scope is not APIHelper.SKIP:
            self.edi_scope = edi_scope 
        if disposition_scope is not APIHelper.SKIP:
            self.disposition_scope = disposition_scope 
        if customs_scope is not APIHelper.SKIP:
            self.customs_scope = customs_scope 
        if criterion_scope is not APIHelper.SKIP:
            self.criterion_scope = criterion_scope 
        if loading_devices_scope is not APIHelper.SKIP:
            self.loading_devices_scope = loading_devices_scope 
        if group_booking_scope is not APIHelper.SKIP:
            self.group_booking_scope = group_booking_scope 
        if calculation_basis_scope is not APIHelper.SKIP:
            self.calculation_basis_scope = calculation_basis_scope 
        if account_manager_scope is not APIHelper.SKIP:
            self.account_manager_scope = account_manager_scope 
        if outdated_fields_scope is not APIHelper.SKIP:
            self.outdated_fields_scope = outdated_fields_scope 
        if extended_fields_scope is not APIHelper.SKIP:
            self.extended_fields_scope = extended_fields_scope 
        if hazardous_goods_scope is not APIHelper.SKIP:
            self.hazardous_goods_scope = hazardous_goods_scope 
        if addressable_print_scope is not APIHelper.SKIP:
            self.addressable_print_scope = addressable_print_scope 
        if slip_fees_scope is not APIHelper.SKIP:
            self.slip_fees_scope = slip_fees_scope 
        if identification_scope is not APIHelper.SKIP:
            self.identification_scope = identification_scope 
        if logistic_provider_network_scope is not APIHelper.SKIP:
            self.logistic_provider_network_scope = logistic_provider_network_scope 
        if mdm_scope is not APIHelper.SKIP:
            self.mdm_scope = mdm_scope 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if customer_short is not APIHelper.SKIP:
            self.customer_short = customer_short 
        if name_1 is not APIHelper.SKIP:
            self.name_1 = name_1 
        if name_2 is not APIHelper.SKIP:
            self.name_2 = name_2 
        if name_3 is not APIHelper.SKIP:
            self.name_3 = name_3 
        if customer_type is not APIHelper.SKIP:
            self.customer_type = customer_type 
        if address is not APIHelper.SKIP:
            self.address = address 
        if extended_address_id is not APIHelper.SKIP:
            self.extended_address_id = extended_address_id 
        if blocked_from_date is not APIHelper.SKIP:
            self.blocked_from_date = APIHelper.RFC3339DateTime(blocked_from_date) if blocked_from_date else None 
        if mdm_debit_state is not APIHelper.SKIP:
            self.mdm_debit_state = mdm_debit_state 
        if mdm_credit_state is not APIHelper.SKIP:
            self.mdm_credit_state = mdm_credit_state 
        if is_new is not APIHelper.SKIP:
            self.is_new = is_new 
        if original_hash_snapshot is not APIHelper.SKIP:
            self.original_hash_snapshot = original_hash_snapshot 
        if original_snapshot is not APIHelper.SKIP:
            self.original_snapshot = original_snapshot 
        if current_snapshot is not APIHelper.SKIP:
            self.current_snapshot = current_snapshot 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        contact_person_scope = LISPublicCustomerContactPersonScope.from_dictionary(dictionary.get('contactPersonScope')) if 'contactPersonScope' in dictionary.keys() else APIHelper.SKIP
        shipment_scope = LISPublicCustomerShipmentScope.from_dictionary(dictionary.get('shipmentScope')) if 'shipmentScope' in dictionary.keys() else APIHelper.SKIP
        accounting_scope = LISPublicCustomerAccountingScope.from_dictionary(dictionary.get('accountingScope')) if 'accountingScope' in dictionary.keys() else APIHelper.SKIP
        text_scope = LISPublicCustomerTextScope.from_dictionary(dictionary.get('textScope')) if 'textScope' in dictionary.keys() else APIHelper.SKIP
        loading_point_scope = LISPublicCustomerLoadingPointScope.from_dictionary(dictionary.get('loadingPointScope')) if 'loadingPointScope' in dictionary.keys() else APIHelper.SKIP
        time_scope = LISPublicCustomerTimeScope.from_dictionary(dictionary.get('timeScope')) if 'timeScope' in dictionary.keys() else APIHelper.SKIP
        contact_scope = LISPublicCustomerContactScope.from_dictionary(dictionary.get('contactScope')) if 'contactScope' in dictionary.keys() else APIHelper.SKIP
        additional_addresses_scope = LISPublicCustomerAdditionalAddressesScope.from_dictionary(dictionary.get('additionalAddressesScope')) if 'additionalAddressesScope' in dictionary.keys() else APIHelper.SKIP
        calculation_scope = LISPublicCustomerCalculationScope.from_dictionary(dictionary.get('calculationScope')) if 'calculationScope' in dictionary.keys() else APIHelper.SKIP
        invoicing_scope = LISPublicCustomerInvoicingScope.from_dictionary(dictionary.get('invoicingScope')) if 'invoicingScope' in dictionary.keys() else APIHelper.SKIP
        voucher_printing_scope = LISPublicCustomerVoucherPrintingScope.from_dictionary(dictionary.get('voucherPrintingScope')) if 'voucherPrintingScope' in dictionary.keys() else APIHelper.SKIP
        additional_info_scope = LISPublicCustomerAdditionalInfoScope.from_dictionary(dictionary.get('additionalInfoScope')) if 'additionalInfoScope' in dictionary.keys() else APIHelper.SKIP
        edi_scope = LISPublicCustomerEDIScope.from_dictionary(dictionary.get('ediScope')) if 'ediScope' in dictionary.keys() else APIHelper.SKIP
        disposition_scope = LISPublicCustomerDispositionScope.from_dictionary(dictionary.get('dispositionScope')) if 'dispositionScope' in dictionary.keys() else APIHelper.SKIP
        customs_scope = LISPublicCustomerCustomsScope.from_dictionary(dictionary.get('customsScope')) if 'customsScope' in dictionary.keys() else APIHelper.SKIP
        criterion_scope = LISPublicCustomerCriterionScope.from_dictionary(dictionary.get('criterionScope')) if 'criterionScope' in dictionary.keys() else APIHelper.SKIP
        loading_devices_scope = LISPublicCustomerLoadingDevicesScope.from_dictionary(dictionary.get('loadingDevicesScope')) if 'loadingDevicesScope' in dictionary.keys() else APIHelper.SKIP
        group_booking_scope = LISPublicCustomerGroupBookingScope.from_dictionary(dictionary.get('groupBookingScope')) if 'groupBookingScope' in dictionary.keys() else APIHelper.SKIP
        calculation_basis_scope = LISPublicCustomerCalculationBasisScope.from_dictionary(dictionary.get('calculationBasisScope')) if 'calculationBasisScope' in dictionary.keys() else APIHelper.SKIP
        account_manager_scope = LISPublicCustomerAccountManagerScope.from_dictionary(dictionary.get('accountManagerScope')) if 'accountManagerScope' in dictionary.keys() else APIHelper.SKIP
        outdated_fields_scope = LISPublicCustomerOutdatedFieldsScope.from_dictionary(dictionary.get('outdatedFieldsScope')) if 'outdatedFieldsScope' in dictionary.keys() else APIHelper.SKIP
        extended_fields_scope = LISPublicCustomerExtendedFieldsScope.from_dictionary(dictionary.get('extendedFieldsScope')) if 'extendedFieldsScope' in dictionary.keys() else APIHelper.SKIP
        hazardous_goods_scope = LISPublicCustomerHazardousGoodsScope.from_dictionary(dictionary.get('hazardousGoodsScope')) if 'hazardousGoodsScope' in dictionary.keys() else APIHelper.SKIP
        addressable_print_scope = LISPublicCustomerAddressablePrintScope.from_dictionary(dictionary.get('addressablePrintScope')) if 'addressablePrintScope' in dictionary.keys() else APIHelper.SKIP
        slip_fees_scope = LISPublicCustomerSlipFeesScope.from_dictionary(dictionary.get('slipFeesScope')) if 'slipFeesScope' in dictionary.keys() else APIHelper.SKIP
        identification_scope = LISPublicCustomerIdentificationScope.from_dictionary(dictionary.get('identificationScope')) if 'identificationScope' in dictionary.keys() else APIHelper.SKIP
        logistic_provider_network_scope = LISPublicCustomerLogisticProviderNetworkScope.from_dictionary(dictionary.get('logisticProviderNetworkScope')) if 'logisticProviderNetworkScope' in dictionary.keys() else APIHelper.SKIP
        mdm_scope = LISPublicCustomerMDMScope.from_dictionary(dictionary.get('mdmScope')) if 'mdmScope' in dictionary.keys() else APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        customer_short = dictionary.get("customerShort") if dictionary.get("customerShort") else APIHelper.SKIP
        name_1 = dictionary.get("name1") if dictionary.get("name1") else APIHelper.SKIP
        name_2 = dictionary.get("name2") if dictionary.get("name2") else APIHelper.SKIP
        name_3 = dictionary.get("name3") if dictionary.get("name3") else APIHelper.SKIP
        customer_type = dictionary.get("customerType") if dictionary.get("customerType") else APIHelper.SKIP
        address = LISPublicCustomerAddress.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP
        extended_address_id = dictionary.get("extendedAddressId") if dictionary.get("extendedAddressId") else APIHelper.SKIP
        blocked_from_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("blockedFromDate")).datetime if dictionary.get("blockedFromDate") else APIHelper.SKIP
        mdm_debit_state = dictionary.get("mdmDebitState") if dictionary.get("mdmDebitState") else APIHelper.SKIP
        mdm_credit_state = dictionary.get("mdmCreditState") if dictionary.get("mdmCreditState") else APIHelper.SKIP
        is_new = dictionary.get("isNew") if "isNew" in dictionary.keys() else APIHelper.SKIP
        original_hash_snapshot = dictionary.get("originalHashSnapshot") if dictionary.get("originalHashSnapshot") else APIHelper.SKIP
        original_snapshot = dictionary.get("originalSnapshot") if dictionary.get("originalSnapshot") else APIHelper.SKIP
        current_snapshot = dictionary.get("currentSnapshot") if dictionary.get("currentSnapshot") else APIHelper.SKIP
        # Return an object of this model
        return cls(contact_person_scope,
                   shipment_scope,
                   accounting_scope,
                   text_scope,
                   loading_point_scope,
                   time_scope,
                   contact_scope,
                   additional_addresses_scope,
                   calculation_scope,
                   invoicing_scope,
                   voucher_printing_scope,
                   additional_info_scope,
                   edi_scope,
                   disposition_scope,
                   customs_scope,
                   criterion_scope,
                   loading_devices_scope,
                   group_booking_scope,
                   calculation_basis_scope,
                   account_manager_scope,
                   outdated_fields_scope,
                   extended_fields_scope,
                   hazardous_goods_scope,
                   addressable_print_scope,
                   slip_fees_scope,
                   identification_scope,
                   logistic_provider_network_scope,
                   mdm_scope,
                   customer_id,
                   created_by,
                   created_on,
                   changed_by,
                   changed_on,
                   customer_short,
                   name_1,
                   name_2,
                   name_3,
                   customer_type,
                   address,
                   extended_address_id,
                   blocked_from_date,
                   mdm_debit_state,
                   mdm_credit_state,
                   is_new,
                   original_hash_snapshot,
                   original_snapshot,
                   current_snapshot)
