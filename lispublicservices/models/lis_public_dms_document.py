# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_dms_archiv import LISPublicDMSArchiv
from lispublicservices.models.lis_public_dms_doc_type import LISPublicDMSDocType
from lispublicservices.models.lis_public_dms_document_key_item_value import LISPublicDMSDocumentKeyItemValue
from lispublicservices.models.lis_public_dms_folder import LISPublicDMSFolder


class LISPublicDMSDocument(object):

    """Implementation of the 'LISPublicDMSDocument' model.

    The document in the dms

    Attributes:
        document_data (string): Gets or sets the document data.
        file_extension (string): Gets or sets the file extension.
        filename (string): Gets or sets the filename.
        dms_document_id (int): Gets or sets the DMS document id.
        archiv (LISPublicDMSArchiv): DMS Archiv
        folder (LISPublicDMSFolder): DMS Folder
        doc_type (LISPublicDMSDocType): Customer address data of accounts
        key_item_values (list of LISPublicDMSDocumentKeyItemValue): Gets or
            sets the key item values.
        description (string): Gets or sets the description.
        status (StatusEnum): Gets or sets the status.
        file_type (FileTypeEnum): Gets or sets the type of the file.
        responsible_employee (string): Gets or sets the responsible employee.
        responsible_employee_group (string): Gets or sets the responsible
            employee group.
        created_by (string): Gets or sets the date the item was created.
        created_on (datetime): Gets or sets the name of the user that created
            this item.
        changed_by (string): Gets or sets the name of the user that made the
            last change to this item.
        changed_on (datetime): Gets or sets the date of the last change to
            this item.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "document_data": 'documentData',
        "file_extension": 'fileExtension',
        "filename": 'filename',
        "dms_document_id": 'dmsDocumentId',
        "archiv": 'archiv',
        "folder": 'folder',
        "doc_type": 'docType',
        "key_item_values": 'keyItemValues',
        "description": 'description',
        "status": 'status',
        "file_type": 'fileType',
        "responsible_employee": 'responsibleEmployee',
        "responsible_employee_group": 'responsibleEmployeeGroup',
        "created_by": 'createdBy',
        "created_on": 'createdOn',
        "changed_by": 'changedBy',
        "changed_on": 'changedOn'
    }

    _optionals = [
        'document_data',
        'file_extension',
        'filename',
        'dms_document_id',
        'archiv',
        'folder',
        'doc_type',
        'key_item_values',
        'description',
        'status',
        'file_type',
        'responsible_employee',
        'responsible_employee_group',
        'created_by',
        'created_on',
        'changed_by',
        'changed_on',
    ]

    def __init__(self,
                 document_data=APIHelper.SKIP,
                 file_extension=APIHelper.SKIP,
                 filename=APIHelper.SKIP,
                 dms_document_id=APIHelper.SKIP,
                 archiv=APIHelper.SKIP,
                 folder=APIHelper.SKIP,
                 doc_type=APIHelper.SKIP,
                 key_item_values=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 file_type=APIHelper.SKIP,
                 responsible_employee=APIHelper.SKIP,
                 responsible_employee_group=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP):
        """Constructor for the LISPublicDMSDocument class"""

        # Initialize members of the class
        if document_data is not APIHelper.SKIP:
            self.document_data = document_data 
        if file_extension is not APIHelper.SKIP:
            self.file_extension = file_extension 
        if filename is not APIHelper.SKIP:
            self.filename = filename 
        if dms_document_id is not APIHelper.SKIP:
            self.dms_document_id = dms_document_id 
        if archiv is not APIHelper.SKIP:
            self.archiv = archiv 
        if folder is not APIHelper.SKIP:
            self.folder = folder 
        if doc_type is not APIHelper.SKIP:
            self.doc_type = doc_type 
        if key_item_values is not APIHelper.SKIP:
            self.key_item_values = key_item_values 
        if description is not APIHelper.SKIP:
            self.description = description 
        if status is not APIHelper.SKIP:
            self.status = status 
        if file_type is not APIHelper.SKIP:
            self.file_type = file_type 
        if responsible_employee is not APIHelper.SKIP:
            self.responsible_employee = responsible_employee 
        if responsible_employee_group is not APIHelper.SKIP:
            self.responsible_employee_group = responsible_employee_group 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        document_data = dictionary.get("documentData") if dictionary.get("documentData") else APIHelper.SKIP
        file_extension = dictionary.get("fileExtension") if dictionary.get("fileExtension") else APIHelper.SKIP
        filename = dictionary.get("filename") if dictionary.get("filename") else APIHelper.SKIP
        dms_document_id = dictionary.get("dmsDocumentId") if dictionary.get("dmsDocumentId") else APIHelper.SKIP
        archiv = LISPublicDMSArchiv.from_dictionary(dictionary.get('archiv')) if 'archiv' in dictionary.keys() else APIHelper.SKIP
        folder = LISPublicDMSFolder.from_dictionary(dictionary.get('folder')) if 'folder' in dictionary.keys() else APIHelper.SKIP
        doc_type = LISPublicDMSDocType.from_dictionary(dictionary.get('docType')) if 'docType' in dictionary.keys() else APIHelper.SKIP
        key_item_values = None
        if dictionary.get('keyItemValues') is not None:
            key_item_values = [LISPublicDMSDocumentKeyItemValue.from_dictionary(x) for x in dictionary.get('keyItemValues')]
        else:
            key_item_values = APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        file_type = dictionary.get("fileType") if dictionary.get("fileType") else APIHelper.SKIP
        responsible_employee = dictionary.get("responsibleEmployee") if dictionary.get("responsibleEmployee") else APIHelper.SKIP
        responsible_employee_group = dictionary.get("responsibleEmployeeGroup") if dictionary.get("responsibleEmployeeGroup") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        # Return an object of this model
        return cls(document_data,
                   file_extension,
                   filename,
                   dms_document_id,
                   archiv,
                   folder,
                   doc_type,
                   key_item_values,
                   description,
                   status,
                   file_type,
                   responsible_employee,
                   responsible_employee_group,
                   created_by,
                   created_on,
                   changed_by,
                   changed_on)
