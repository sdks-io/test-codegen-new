# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicOrderTour(object):

    """Implementation of the 'LISPublicOrderTour' model.

    A base class for all order data contracts.

    Attributes:
        tour_id (int): The internal number of the Tour  DB:TourIntNr
        tour_no (int): The number of the Tour  DB:TourNr
        state (State2Enum): The state of the tour  DB:Status
        lorry_id (string): Gets or sets the lorry.  DB: #*Tour.KfzZugId
        trailer_id (string): Gets or sets the trailer.  DB: #*Tour.KfzAnhId
        swap_body_1 (string): Gets or sets the swap body1. 
            DB:#*Tour.WBruecke1
        swap_body_2 (string): Gets or sets the swap body2. 
            DB:#*Tour.WBruecke2
        lorry_license_plate (string): Gets or sets the lorry license plate. 
            DB:#*Tour.KfzPolKz
        trailer_license_plate (string): Gets or sets the trailer license
            plate.  DB:#*Tour.AnhPolKz
        driver_id (int): The dirver of the tour  DB: #*Tour.FahId
        co_driver_id (int): The co dirver of the tour  DB: #*Tour.BFahId
        lorry_group_id (string): Gets or sets the lorry group identifier.
        permit_id (string): Gets or sets the permit identifier.
        carrier_id (int): Gets or sets the carrier identifier.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tour_id": 'tourId',
        "tour_no": 'tourNo',
        "state": 'state',
        "lorry_id": 'lorryId',
        "trailer_id": 'trailerId',
        "swap_body_1": 'swapBody1',
        "swap_body_2": 'swapBody2',
        "lorry_license_plate": 'lorryLicensePlate',
        "trailer_license_plate": 'trailerLicensePlate',
        "driver_id": 'driverId',
        "co_driver_id": 'coDriverId',
        "lorry_group_id": 'lorryGroupId',
        "permit_id": 'permitId',
        "carrier_id": 'carrierId'
    }

    _optionals = [
        'tour_id',
        'tour_no',
        'state',
        'lorry_id',
        'trailer_id',
        'swap_body_1',
        'swap_body_2',
        'lorry_license_plate',
        'trailer_license_plate',
        'driver_id',
        'co_driver_id',
        'lorry_group_id',
        'permit_id',
        'carrier_id',
    ]

    def __init__(self,
                 tour_id=APIHelper.SKIP,
                 tour_no=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 lorry_id=APIHelper.SKIP,
                 trailer_id=APIHelper.SKIP,
                 swap_body_1=APIHelper.SKIP,
                 swap_body_2=APIHelper.SKIP,
                 lorry_license_plate=APIHelper.SKIP,
                 trailer_license_plate=APIHelper.SKIP,
                 driver_id=APIHelper.SKIP,
                 co_driver_id=APIHelper.SKIP,
                 lorry_group_id=APIHelper.SKIP,
                 permit_id=APIHelper.SKIP,
                 carrier_id=APIHelper.SKIP):
        """Constructor for the LISPublicOrderTour class"""

        # Initialize members of the class
        if tour_id is not APIHelper.SKIP:
            self.tour_id = tour_id 
        if tour_no is not APIHelper.SKIP:
            self.tour_no = tour_no 
        if state is not APIHelper.SKIP:
            self.state = state 
        if lorry_id is not APIHelper.SKIP:
            self.lorry_id = lorry_id 
        if trailer_id is not APIHelper.SKIP:
            self.trailer_id = trailer_id 
        if swap_body_1 is not APIHelper.SKIP:
            self.swap_body_1 = swap_body_1 
        if swap_body_2 is not APIHelper.SKIP:
            self.swap_body_2 = swap_body_2 
        if lorry_license_plate is not APIHelper.SKIP:
            self.lorry_license_plate = lorry_license_plate 
        if trailer_license_plate is not APIHelper.SKIP:
            self.trailer_license_plate = trailer_license_plate 
        if driver_id is not APIHelper.SKIP:
            self.driver_id = driver_id 
        if co_driver_id is not APIHelper.SKIP:
            self.co_driver_id = co_driver_id 
        if lorry_group_id is not APIHelper.SKIP:
            self.lorry_group_id = lorry_group_id 
        if permit_id is not APIHelper.SKIP:
            self.permit_id = permit_id 
        if carrier_id is not APIHelper.SKIP:
            self.carrier_id = carrier_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        tour_id = dictionary.get("tourId") if dictionary.get("tourId") else APIHelper.SKIP
        tour_no = dictionary.get("tourNo") if dictionary.get("tourNo") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        lorry_id = dictionary.get("lorryId") if dictionary.get("lorryId") else APIHelper.SKIP
        trailer_id = dictionary.get("trailerId") if dictionary.get("trailerId") else APIHelper.SKIP
        swap_body_1 = dictionary.get("swapBody1") if dictionary.get("swapBody1") else APIHelper.SKIP
        swap_body_2 = dictionary.get("swapBody2") if dictionary.get("swapBody2") else APIHelper.SKIP
        lorry_license_plate = dictionary.get("lorryLicensePlate") if dictionary.get("lorryLicensePlate") else APIHelper.SKIP
        trailer_license_plate = dictionary.get("trailerLicensePlate") if dictionary.get("trailerLicensePlate") else APIHelper.SKIP
        driver_id = dictionary.get("driverId") if dictionary.get("driverId") else APIHelper.SKIP
        co_driver_id = dictionary.get("coDriverId") if dictionary.get("coDriverId") else APIHelper.SKIP
        lorry_group_id = dictionary.get("lorryGroupId") if dictionary.get("lorryGroupId") else APIHelper.SKIP
        permit_id = dictionary.get("permitId") if dictionary.get("permitId") else APIHelper.SKIP
        carrier_id = dictionary.get("carrierId") if dictionary.get("carrierId") else APIHelper.SKIP
        # Return an object of this model
        return cls(tour_id,
                   tour_no,
                   state,
                   lorry_id,
                   trailer_id,
                   swap_body_1,
                   swap_body_2,
                   lorry_license_plate,
                   trailer_license_plate,
                   driver_id,
                   co_driver_id,
                   lorry_group_id,
                   permit_id,
                   carrier_id)
