# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_language_item import LISPublicLanguageItem


class LISPublicLanguageItemContainer(object):

    """Implementation of the 'LISPublicLanguageItemContainer' model.

    TODO: type model description here.

    Attributes:
        language_items (list of LISPublicLanguageItem): Gets or sets the
            language items.
        default_text (string): Gets or sets the default text.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "language_items": 'languageItems',
        "default_text": 'defaultText'
    }

    _optionals = [
        'language_items',
        'default_text',
    ]

    def __init__(self,
                 language_items=APIHelper.SKIP,
                 default_text=APIHelper.SKIP):
        """Constructor for the LISPublicLanguageItemContainer class"""

        # Initialize members of the class
        if language_items is not APIHelper.SKIP:
            self.language_items = language_items 
        if default_text is not APIHelper.SKIP:
            self.default_text = default_text 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        language_items = None
        if dictionary.get('languageItems') is not None:
            language_items = [LISPublicLanguageItem.from_dictionary(x) for x in dictionary.get('languageItems')]
        else:
            language_items = APIHelper.SKIP
        default_text = dictionary.get("defaultText") if dictionary.get("defaultText") else APIHelper.SKIP
        # Return an object of this model
        return cls(language_items,
                   default_text)
