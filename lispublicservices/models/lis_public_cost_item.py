# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_cost_surcharge_item import LISPublicCostSurchargeItem


class LISPublicCostItem(object):

    """Implementation of the 'LISPublicCostItem' model.

    The public cost item

    Attributes:
        value (float): Gets or sets the Value.
        amount (float): Gets or sets the Amount.
        currency (string): Gets or sets the currency.
        sales_tax_code (string): Gets or sets the sales tax code.
        cost_per (CostPerEnum): Gets or sets the cost per.
        charge_id (int): Gets or sets the charge id.
        surcharge (LISPublicCostSurchargeItem): The surcharge for costs

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "value": 'value',
        "amount": 'amount',
        "currency": 'currency',
        "sales_tax_code": 'salesTaxCode',
        "cost_per": 'costPer',
        "charge_id": 'chargeId',
        "surcharge": 'surcharge'
    }

    _optionals = [
        'value',
        'amount',
        'currency',
        'sales_tax_code',
        'cost_per',
        'charge_id',
        'surcharge',
    ]

    def __init__(self,
                 value=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 sales_tax_code=APIHelper.SKIP,
                 cost_per=APIHelper.SKIP,
                 charge_id=APIHelper.SKIP,
                 surcharge=APIHelper.SKIP):
        """Constructor for the LISPublicCostItem class"""

        # Initialize members of the class
        if value is not APIHelper.SKIP:
            self.value = value 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if sales_tax_code is not APIHelper.SKIP:
            self.sales_tax_code = sales_tax_code 
        if cost_per is not APIHelper.SKIP:
            self.cost_per = cost_per 
        if charge_id is not APIHelper.SKIP:
            self.charge_id = charge_id 
        if surcharge is not APIHelper.SKIP:
            self.surcharge = surcharge 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        amount = dictionary.get("amount") if dictionary.get("amount") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        sales_tax_code = dictionary.get("salesTaxCode") if dictionary.get("salesTaxCode") else APIHelper.SKIP
        cost_per = dictionary.get("costPer") if dictionary.get("costPer") else APIHelper.SKIP
        charge_id = dictionary.get("chargeId") if dictionary.get("chargeId") else APIHelper.SKIP
        surcharge = LISPublicCostSurchargeItem.from_dictionary(dictionary.get('surcharge')) if 'surcharge' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(value,
                   amount,
                   currency,
                   sales_tax_code,
                   cost_per,
                   charge_id,
                   surcharge)
