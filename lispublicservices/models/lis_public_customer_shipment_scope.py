# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_customer_blocked_date import LISPublicCustomerBlockedDate


class LISPublicCustomerShipmentScope(object):

    """Implementation of the 'LISPublicCustomerShipmentScope' model.

    The LISCustomerShipmentScope data contract.

    Attributes:
        traffic_mode_id (string): Gets or sets TrafficModeId.
        log_model_id (int): Gets or sets LogModelId.
        sales_tax_id (string): Gets or sets SalesTaxId.
        currency_id (string): Gets or sets CurrencyId.
        freight_term_id (string): Gets or sets FreightTermId.
        article_id (string): Gets or sets ArticleId.
        is_reference_number_required (bool): Gets or sets
            IsReferenceNumberRequired.
        blocked_from_date (datetime): Gets or sets BlockedFromDate.
        transportation_route_id (int): Gets or sets TransportationRouteId.
        order_sender_id (int): Gets or sets OrderSenderId.
        order_recipient_id (int): Gets or sets OrderRecipientId.
        order_freight_payer_id (int): Gets or sets OrderFreightPayerId.
        order_carrier_id (int): Gets or sets OrderCarrierId.
        division_id (int): Gets or sets DivisionId.
        department_id (int): Gets or sets DepartmentId.
        blocked_dates (list of LISPublicCustomerBlockedDate): Gets or sets
            BlockedDates.
        track_changes (bool): Gets or sets TrackChanges.
        has_changes (bool): Gets or sets HasChanges.
        loading_empty (bool): Gets or sets a value indicating whether [loading
            empty].
        unloading_empty (bool): Gets or sets a value indicating whether
            [unloading empty].
        unlock_date (datetime): Gets or sets the unlock date.
        lock_reason (string): Gets or sets the lock reason.
        unlock_reason (string): Gets or sets the unlock reason.
        lock_status (LockStatusEnum): Gets or sets the lock status.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "traffic_mode_id": 'trafficModeId',
        "log_model_id": 'logModelId',
        "sales_tax_id": 'salesTaxId',
        "currency_id": 'currencyId',
        "freight_term_id": 'freightTermId',
        "article_id": 'articleId',
        "is_reference_number_required": 'isReferenceNumberRequired',
        "blocked_from_date": 'blockedFromDate',
        "transportation_route_id": 'transportationRouteId',
        "order_sender_id": 'orderSenderId',
        "order_recipient_id": 'orderRecipientId',
        "order_freight_payer_id": 'orderFreightPayerId',
        "order_carrier_id": 'orderCarrierId',
        "division_id": 'divisionId',
        "department_id": 'departmentId',
        "blocked_dates": 'blockedDates',
        "track_changes": 'trackChanges',
        "has_changes": 'hasChanges',
        "loading_empty": 'loadingEmpty',
        "unloading_empty": 'unloadingEmpty',
        "unlock_date": 'unlockDate',
        "lock_reason": 'lockReason',
        "unlock_reason": 'unlockReason',
        "lock_status": 'lockStatus'
    }

    _optionals = [
        'traffic_mode_id',
        'log_model_id',
        'sales_tax_id',
        'currency_id',
        'freight_term_id',
        'article_id',
        'is_reference_number_required',
        'blocked_from_date',
        'transportation_route_id',
        'order_sender_id',
        'order_recipient_id',
        'order_freight_payer_id',
        'order_carrier_id',
        'division_id',
        'department_id',
        'blocked_dates',
        'track_changes',
        'has_changes',
        'loading_empty',
        'unloading_empty',
        'unlock_date',
        'lock_reason',
        'unlock_reason',
        'lock_status',
    ]

    def __init__(self,
                 traffic_mode_id=APIHelper.SKIP,
                 log_model_id=APIHelper.SKIP,
                 sales_tax_id=APIHelper.SKIP,
                 currency_id=APIHelper.SKIP,
                 freight_term_id=APIHelper.SKIP,
                 article_id=APIHelper.SKIP,
                 is_reference_number_required=APIHelper.SKIP,
                 blocked_from_date=APIHelper.SKIP,
                 transportation_route_id=APIHelper.SKIP,
                 order_sender_id=APIHelper.SKIP,
                 order_recipient_id=APIHelper.SKIP,
                 order_freight_payer_id=APIHelper.SKIP,
                 order_carrier_id=APIHelper.SKIP,
                 division_id=APIHelper.SKIP,
                 department_id=APIHelper.SKIP,
                 blocked_dates=APIHelper.SKIP,
                 track_changes=APIHelper.SKIP,
                 has_changes=APIHelper.SKIP,
                 loading_empty=APIHelper.SKIP,
                 unloading_empty=APIHelper.SKIP,
                 unlock_date=APIHelper.SKIP,
                 lock_reason=APIHelper.SKIP,
                 unlock_reason=APIHelper.SKIP,
                 lock_status=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerShipmentScope class"""

        # Initialize members of the class
        if traffic_mode_id is not APIHelper.SKIP:
            self.traffic_mode_id = traffic_mode_id 
        if log_model_id is not APIHelper.SKIP:
            self.log_model_id = log_model_id 
        if sales_tax_id is not APIHelper.SKIP:
            self.sales_tax_id = sales_tax_id 
        if currency_id is not APIHelper.SKIP:
            self.currency_id = currency_id 
        if freight_term_id is not APIHelper.SKIP:
            self.freight_term_id = freight_term_id 
        if article_id is not APIHelper.SKIP:
            self.article_id = article_id 
        if is_reference_number_required is not APIHelper.SKIP:
            self.is_reference_number_required = is_reference_number_required 
        if blocked_from_date is not APIHelper.SKIP:
            self.blocked_from_date = APIHelper.RFC3339DateTime(blocked_from_date) if blocked_from_date else None 
        if transportation_route_id is not APIHelper.SKIP:
            self.transportation_route_id = transportation_route_id 
        if order_sender_id is not APIHelper.SKIP:
            self.order_sender_id = order_sender_id 
        if order_recipient_id is not APIHelper.SKIP:
            self.order_recipient_id = order_recipient_id 
        if order_freight_payer_id is not APIHelper.SKIP:
            self.order_freight_payer_id = order_freight_payer_id 
        if order_carrier_id is not APIHelper.SKIP:
            self.order_carrier_id = order_carrier_id 
        if division_id is not APIHelper.SKIP:
            self.division_id = division_id 
        if department_id is not APIHelper.SKIP:
            self.department_id = department_id 
        if blocked_dates is not APIHelper.SKIP:
            self.blocked_dates = blocked_dates 
        if track_changes is not APIHelper.SKIP:
            self.track_changes = track_changes 
        if has_changes is not APIHelper.SKIP:
            self.has_changes = has_changes 
        if loading_empty is not APIHelper.SKIP:
            self.loading_empty = loading_empty 
        if unloading_empty is not APIHelper.SKIP:
            self.unloading_empty = unloading_empty 
        if unlock_date is not APIHelper.SKIP:
            self.unlock_date = APIHelper.RFC3339DateTime(unlock_date) if unlock_date else None 
        if lock_reason is not APIHelper.SKIP:
            self.lock_reason = lock_reason 
        if unlock_reason is not APIHelper.SKIP:
            self.unlock_reason = unlock_reason 
        if lock_status is not APIHelper.SKIP:
            self.lock_status = lock_status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        traffic_mode_id = dictionary.get("trafficModeId") if dictionary.get("trafficModeId") else APIHelper.SKIP
        log_model_id = dictionary.get("logModelId") if dictionary.get("logModelId") else APIHelper.SKIP
        sales_tax_id = dictionary.get("salesTaxId") if dictionary.get("salesTaxId") else APIHelper.SKIP
        currency_id = dictionary.get("currencyId") if dictionary.get("currencyId") else APIHelper.SKIP
        freight_term_id = dictionary.get("freightTermId") if dictionary.get("freightTermId") else APIHelper.SKIP
        article_id = dictionary.get("articleId") if dictionary.get("articleId") else APIHelper.SKIP
        is_reference_number_required = dictionary.get("isReferenceNumberRequired") if "isReferenceNumberRequired" in dictionary.keys() else APIHelper.SKIP
        blocked_from_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("blockedFromDate")).datetime if dictionary.get("blockedFromDate") else APIHelper.SKIP
        transportation_route_id = dictionary.get("transportationRouteId") if dictionary.get("transportationRouteId") else APIHelper.SKIP
        order_sender_id = dictionary.get("orderSenderId") if dictionary.get("orderSenderId") else APIHelper.SKIP
        order_recipient_id = dictionary.get("orderRecipientId") if dictionary.get("orderRecipientId") else APIHelper.SKIP
        order_freight_payer_id = dictionary.get("orderFreightPayerId") if dictionary.get("orderFreightPayerId") else APIHelper.SKIP
        order_carrier_id = dictionary.get("orderCarrierId") if dictionary.get("orderCarrierId") else APIHelper.SKIP
        division_id = dictionary.get("divisionId") if dictionary.get("divisionId") else APIHelper.SKIP
        department_id = dictionary.get("departmentId") if dictionary.get("departmentId") else APIHelper.SKIP
        blocked_dates = None
        if dictionary.get('blockedDates') is not None:
            blocked_dates = [LISPublicCustomerBlockedDate.from_dictionary(x) for x in dictionary.get('blockedDates')]
        else:
            blocked_dates = APIHelper.SKIP
        track_changes = dictionary.get("trackChanges") if "trackChanges" in dictionary.keys() else APIHelper.SKIP
        has_changes = dictionary.get("hasChanges") if "hasChanges" in dictionary.keys() else APIHelper.SKIP
        loading_empty = dictionary.get("loadingEmpty") if "loadingEmpty" in dictionary.keys() else APIHelper.SKIP
        unloading_empty = dictionary.get("unloadingEmpty") if "unloadingEmpty" in dictionary.keys() else APIHelper.SKIP
        unlock_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("unlockDate")).datetime if dictionary.get("unlockDate") else APIHelper.SKIP
        lock_reason = dictionary.get("lockReason") if dictionary.get("lockReason") else APIHelper.SKIP
        unlock_reason = dictionary.get("unlockReason") if dictionary.get("unlockReason") else APIHelper.SKIP
        lock_status = dictionary.get("lockStatus") if dictionary.get("lockStatus") else APIHelper.SKIP
        # Return an object of this model
        return cls(traffic_mode_id,
                   log_model_id,
                   sales_tax_id,
                   currency_id,
                   freight_term_id,
                   article_id,
                   is_reference_number_required,
                   blocked_from_date,
                   transportation_route_id,
                   order_sender_id,
                   order_recipient_id,
                   order_freight_payer_id,
                   order_carrier_id,
                   division_id,
                   department_id,
                   blocked_dates,
                   track_changes,
                   has_changes,
                   loading_empty,
                   unloading_empty,
                   unlock_date,
                   lock_reason,
                   unlock_reason,
                   lock_status)
