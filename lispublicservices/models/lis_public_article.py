# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_article_cost import LISPublicArticleCost
from lispublicservices.models.lis_public_language_item_container import LISPublicLanguageItemContainer
from lispublicservices.models.lis_public_unit import LISPublicUnit
from lispublicservices.models.lis_public_wms_article import LISPublicWMSArticle


class LISPublicArticle(object):

    """Implementation of the 'LISPublicArticle' model.

    TODO: type model description here.

    Attributes:
        costs (list of LISPublicArticleCost): TODO: type description here.
        customer_id (int): TODO: type description here.
        article_id (string): TODO: type description here.
        changed_on (datetime): TODO: type description here.
        changed_by (string): TODO: type description here.
        description_1 (string): TODO: type description here.
        description_2 (string): TODO: type description here.
        article_short (string): TODO: type description here.
        unit (string): TODO: type description here.
        origin_locality_id (string): TODO: type description here.
        ean (string): TODO: type description here.
        account_table_id (int): TODO: type description here.
        weight (float): TODO: type description here.
        group (string): TODO: type description here.
        dangerous_good_class (string): TODO: type description here.
        dangerous_goods (bool): TODO: type description here.
        dangerous_good_un (int): TODO: type description here.
        dangerous_good_number (string): TODO: type description here.
        reefer_cargo (bool): TODO: type description here.
        billing_rate (string): TODO: type description here.
        ean_minor (string): TODO: type description here.
        ccg (int): TODO: type description here.
        customs_tariff (string): TODO: type description here.
        stack_mark (int): TODO: type description here.
        einh_kl (string): TODO: type description here.
        height (int): TODO: type description here.
        length (int): TODO: type description here.
        width (int): TODO: type description here.
        supplier_article_no (string): TODO: type description here.
        next_ean (string): TODO: type description here.
        following_ean_count (int): TODO: type description here.
        pallet_unit (string): TODO: type description here.
        package_quantity (int): TODO: type description here.
        layer_quantity (int): TODO: type description here.
        valid_till (datetime): TODO: type description here.
        pallet_loading_height (int): TODO: type description here.
        article_group (string): TODO: type description here.
        stock_lockdown (string): TODO: type description here.
        stock_lockdown_characteristic (string): TODO: type description here.
        o_charge (bool): TODO: type description here.
        quantity_unit (string): TODO: type description here.
        package_id (string): TODO: type description here.
        quantity_per_package (int): TODO: type description here.
        packages_per_pallet (int): TODO: type description here.
        stockt_minimum_quantity (int): TODO: type description here.
        quantity_value (float): TODO: type description here.
        quantity_weight (float): TODO: type description here.
        package_weight (float): TODO: type description here.
        manufacturer (string): TODO: type description here.
        package_label_quantity (int): TODO: type description here.
        minimum_amount_in_package_units (int): TODO: type description here.
        inventory_date (datetime): TODO: type description here.
        inventory_stocks_package (int): TODO: type description here.
        cost_center_id (int): TODO: type description here.
        statistical_commodity_code (string): TODO: type description here.
        purchase_price (float): TODO: type description here.
        sales_price (float): TODO: type description here.
        cost_estimation_factor (float): TODO: type description here.
        bel_txt (string): TODO: type description here.
        ent_txt (string): TODO: type description here.
        cost_unit_id (int): TODO: type description here.
        kemmler_number (string): TODO: type description here.
        pallets_minor_stock_according (int): TODO: type description here.
        package_minor_stock_according (int): TODO: type description here.
        inventory_stocks_pallet (int): TODO: type description here.
        inventory_stocks_me (int): TODO: type description here.
        occupied_foot_print_quantity (float): TODO: type description here.
        footprint_unit (string): TODO: type description here.
        major_article_quantity (int): TODO: type description here.
        w_kz_wert (float): TODO: type description here.
        w_kz_tage (int): TODO: type description here.
        description_3 (string): TODO: type description here.
        waste_code (string): TODO: type description here.
        goods_class (string): TODO: type description here.
        goods_group (string): TODO: type description here.
        disposal_observation_company (DisposalObservationCompanyEnum): TODO:
            type description here.
        un_sequence_id (int): TODO: type description here.
        sensor_threshold_min_temp_1 (float): TODO: type description here.
        sensor_threshold_max_temp_1 (float): TODO: type description here.
        sensor_threshold_min_temp_2 (float): TODO: type description here.
        sensor_threshold_max_temp_2 (float): TODO: type description here.
        sensor_threshold_min_temp_3 (float): TODO: type description here.
        sensor_threshold_max_temp_3 (float): TODO: type description here.
        sensor_threshold_min_temp_4 (float): TODO: type description here.
        sensor_threshold_max_temp_4 (float): TODO: type description here.
        full_height (float): TODO: type description here.
        package (LISPublicUnit): Data contract for a unit.
        ecological_menace (EcologicalMenaceEnum): TODO: type description
            here.
        translation_label_text (LISPublicLanguageItemContainer): TODO: type
            description here.
        translation_second_label_text (LISPublicLanguageItemContainer): TODO:
            type description here.
        wms_article (LISPublicWMSArticle): The LISPublicWMSArticle data
            contract.
        is_new (bool): Gets or sets a value indicating whether this entity
            will be inserted or updated.
        original_hash_snapshot (string): Gets or sets the original hash
            snapshot.
        original_snapshot (string): Gets or sets the original snapshot.
        current_snapshot (string): Gets or sets the current snapshot.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "costs": 'costs',
        "customer_id": 'customerId',
        "article_id": 'articleId',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "description_1": 'description1',
        "description_2": 'description2',
        "article_short": 'articleShort',
        "unit": 'unit',
        "origin_locality_id": 'originLocalityId',
        "ean": 'ean',
        "account_table_id": 'accountTableId',
        "weight": 'weight',
        "group": 'group',
        "dangerous_good_class": 'dangerousGoodClass',
        "dangerous_goods": 'dangerousGoods',
        "dangerous_good_un": 'dangerousGoodUN',
        "dangerous_good_number": 'dangerousGoodNumber',
        "reefer_cargo": 'reeferCargo',
        "billing_rate": 'billingRate',
        "ean_minor": 'eanMinor',
        "ccg": 'ccg',
        "customs_tariff": 'customsTariff',
        "stack_mark": 'stackMark',
        "einh_kl": 'einhKl',
        "height": 'height',
        "length": 'length',
        "width": 'width',
        "supplier_article_no": 'supplierArticleNo',
        "next_ean": 'nextEAN',
        "following_ean_count": 'followingEANCount',
        "pallet_unit": 'palletUnit',
        "package_quantity": 'packageQuantity',
        "layer_quantity": 'layerQuantity',
        "valid_till": 'validTill',
        "pallet_loading_height": 'palletLoadingHeight',
        "article_group": 'articleGroup',
        "stock_lockdown": 'stockLockdown',
        "stock_lockdown_characteristic": 'stockLockdownCharacteristic',
        "o_charge": 'oCharge',
        "quantity_unit": 'quantityUnit',
        "package_id": 'packageId',
        "quantity_per_package": 'quantityPerPackage',
        "packages_per_pallet": 'packagesPerPallet',
        "stockt_minimum_quantity": 'stocktMinimumQuantity',
        "quantity_value": 'quantityValue',
        "quantity_weight": 'quantityWeight',
        "package_weight": 'packageWeight',
        "manufacturer": 'manufacturer',
        "package_label_quantity": 'packageLabelQuantity',
        "minimum_amount_in_package_units": 'minimumAmountInPackageUnits',
        "inventory_date": 'inventoryDate',
        "inventory_stocks_package": 'inventoryStocksPackage',
        "cost_center_id": 'costCenterId',
        "statistical_commodity_code": 'statisticalCommodityCode',
        "purchase_price": 'purchasePrice',
        "sales_price": 'salesPrice',
        "cost_estimation_factor": 'costEstimationFactor',
        "bel_txt": 'belTxt',
        "ent_txt": 'entTxt',
        "cost_unit_id": 'costUnitId',
        "kemmler_number": 'kemmlerNumber',
        "pallets_minor_stock_according": 'palletsMinorStockAccording',
        "package_minor_stock_according": 'packageMinorStockAccording',
        "inventory_stocks_pallet": 'inventoryStocksPallet',
        "inventory_stocks_me": 'inventoryStocksME',
        "occupied_foot_print_quantity": 'occupiedFootPrintQuantity',
        "footprint_unit": 'footprintUnit',
        "major_article_quantity": 'majorArticleQuantity',
        "w_kz_wert": 'wKzWert',
        "w_kz_tage": 'wKzTage',
        "description_3": 'description3',
        "waste_code": 'wasteCode',
        "goods_class": 'goodsClass',
        "goods_group": 'goodsGroup',
        "disposal_observation_company": 'disposalObservationCompany',
        "un_sequence_id": 'unSequenceId',
        "sensor_threshold_min_temp_1": 'sensorThresholdMinTemp1',
        "sensor_threshold_max_temp_1": 'sensorThresholdMaxTemp1',
        "sensor_threshold_min_temp_2": 'sensorThresholdMinTemp2',
        "sensor_threshold_max_temp_2": 'sensorThresholdMaxTemp2',
        "sensor_threshold_min_temp_3": 'sensorThresholdMinTemp3',
        "sensor_threshold_max_temp_3": 'sensorThresholdMaxTemp3',
        "sensor_threshold_min_temp_4": 'sensorThresholdMinTemp4',
        "sensor_threshold_max_temp_4": 'sensorThresholdMaxTemp4',
        "full_height": 'fullHeight',
        "package": 'package',
        "ecological_menace": 'ecologicalMenace',
        "translation_label_text": 'translationLabelText',
        "translation_second_label_text": 'translationSecondLabelText',
        "wms_article": 'wmsArticle',
        "is_new": 'isNew',
        "original_hash_snapshot": 'originalHashSnapshot',
        "original_snapshot": 'originalSnapshot',
        "current_snapshot": 'currentSnapshot'
    }

    _optionals = [
        'costs',
        'customer_id',
        'article_id',
        'changed_on',
        'changed_by',
        'description_1',
        'description_2',
        'article_short',
        'unit',
        'origin_locality_id',
        'ean',
        'account_table_id',
        'weight',
        'group',
        'dangerous_good_class',
        'dangerous_goods',
        'dangerous_good_un',
        'dangerous_good_number',
        'reefer_cargo',
        'billing_rate',
        'ean_minor',
        'ccg',
        'customs_tariff',
        'stack_mark',
        'einh_kl',
        'height',
        'length',
        'width',
        'supplier_article_no',
        'next_ean',
        'following_ean_count',
        'pallet_unit',
        'package_quantity',
        'layer_quantity',
        'valid_till',
        'pallet_loading_height',
        'article_group',
        'stock_lockdown',
        'stock_lockdown_characteristic',
        'o_charge',
        'quantity_unit',
        'package_id',
        'quantity_per_package',
        'packages_per_pallet',
        'stockt_minimum_quantity',
        'quantity_value',
        'quantity_weight',
        'package_weight',
        'manufacturer',
        'package_label_quantity',
        'minimum_amount_in_package_units',
        'inventory_date',
        'inventory_stocks_package',
        'cost_center_id',
        'statistical_commodity_code',
        'purchase_price',
        'sales_price',
        'cost_estimation_factor',
        'bel_txt',
        'ent_txt',
        'cost_unit_id',
        'kemmler_number',
        'pallets_minor_stock_according',
        'package_minor_stock_according',
        'inventory_stocks_pallet',
        'inventory_stocks_me',
        'occupied_foot_print_quantity',
        'footprint_unit',
        'major_article_quantity',
        'w_kz_wert',
        'w_kz_tage',
        'description_3',
        'waste_code',
        'goods_class',
        'goods_group',
        'disposal_observation_company',
        'un_sequence_id',
        'sensor_threshold_min_temp_1',
        'sensor_threshold_max_temp_1',
        'sensor_threshold_min_temp_2',
        'sensor_threshold_max_temp_2',
        'sensor_threshold_min_temp_3',
        'sensor_threshold_max_temp_3',
        'sensor_threshold_min_temp_4',
        'sensor_threshold_max_temp_4',
        'full_height',
        'package',
        'ecological_menace',
        'translation_label_text',
        'translation_second_label_text',
        'wms_article',
        'is_new',
        'original_hash_snapshot',
        'original_snapshot',
        'current_snapshot',
    ]

    def __init__(self,
                 costs=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 article_id=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 description_1=APIHelper.SKIP,
                 description_2=APIHelper.SKIP,
                 article_short=APIHelper.SKIP,
                 unit=APIHelper.SKIP,
                 origin_locality_id=APIHelper.SKIP,
                 ean=APIHelper.SKIP,
                 account_table_id=APIHelper.SKIP,
                 weight=APIHelper.SKIP,
                 group=APIHelper.SKIP,
                 dangerous_good_class=APIHelper.SKIP,
                 dangerous_goods=APIHelper.SKIP,
                 dangerous_good_un=APIHelper.SKIP,
                 dangerous_good_number=APIHelper.SKIP,
                 reefer_cargo=APIHelper.SKIP,
                 billing_rate=APIHelper.SKIP,
                 ean_minor=APIHelper.SKIP,
                 ccg=APIHelper.SKIP,
                 customs_tariff=APIHelper.SKIP,
                 stack_mark=APIHelper.SKIP,
                 einh_kl=APIHelper.SKIP,
                 height=APIHelper.SKIP,
                 length=APIHelper.SKIP,
                 width=APIHelper.SKIP,
                 supplier_article_no=APIHelper.SKIP,
                 next_ean=APIHelper.SKIP,
                 following_ean_count=APIHelper.SKIP,
                 pallet_unit=APIHelper.SKIP,
                 package_quantity=APIHelper.SKIP,
                 layer_quantity=APIHelper.SKIP,
                 valid_till=APIHelper.SKIP,
                 pallet_loading_height=APIHelper.SKIP,
                 article_group=APIHelper.SKIP,
                 stock_lockdown=APIHelper.SKIP,
                 stock_lockdown_characteristic=APIHelper.SKIP,
                 o_charge=APIHelper.SKIP,
                 quantity_unit=APIHelper.SKIP,
                 package_id=APIHelper.SKIP,
                 quantity_per_package=APIHelper.SKIP,
                 packages_per_pallet=APIHelper.SKIP,
                 stockt_minimum_quantity=APIHelper.SKIP,
                 quantity_value=APIHelper.SKIP,
                 quantity_weight=APIHelper.SKIP,
                 package_weight=APIHelper.SKIP,
                 manufacturer=APIHelper.SKIP,
                 package_label_quantity=APIHelper.SKIP,
                 minimum_amount_in_package_units=APIHelper.SKIP,
                 inventory_date=APIHelper.SKIP,
                 inventory_stocks_package=APIHelper.SKIP,
                 cost_center_id=APIHelper.SKIP,
                 statistical_commodity_code=APIHelper.SKIP,
                 purchase_price=APIHelper.SKIP,
                 sales_price=APIHelper.SKIP,
                 cost_estimation_factor=APIHelper.SKIP,
                 bel_txt=APIHelper.SKIP,
                 ent_txt=APIHelper.SKIP,
                 cost_unit_id=APIHelper.SKIP,
                 kemmler_number=APIHelper.SKIP,
                 pallets_minor_stock_according=APIHelper.SKIP,
                 package_minor_stock_according=APIHelper.SKIP,
                 inventory_stocks_pallet=APIHelper.SKIP,
                 inventory_stocks_me=APIHelper.SKIP,
                 occupied_foot_print_quantity=APIHelper.SKIP,
                 footprint_unit=APIHelper.SKIP,
                 major_article_quantity=APIHelper.SKIP,
                 w_kz_wert=APIHelper.SKIP,
                 w_kz_tage=APIHelper.SKIP,
                 description_3=APIHelper.SKIP,
                 waste_code=APIHelper.SKIP,
                 goods_class=APIHelper.SKIP,
                 goods_group=APIHelper.SKIP,
                 disposal_observation_company=APIHelper.SKIP,
                 un_sequence_id=APIHelper.SKIP,
                 sensor_threshold_min_temp_1=APIHelper.SKIP,
                 sensor_threshold_max_temp_1=APIHelper.SKIP,
                 sensor_threshold_min_temp_2=APIHelper.SKIP,
                 sensor_threshold_max_temp_2=APIHelper.SKIP,
                 sensor_threshold_min_temp_3=APIHelper.SKIP,
                 sensor_threshold_max_temp_3=APIHelper.SKIP,
                 sensor_threshold_min_temp_4=APIHelper.SKIP,
                 sensor_threshold_max_temp_4=APIHelper.SKIP,
                 full_height=APIHelper.SKIP,
                 package=APIHelper.SKIP,
                 ecological_menace=APIHelper.SKIP,
                 translation_label_text=APIHelper.SKIP,
                 translation_second_label_text=APIHelper.SKIP,
                 wms_article=APIHelper.SKIP,
                 is_new=APIHelper.SKIP,
                 original_hash_snapshot=APIHelper.SKIP,
                 original_snapshot=APIHelper.SKIP,
                 current_snapshot=APIHelper.SKIP):
        """Constructor for the LISPublicArticle class"""

        # Initialize members of the class
        if costs is not APIHelper.SKIP:
            self.costs = costs 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if article_id is not APIHelper.SKIP:
            self.article_id = article_id 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if description_1 is not APIHelper.SKIP:
            self.description_1 = description_1 
        if description_2 is not APIHelper.SKIP:
            self.description_2 = description_2 
        if article_short is not APIHelper.SKIP:
            self.article_short = article_short 
        if unit is not APIHelper.SKIP:
            self.unit = unit 
        if origin_locality_id is not APIHelper.SKIP:
            self.origin_locality_id = origin_locality_id 
        if ean is not APIHelper.SKIP:
            self.ean = ean 
        if account_table_id is not APIHelper.SKIP:
            self.account_table_id = account_table_id 
        if weight is not APIHelper.SKIP:
            self.weight = weight 
        if group is not APIHelper.SKIP:
            self.group = group 
        if dangerous_good_class is not APIHelper.SKIP:
            self.dangerous_good_class = dangerous_good_class 
        if dangerous_goods is not APIHelper.SKIP:
            self.dangerous_goods = dangerous_goods 
        if dangerous_good_un is not APIHelper.SKIP:
            self.dangerous_good_un = dangerous_good_un 
        if dangerous_good_number is not APIHelper.SKIP:
            self.dangerous_good_number = dangerous_good_number 
        if reefer_cargo is not APIHelper.SKIP:
            self.reefer_cargo = reefer_cargo 
        if billing_rate is not APIHelper.SKIP:
            self.billing_rate = billing_rate 
        if ean_minor is not APIHelper.SKIP:
            self.ean_minor = ean_minor 
        if ccg is not APIHelper.SKIP:
            self.ccg = ccg 
        if customs_tariff is not APIHelper.SKIP:
            self.customs_tariff = customs_tariff 
        if stack_mark is not APIHelper.SKIP:
            self.stack_mark = stack_mark 
        if einh_kl is not APIHelper.SKIP:
            self.einh_kl = einh_kl 
        if height is not APIHelper.SKIP:
            self.height = height 
        if length is not APIHelper.SKIP:
            self.length = length 
        if width is not APIHelper.SKIP:
            self.width = width 
        if supplier_article_no is not APIHelper.SKIP:
            self.supplier_article_no = supplier_article_no 
        if next_ean is not APIHelper.SKIP:
            self.next_ean = next_ean 
        if following_ean_count is not APIHelper.SKIP:
            self.following_ean_count = following_ean_count 
        if pallet_unit is not APIHelper.SKIP:
            self.pallet_unit = pallet_unit 
        if package_quantity is not APIHelper.SKIP:
            self.package_quantity = package_quantity 
        if layer_quantity is not APIHelper.SKIP:
            self.layer_quantity = layer_quantity 
        if valid_till is not APIHelper.SKIP:
            self.valid_till = APIHelper.RFC3339DateTime(valid_till) if valid_till else None 
        if pallet_loading_height is not APIHelper.SKIP:
            self.pallet_loading_height = pallet_loading_height 
        if article_group is not APIHelper.SKIP:
            self.article_group = article_group 
        if stock_lockdown is not APIHelper.SKIP:
            self.stock_lockdown = stock_lockdown 
        if stock_lockdown_characteristic is not APIHelper.SKIP:
            self.stock_lockdown_characteristic = stock_lockdown_characteristic 
        if o_charge is not APIHelper.SKIP:
            self.o_charge = o_charge 
        if quantity_unit is not APIHelper.SKIP:
            self.quantity_unit = quantity_unit 
        if package_id is not APIHelper.SKIP:
            self.package_id = package_id 
        if quantity_per_package is not APIHelper.SKIP:
            self.quantity_per_package = quantity_per_package 
        if packages_per_pallet is not APIHelper.SKIP:
            self.packages_per_pallet = packages_per_pallet 
        if stockt_minimum_quantity is not APIHelper.SKIP:
            self.stockt_minimum_quantity = stockt_minimum_quantity 
        if quantity_value is not APIHelper.SKIP:
            self.quantity_value = quantity_value 
        if quantity_weight is not APIHelper.SKIP:
            self.quantity_weight = quantity_weight 
        if package_weight is not APIHelper.SKIP:
            self.package_weight = package_weight 
        if manufacturer is not APIHelper.SKIP:
            self.manufacturer = manufacturer 
        if package_label_quantity is not APIHelper.SKIP:
            self.package_label_quantity = package_label_quantity 
        if minimum_amount_in_package_units is not APIHelper.SKIP:
            self.minimum_amount_in_package_units = minimum_amount_in_package_units 
        if inventory_date is not APIHelper.SKIP:
            self.inventory_date = APIHelper.RFC3339DateTime(inventory_date) if inventory_date else None 
        if inventory_stocks_package is not APIHelper.SKIP:
            self.inventory_stocks_package = inventory_stocks_package 
        if cost_center_id is not APIHelper.SKIP:
            self.cost_center_id = cost_center_id 
        if statistical_commodity_code is not APIHelper.SKIP:
            self.statistical_commodity_code = statistical_commodity_code 
        if purchase_price is not APIHelper.SKIP:
            self.purchase_price = purchase_price 
        if sales_price is not APIHelper.SKIP:
            self.sales_price = sales_price 
        if cost_estimation_factor is not APIHelper.SKIP:
            self.cost_estimation_factor = cost_estimation_factor 
        if bel_txt is not APIHelper.SKIP:
            self.bel_txt = bel_txt 
        if ent_txt is not APIHelper.SKIP:
            self.ent_txt = ent_txt 
        if cost_unit_id is not APIHelper.SKIP:
            self.cost_unit_id = cost_unit_id 
        if kemmler_number is not APIHelper.SKIP:
            self.kemmler_number = kemmler_number 
        if pallets_minor_stock_according is not APIHelper.SKIP:
            self.pallets_minor_stock_according = pallets_minor_stock_according 
        if package_minor_stock_according is not APIHelper.SKIP:
            self.package_minor_stock_according = package_minor_stock_according 
        if inventory_stocks_pallet is not APIHelper.SKIP:
            self.inventory_stocks_pallet = inventory_stocks_pallet 
        if inventory_stocks_me is not APIHelper.SKIP:
            self.inventory_stocks_me = inventory_stocks_me 
        if occupied_foot_print_quantity is not APIHelper.SKIP:
            self.occupied_foot_print_quantity = occupied_foot_print_quantity 
        if footprint_unit is not APIHelper.SKIP:
            self.footprint_unit = footprint_unit 
        if major_article_quantity is not APIHelper.SKIP:
            self.major_article_quantity = major_article_quantity 
        if w_kz_wert is not APIHelper.SKIP:
            self.w_kz_wert = w_kz_wert 
        if w_kz_tage is not APIHelper.SKIP:
            self.w_kz_tage = w_kz_tage 
        if description_3 is not APIHelper.SKIP:
            self.description_3 = description_3 
        if waste_code is not APIHelper.SKIP:
            self.waste_code = waste_code 
        if goods_class is not APIHelper.SKIP:
            self.goods_class = goods_class 
        if goods_group is not APIHelper.SKIP:
            self.goods_group = goods_group 
        if disposal_observation_company is not APIHelper.SKIP:
            self.disposal_observation_company = disposal_observation_company 
        if un_sequence_id is not APIHelper.SKIP:
            self.un_sequence_id = un_sequence_id 
        if sensor_threshold_min_temp_1 is not APIHelper.SKIP:
            self.sensor_threshold_min_temp_1 = sensor_threshold_min_temp_1 
        if sensor_threshold_max_temp_1 is not APIHelper.SKIP:
            self.sensor_threshold_max_temp_1 = sensor_threshold_max_temp_1 
        if sensor_threshold_min_temp_2 is not APIHelper.SKIP:
            self.sensor_threshold_min_temp_2 = sensor_threshold_min_temp_2 
        if sensor_threshold_max_temp_2 is not APIHelper.SKIP:
            self.sensor_threshold_max_temp_2 = sensor_threshold_max_temp_2 
        if sensor_threshold_min_temp_3 is not APIHelper.SKIP:
            self.sensor_threshold_min_temp_3 = sensor_threshold_min_temp_3 
        if sensor_threshold_max_temp_3 is not APIHelper.SKIP:
            self.sensor_threshold_max_temp_3 = sensor_threshold_max_temp_3 
        if sensor_threshold_min_temp_4 is not APIHelper.SKIP:
            self.sensor_threshold_min_temp_4 = sensor_threshold_min_temp_4 
        if sensor_threshold_max_temp_4 is not APIHelper.SKIP:
            self.sensor_threshold_max_temp_4 = sensor_threshold_max_temp_4 
        if full_height is not APIHelper.SKIP:
            self.full_height = full_height 
        if package is not APIHelper.SKIP:
            self.package = package 
        if ecological_menace is not APIHelper.SKIP:
            self.ecological_menace = ecological_menace 
        if translation_label_text is not APIHelper.SKIP:
            self.translation_label_text = translation_label_text 
        if translation_second_label_text is not APIHelper.SKIP:
            self.translation_second_label_text = translation_second_label_text 
        if wms_article is not APIHelper.SKIP:
            self.wms_article = wms_article 
        if is_new is not APIHelper.SKIP:
            self.is_new = is_new 
        if original_hash_snapshot is not APIHelper.SKIP:
            self.original_hash_snapshot = original_hash_snapshot 
        if original_snapshot is not APIHelper.SKIP:
            self.original_snapshot = original_snapshot 
        if current_snapshot is not APIHelper.SKIP:
            self.current_snapshot = current_snapshot 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        costs = None
        if dictionary.get('costs') is not None:
            costs = [LISPublicArticleCost.from_dictionary(x) for x in dictionary.get('costs')]
        else:
            costs = APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        article_id = dictionary.get("articleId") if dictionary.get("articleId") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        description_1 = dictionary.get("description1") if dictionary.get("description1") else APIHelper.SKIP
        description_2 = dictionary.get("description2") if dictionary.get("description2") else APIHelper.SKIP
        article_short = dictionary.get("articleShort") if dictionary.get("articleShort") else APIHelper.SKIP
        unit = dictionary.get("unit") if dictionary.get("unit") else APIHelper.SKIP
        origin_locality_id = dictionary.get("originLocalityId") if dictionary.get("originLocalityId") else APIHelper.SKIP
        ean = dictionary.get("ean") if dictionary.get("ean") else APIHelper.SKIP
        account_table_id = dictionary.get("accountTableId") if dictionary.get("accountTableId") else APIHelper.SKIP
        weight = dictionary.get("weight") if dictionary.get("weight") else APIHelper.SKIP
        group = dictionary.get("group") if dictionary.get("group") else APIHelper.SKIP
        dangerous_good_class = dictionary.get("dangerousGoodClass") if dictionary.get("dangerousGoodClass") else APIHelper.SKIP
        dangerous_goods = dictionary.get("dangerousGoods") if "dangerousGoods" in dictionary.keys() else APIHelper.SKIP
        dangerous_good_un = dictionary.get("dangerousGoodUN") if dictionary.get("dangerousGoodUN") else APIHelper.SKIP
        dangerous_good_number = dictionary.get("dangerousGoodNumber") if dictionary.get("dangerousGoodNumber") else APIHelper.SKIP
        reefer_cargo = dictionary.get("reeferCargo") if "reeferCargo" in dictionary.keys() else APIHelper.SKIP
        billing_rate = dictionary.get("billingRate") if dictionary.get("billingRate") else APIHelper.SKIP
        ean_minor = dictionary.get("eanMinor") if dictionary.get("eanMinor") else APIHelper.SKIP
        ccg = dictionary.get("ccg") if dictionary.get("ccg") else APIHelper.SKIP
        customs_tariff = dictionary.get("customsTariff") if dictionary.get("customsTariff") else APIHelper.SKIP
        stack_mark = dictionary.get("stackMark") if dictionary.get("stackMark") else APIHelper.SKIP
        einh_kl = dictionary.get("einhKl") if dictionary.get("einhKl") else APIHelper.SKIP
        height = dictionary.get("height") if dictionary.get("height") else APIHelper.SKIP
        length = dictionary.get("length") if dictionary.get("length") else APIHelper.SKIP
        width = dictionary.get("width") if dictionary.get("width") else APIHelper.SKIP
        supplier_article_no = dictionary.get("supplierArticleNo") if dictionary.get("supplierArticleNo") else APIHelper.SKIP
        next_ean = dictionary.get("nextEAN") if dictionary.get("nextEAN") else APIHelper.SKIP
        following_ean_count = dictionary.get("followingEANCount") if dictionary.get("followingEANCount") else APIHelper.SKIP
        pallet_unit = dictionary.get("palletUnit") if dictionary.get("palletUnit") else APIHelper.SKIP
        package_quantity = dictionary.get("packageQuantity") if dictionary.get("packageQuantity") else APIHelper.SKIP
        layer_quantity = dictionary.get("layerQuantity") if dictionary.get("layerQuantity") else APIHelper.SKIP
        valid_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("validTill")).datetime if dictionary.get("validTill") else APIHelper.SKIP
        pallet_loading_height = dictionary.get("palletLoadingHeight") if dictionary.get("palletLoadingHeight") else APIHelper.SKIP
        article_group = dictionary.get("articleGroup") if dictionary.get("articleGroup") else APIHelper.SKIP
        stock_lockdown = dictionary.get("stockLockdown") if dictionary.get("stockLockdown") else APIHelper.SKIP
        stock_lockdown_characteristic = dictionary.get("stockLockdownCharacteristic") if dictionary.get("stockLockdownCharacteristic") else APIHelper.SKIP
        o_charge = dictionary.get("oCharge") if "oCharge" in dictionary.keys() else APIHelper.SKIP
        quantity_unit = dictionary.get("quantityUnit") if dictionary.get("quantityUnit") else APIHelper.SKIP
        package_id = dictionary.get("packageId") if dictionary.get("packageId") else APIHelper.SKIP
        quantity_per_package = dictionary.get("quantityPerPackage") if dictionary.get("quantityPerPackage") else APIHelper.SKIP
        packages_per_pallet = dictionary.get("packagesPerPallet") if dictionary.get("packagesPerPallet") else APIHelper.SKIP
        stockt_minimum_quantity = dictionary.get("stocktMinimumQuantity") if dictionary.get("stocktMinimumQuantity") else APIHelper.SKIP
        quantity_value = dictionary.get("quantityValue") if dictionary.get("quantityValue") else APIHelper.SKIP
        quantity_weight = dictionary.get("quantityWeight") if dictionary.get("quantityWeight") else APIHelper.SKIP
        package_weight = dictionary.get("packageWeight") if dictionary.get("packageWeight") else APIHelper.SKIP
        manufacturer = dictionary.get("manufacturer") if dictionary.get("manufacturer") else APIHelper.SKIP
        package_label_quantity = dictionary.get("packageLabelQuantity") if dictionary.get("packageLabelQuantity") else APIHelper.SKIP
        minimum_amount_in_package_units = dictionary.get("minimumAmountInPackageUnits") if dictionary.get("minimumAmountInPackageUnits") else APIHelper.SKIP
        inventory_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("inventoryDate")).datetime if dictionary.get("inventoryDate") else APIHelper.SKIP
        inventory_stocks_package = dictionary.get("inventoryStocksPackage") if dictionary.get("inventoryStocksPackage") else APIHelper.SKIP
        cost_center_id = dictionary.get("costCenterId") if dictionary.get("costCenterId") else APIHelper.SKIP
        statistical_commodity_code = dictionary.get("statisticalCommodityCode") if dictionary.get("statisticalCommodityCode") else APIHelper.SKIP
        purchase_price = dictionary.get("purchasePrice") if dictionary.get("purchasePrice") else APIHelper.SKIP
        sales_price = dictionary.get("salesPrice") if dictionary.get("salesPrice") else APIHelper.SKIP
        cost_estimation_factor = dictionary.get("costEstimationFactor") if dictionary.get("costEstimationFactor") else APIHelper.SKIP
        bel_txt = dictionary.get("belTxt") if dictionary.get("belTxt") else APIHelper.SKIP
        ent_txt = dictionary.get("entTxt") if dictionary.get("entTxt") else APIHelper.SKIP
        cost_unit_id = dictionary.get("costUnitId") if dictionary.get("costUnitId") else APIHelper.SKIP
        kemmler_number = dictionary.get("kemmlerNumber") if dictionary.get("kemmlerNumber") else APIHelper.SKIP
        pallets_minor_stock_according = dictionary.get("palletsMinorStockAccording") if dictionary.get("palletsMinorStockAccording") else APIHelper.SKIP
        package_minor_stock_according = dictionary.get("packageMinorStockAccording") if dictionary.get("packageMinorStockAccording") else APIHelper.SKIP
        inventory_stocks_pallet = dictionary.get("inventoryStocksPallet") if dictionary.get("inventoryStocksPallet") else APIHelper.SKIP
        inventory_stocks_me = dictionary.get("inventoryStocksME") if dictionary.get("inventoryStocksME") else APIHelper.SKIP
        occupied_foot_print_quantity = dictionary.get("occupiedFootPrintQuantity") if dictionary.get("occupiedFootPrintQuantity") else APIHelper.SKIP
        footprint_unit = dictionary.get("footprintUnit") if dictionary.get("footprintUnit") else APIHelper.SKIP
        major_article_quantity = dictionary.get("majorArticleQuantity") if dictionary.get("majorArticleQuantity") else APIHelper.SKIP
        w_kz_wert = dictionary.get("wKzWert") if dictionary.get("wKzWert") else APIHelper.SKIP
        w_kz_tage = dictionary.get("wKzTage") if dictionary.get("wKzTage") else APIHelper.SKIP
        description_3 = dictionary.get("description3") if dictionary.get("description3") else APIHelper.SKIP
        waste_code = dictionary.get("wasteCode") if dictionary.get("wasteCode") else APIHelper.SKIP
        goods_class = dictionary.get("goodsClass") if dictionary.get("goodsClass") else APIHelper.SKIP
        goods_group = dictionary.get("goodsGroup") if dictionary.get("goodsGroup") else APIHelper.SKIP
        disposal_observation_company = dictionary.get("disposalObservationCompany") if dictionary.get("disposalObservationCompany") else APIHelper.SKIP
        un_sequence_id = dictionary.get("unSequenceId") if dictionary.get("unSequenceId") else APIHelper.SKIP
        sensor_threshold_min_temp_1 = dictionary.get("sensorThresholdMinTemp1") if dictionary.get("sensorThresholdMinTemp1") else APIHelper.SKIP
        sensor_threshold_max_temp_1 = dictionary.get("sensorThresholdMaxTemp1") if dictionary.get("sensorThresholdMaxTemp1") else APIHelper.SKIP
        sensor_threshold_min_temp_2 = dictionary.get("sensorThresholdMinTemp2") if dictionary.get("sensorThresholdMinTemp2") else APIHelper.SKIP
        sensor_threshold_max_temp_2 = dictionary.get("sensorThresholdMaxTemp2") if dictionary.get("sensorThresholdMaxTemp2") else APIHelper.SKIP
        sensor_threshold_min_temp_3 = dictionary.get("sensorThresholdMinTemp3") if dictionary.get("sensorThresholdMinTemp3") else APIHelper.SKIP
        sensor_threshold_max_temp_3 = dictionary.get("sensorThresholdMaxTemp3") if dictionary.get("sensorThresholdMaxTemp3") else APIHelper.SKIP
        sensor_threshold_min_temp_4 = dictionary.get("sensorThresholdMinTemp4") if dictionary.get("sensorThresholdMinTemp4") else APIHelper.SKIP
        sensor_threshold_max_temp_4 = dictionary.get("sensorThresholdMaxTemp4") if dictionary.get("sensorThresholdMaxTemp4") else APIHelper.SKIP
        full_height = dictionary.get("fullHeight") if dictionary.get("fullHeight") else APIHelper.SKIP
        package = LISPublicUnit.from_dictionary(dictionary.get('package')) if 'package' in dictionary.keys() else APIHelper.SKIP
        ecological_menace = dictionary.get("ecologicalMenace") if dictionary.get("ecologicalMenace") else APIHelper.SKIP
        translation_label_text = LISPublicLanguageItemContainer.from_dictionary(dictionary.get('translationLabelText')) if 'translationLabelText' in dictionary.keys() else APIHelper.SKIP
        translation_second_label_text = LISPublicLanguageItemContainer.from_dictionary(dictionary.get('translationSecondLabelText')) if 'translationSecondLabelText' in dictionary.keys() else APIHelper.SKIP
        wms_article = LISPublicWMSArticle.from_dictionary(dictionary.get('wmsArticle')) if 'wmsArticle' in dictionary.keys() else APIHelper.SKIP
        is_new = dictionary.get("isNew") if "isNew" in dictionary.keys() else APIHelper.SKIP
        original_hash_snapshot = dictionary.get("originalHashSnapshot") if dictionary.get("originalHashSnapshot") else APIHelper.SKIP
        original_snapshot = dictionary.get("originalSnapshot") if dictionary.get("originalSnapshot") else APIHelper.SKIP
        current_snapshot = dictionary.get("currentSnapshot") if dictionary.get("currentSnapshot") else APIHelper.SKIP
        # Return an object of this model
        return cls(costs,
                   customer_id,
                   article_id,
                   changed_on,
                   changed_by,
                   description_1,
                   description_2,
                   article_short,
                   unit,
                   origin_locality_id,
                   ean,
                   account_table_id,
                   weight,
                   group,
                   dangerous_good_class,
                   dangerous_goods,
                   dangerous_good_un,
                   dangerous_good_number,
                   reefer_cargo,
                   billing_rate,
                   ean_minor,
                   ccg,
                   customs_tariff,
                   stack_mark,
                   einh_kl,
                   height,
                   length,
                   width,
                   supplier_article_no,
                   next_ean,
                   following_ean_count,
                   pallet_unit,
                   package_quantity,
                   layer_quantity,
                   valid_till,
                   pallet_loading_height,
                   article_group,
                   stock_lockdown,
                   stock_lockdown_characteristic,
                   o_charge,
                   quantity_unit,
                   package_id,
                   quantity_per_package,
                   packages_per_pallet,
                   stockt_minimum_quantity,
                   quantity_value,
                   quantity_weight,
                   package_weight,
                   manufacturer,
                   package_label_quantity,
                   minimum_amount_in_package_units,
                   inventory_date,
                   inventory_stocks_package,
                   cost_center_id,
                   statistical_commodity_code,
                   purchase_price,
                   sales_price,
                   cost_estimation_factor,
                   bel_txt,
                   ent_txt,
                   cost_unit_id,
                   kemmler_number,
                   pallets_minor_stock_according,
                   package_minor_stock_according,
                   inventory_stocks_pallet,
                   inventory_stocks_me,
                   occupied_foot_print_quantity,
                   footprint_unit,
                   major_article_quantity,
                   w_kz_wert,
                   w_kz_tage,
                   description_3,
                   waste_code,
                   goods_class,
                   goods_group,
                   disposal_observation_company,
                   un_sequence_id,
                   sensor_threshold_min_temp_1,
                   sensor_threshold_max_temp_1,
                   sensor_threshold_min_temp_2,
                   sensor_threshold_max_temp_2,
                   sensor_threshold_min_temp_3,
                   sensor_threshold_max_temp_3,
                   sensor_threshold_min_temp_4,
                   sensor_threshold_max_temp_4,
                   full_height,
                   package,
                   ecological_menace,
                   translation_label_text,
                   translation_second_label_text,
                   wms_article,
                   is_new,
                   original_hash_snapshot,
                   original_snapshot,
                   current_snapshot)
