# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_locality_routing_info import LISPublicLocalityRoutingInfo


class LISPublicLocality(object):

    """Implementation of the 'LISPublicLocality' model.

    It´s a locality object from the orte table.

    Attributes:
        locality_id (int): The primarykey from the 'Orte' Table with
            CountryCode  DB Field: LfdNr
        country_code (string): The car country code! It´s the primary key from
            the orte table.  DB Field: LKZ
        zip (string): The postalcode fromt the locality  DB Field: PLZ
        city (string): The cityname  DB Field: Ort
        city_district (string): The CityDistrict of the named city.  DB Field:
            Ortsteil
        routing_info (LISPublicLocalityRoutingInfo): Partial class with the
            correct namespace

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "locality_id": 'localityId',
        "country_code": 'countryCode',
        "zip": 'zip',
        "city": 'city',
        "city_district": 'cityDistrict',
        "routing_info": 'routingInfo'
    }

    _optionals = [
        'locality_id',
        'country_code',
        'zip',
        'city',
        'city_district',
        'routing_info',
    ]

    def __init__(self,
                 locality_id=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 zip=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 city_district=APIHelper.SKIP,
                 routing_info=APIHelper.SKIP):
        """Constructor for the LISPublicLocality class"""

        # Initialize members of the class
        if locality_id is not APIHelper.SKIP:
            self.locality_id = locality_id 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if zip is not APIHelper.SKIP:
            self.zip = zip 
        if city is not APIHelper.SKIP:
            self.city = city 
        if city_district is not APIHelper.SKIP:
            self.city_district = city_district 
        if routing_info is not APIHelper.SKIP:
            self.routing_info = routing_info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        locality_id = dictionary.get("localityId") if dictionary.get("localityId") else APIHelper.SKIP
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else APIHelper.SKIP
        zip = dictionary.get("zip") if dictionary.get("zip") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        city_district = dictionary.get("cityDistrict") if dictionary.get("cityDistrict") else APIHelper.SKIP
        routing_info = LISPublicLocalityRoutingInfo.from_dictionary(dictionary.get('routingInfo')) if 'routingInfo' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(locality_id,
                   country_code,
                   zip,
                   city,
                   city_district,
                   routing_info)
