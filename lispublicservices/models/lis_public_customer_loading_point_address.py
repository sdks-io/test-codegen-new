# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_coordinate import LISPublicCoordinate
from lispublicservices.models.lis_public_locality import LISPublicLocality


class LISPublicCustomerLoadingPointAddress(object):

    """Implementation of the 'LISPublicCustomerLoadingPointAddress' model.

    Represents a customer address.

    Attributes:
        address_id (int): The id of the address (at the moment must be the
            same as the locality id)
        locality (LISPublicLocality): ItÂ´s a locality object from the orte
            table.
        street (string): The street of the address including the House number
        coordinate (LISPublicCoordinate): This class represents the public
            coordinate object.
        changed_on (datetime): Gets or sets the date of the last change to
            this item.
        changed_by (string): Gets or sets the name of the user that made the
            last change to this item.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address_id": 'addressId',
        "locality": 'locality',
        "street": 'street',
        "coordinate": 'coordinate',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy'
    }

    _optionals = [
        'address_id',
        'locality',
        'street',
        'coordinate',
        'changed_on',
        'changed_by',
    ]

    def __init__(self,
                 address_id=APIHelper.SKIP,
                 locality=APIHelper.SKIP,
                 street=APIHelper.SKIP,
                 coordinate=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerLoadingPointAddress class"""

        # Initialize members of the class
        if address_id is not APIHelper.SKIP:
            self.address_id = address_id 
        if locality is not APIHelper.SKIP:
            self.locality = locality 
        if street is not APIHelper.SKIP:
            self.street = street 
        if coordinate is not APIHelper.SKIP:
            self.coordinate = coordinate 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        address_id = dictionary.get("addressId") if dictionary.get("addressId") else APIHelper.SKIP
        locality = LISPublicLocality.from_dictionary(dictionary.get('locality')) if 'locality' in dictionary.keys() else APIHelper.SKIP
        street = dictionary.get("street") if dictionary.get("street") else APIHelper.SKIP
        coordinate = LISPublicCoordinate.from_dictionary(dictionary.get('coordinate')) if 'coordinate' in dictionary.keys() else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        # Return an object of this model
        return cls(address_id,
                   locality,
                   street,
                   coordinate,
                   changed_on,
                   changed_by)
