# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerCommissionCalculation(object):

    """Implementation of the 'LISPublicCustomerCommissionCalculation' model.

    The ILISCustomerCommissionCalculationEntity data contract.

    Attributes:
        customer_commission_calculation_id (int): Gets or sets the customer
            commission calculation identifier.
        customer_id (int): Gets or sets the customer identifier.
        transport_type_id (string): Gets or sets the transport type
            identifier.
        contact_person_id (int): Gets or sets the contact person identifier.
        fee_group_id (int): Gets or sets the fee group identifier.
        valid_from (datetime): Gets or sets the valid from.
        commission_percentage (float): Gets or sets the commission
            percentage.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_commission_calculation_id": 'customerCommissionCalculationId',
        "customer_id": 'customerId',
        "transport_type_id": 'transportTypeId',
        "contact_person_id": 'contactPersonId',
        "fee_group_id": 'feeGroupId',
        "valid_from": 'validFrom',
        "commission_percentage": 'commissionPercentage'
    }

    _optionals = [
        'customer_commission_calculation_id',
        'customer_id',
        'transport_type_id',
        'contact_person_id',
        'fee_group_id',
        'valid_from',
        'commission_percentage',
    ]

    def __init__(self,
                 customer_commission_calculation_id=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 transport_type_id=APIHelper.SKIP,
                 contact_person_id=APIHelper.SKIP,
                 fee_group_id=APIHelper.SKIP,
                 valid_from=APIHelper.SKIP,
                 commission_percentage=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerCommissionCalculation class"""

        # Initialize members of the class
        if customer_commission_calculation_id is not APIHelper.SKIP:
            self.customer_commission_calculation_id = customer_commission_calculation_id 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if transport_type_id is not APIHelper.SKIP:
            self.transport_type_id = transport_type_id 
        if contact_person_id is not APIHelper.SKIP:
            self.contact_person_id = contact_person_id 
        if fee_group_id is not APIHelper.SKIP:
            self.fee_group_id = fee_group_id 
        if valid_from is not APIHelper.SKIP:
            self.valid_from = APIHelper.RFC3339DateTime(valid_from) if valid_from else None 
        if commission_percentage is not APIHelper.SKIP:
            self.commission_percentage = commission_percentage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_commission_calculation_id = dictionary.get("customerCommissionCalculationId") if dictionary.get("customerCommissionCalculationId") else APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        transport_type_id = dictionary.get("transportTypeId") if dictionary.get("transportTypeId") else APIHelper.SKIP
        contact_person_id = dictionary.get("contactPersonId") if dictionary.get("contactPersonId") else APIHelper.SKIP
        fee_group_id = dictionary.get("feeGroupId") if dictionary.get("feeGroupId") else APIHelper.SKIP
        valid_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("validFrom")).datetime if dictionary.get("validFrom") else APIHelper.SKIP
        commission_percentage = dictionary.get("commissionPercentage") if dictionary.get("commissionPercentage") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_commission_calculation_id,
                   customer_id,
                   transport_type_id,
                   contact_person_id,
                   fee_group_id,
                   valid_from,
                   commission_percentage)
