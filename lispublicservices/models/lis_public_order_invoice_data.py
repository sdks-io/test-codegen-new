# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicOrderInvoiceData(object):

    """Implementation of the 'LISPublicOrderInvoiceData' model.

    A base class for all order data contracts.

    Attributes:
        costs (float): Gets or sets the costs.
        costs_error (bool): TODO: type description here.
        costs_internal (float): Gets or sets the costs internal.
        costs_internal_error (bool): TODO: type description here.
        proceeds (float): Gets or sets the proceeds.
        proceeds_error (bool): TODO: type description here.
        proceeds_internal (float): Gets or sets the proceeds internal.
        proceeds_internal_error (bool): TODO: type description here.
        currency_id (string): Gets or sets the currency identifier.
        mtype (TypeEnum): Gets or sets the type.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "costs": 'costs',
        "costs_error": 'costsError',
        "costs_internal": 'costsInternal',
        "costs_internal_error": 'costsInternalError',
        "proceeds": 'proceeds',
        "proceeds_error": 'proceedsError',
        "proceeds_internal": 'proceedsInternal',
        "proceeds_internal_error": 'proceedsInternalError',
        "currency_id": 'currencyId',
        "mtype": 'type'
    }

    _optionals = [
        'costs',
        'costs_error',
        'costs_internal',
        'costs_internal_error',
        'proceeds',
        'proceeds_error',
        'proceeds_internal',
        'proceeds_internal_error',
        'currency_id',
        'mtype',
    ]

    def __init__(self,
                 costs=APIHelper.SKIP,
                 costs_error=APIHelper.SKIP,
                 costs_internal=APIHelper.SKIP,
                 costs_internal_error=APIHelper.SKIP,
                 proceeds=APIHelper.SKIP,
                 proceeds_error=APIHelper.SKIP,
                 proceeds_internal=APIHelper.SKIP,
                 proceeds_internal_error=APIHelper.SKIP,
                 currency_id=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the LISPublicOrderInvoiceData class"""

        # Initialize members of the class
        if costs is not APIHelper.SKIP:
            self.costs = costs 
        if costs_error is not APIHelper.SKIP:
            self.costs_error = costs_error 
        if costs_internal is not APIHelper.SKIP:
            self.costs_internal = costs_internal 
        if costs_internal_error is not APIHelper.SKIP:
            self.costs_internal_error = costs_internal_error 
        if proceeds is not APIHelper.SKIP:
            self.proceeds = proceeds 
        if proceeds_error is not APIHelper.SKIP:
            self.proceeds_error = proceeds_error 
        if proceeds_internal is not APIHelper.SKIP:
            self.proceeds_internal = proceeds_internal 
        if proceeds_internal_error is not APIHelper.SKIP:
            self.proceeds_internal_error = proceeds_internal_error 
        if currency_id is not APIHelper.SKIP:
            self.currency_id = currency_id 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        costs = dictionary.get("costs") if dictionary.get("costs") else APIHelper.SKIP
        costs_error = dictionary.get("costsError") if "costsError" in dictionary.keys() else APIHelper.SKIP
        costs_internal = dictionary.get("costsInternal") if dictionary.get("costsInternal") else APIHelper.SKIP
        costs_internal_error = dictionary.get("costsInternalError") if "costsInternalError" in dictionary.keys() else APIHelper.SKIP
        proceeds = dictionary.get("proceeds") if dictionary.get("proceeds") else APIHelper.SKIP
        proceeds_error = dictionary.get("proceedsError") if "proceedsError" in dictionary.keys() else APIHelper.SKIP
        proceeds_internal = dictionary.get("proceedsInternal") if dictionary.get("proceedsInternal") else APIHelper.SKIP
        proceeds_internal_error = dictionary.get("proceedsInternalError") if "proceedsInternalError" in dictionary.keys() else APIHelper.SKIP
        currency_id = dictionary.get("currencyId") if dictionary.get("currencyId") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(costs,
                   costs_error,
                   costs_internal,
                   costs_internal_error,
                   proceeds,
                   proceeds_error,
                   proceeds_internal,
                   proceeds_internal_error,
                   currency_id,
                   mtype)
