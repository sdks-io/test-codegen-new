# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_extended_data_table_record import LISPublicExtendedDataTableRecord


class LISPublicCustomerContactPerson(object):

    """Implementation of the 'LISPublicCustomerContactPerson' model.

    The LISCustomerContactPerson data contract.

    Attributes:
        transport_types (list of string): Gets or sets the transport types.
        customer_contact_person_id (int): Gets or sets
            CustomerContactPersonId.
        customer_id (int): Gets or sets CustomerId.
        name (string): Gets or sets Name.
        forename (string): Gets or sets Forename.
        mc (string): Gets or sets MC.
        title (string): Gets or sets Title.
        gender (string): Gets or sets Gender.
        role (string): Gets or sets Function.
        activity (string): Gets or sets Activity.
        work_area (string): Gets or sets WorkArea.
        phone_business_1 (string): Gets or sets PhoneBusiness1.
        phone_business_2 (string): Gets or sets PhoneBusiness2.
        mobile_business (string): Gets or sets MobileBusiness.
        e_mail_business (string): Gets or sets EMailBusiness.
        fax_business (string): Gets or sets FaxBusiness.
        information_business (string): Gets or sets InformationBusiness.
        cost_center_id (string): Gets or sets CostCenterId.
        phone (string): Gets or sets Phone.
        mobile (string): Gets or sets Mobile.
        e_mail (string): Gets or sets EMail.
        fax (string): Gets or sets Fax.
        city (string): Gets or sets City.
        city_district (string): Gets or sets CityDistrict.
        zip_code (string): Gets or sets ZipCode.
        street (string): Gets or sets Street.
        information (string): Gets or sets Information.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.
        win_sped_user_id (string): Gets or sets WinSpedUserId.
        signature_prefix (string): Gets or sets SignaturePrefix.
        server_user (string): Gets or sets ServerUser.
        server_password (string): Gets or sets ServerPassword.
        date_of_birth (datetime): Gets or sets DateOfBirth.
        serial_e_mail (int): Gets or sets SerialEMail.
        tapi_line (string): Gets or sets TapiLine.
        extended_fields (LISPublicExtendedDataTableRecord): This class
            represents a row within an extended table. Therefor it holds a 
            collection of
            {LIS.NetSped.PublicServiceLayer.Models.Customer.ExtTables.LISPublic
            ExtendedDataField}.
        country_code (string): Gets or sets the country code.
        person_role (PersonRoleEnum): Gets or sets the person role.
        is_updated (bool): TODO: type description here.
        is_deleted (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transport_types": 'transportTypes',
        "customer_contact_person_id": 'customerContactPersonId',
        "customer_id": 'customerId',
        "name": 'name',
        "forename": 'forename',
        "mc": 'mc',
        "title": 'title',
        "gender": 'gender',
        "role": 'role',
        "activity": 'activity',
        "work_area": 'workArea',
        "phone_business_1": 'phoneBusiness1',
        "phone_business_2": 'phoneBusiness2',
        "mobile_business": 'mobileBusiness',
        "e_mail_business": 'eMailBusiness',
        "fax_business": 'faxBusiness',
        "information_business": 'informationBusiness',
        "cost_center_id": 'costCenterId',
        "phone": 'phone',
        "mobile": 'mobile',
        "e_mail": 'eMail',
        "fax": 'fax',
        "city": 'city',
        "city_district": 'cityDistrict',
        "zip_code": 'zipCode',
        "street": 'street',
        "information": 'information',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "win_sped_user_id": 'winSpedUserId',
        "signature_prefix": 'signaturePrefix',
        "server_user": 'serverUser',
        "server_password": 'serverPassword',
        "date_of_birth": 'dateOfBirth',
        "serial_e_mail": 'serialEMail',
        "tapi_line": 'tapiLine',
        "extended_fields": 'extendedFields',
        "country_code": 'countryCode',
        "person_role": 'personRole',
        "is_updated": 'isUpdated',
        "is_deleted": 'isDeleted'
    }

    _optionals = [
        'transport_types',
        'customer_contact_person_id',
        'customer_id',
        'name',
        'forename',
        'mc',
        'title',
        'gender',
        'role',
        'activity',
        'work_area',
        'phone_business_1',
        'phone_business_2',
        'mobile_business',
        'e_mail_business',
        'fax_business',
        'information_business',
        'cost_center_id',
        'phone',
        'mobile',
        'e_mail',
        'fax',
        'city',
        'city_district',
        'zip_code',
        'street',
        'information',
        'changed_on',
        'changed_by',
        'win_sped_user_id',
        'signature_prefix',
        'server_user',
        'server_password',
        'date_of_birth',
        'serial_e_mail',
        'tapi_line',
        'extended_fields',
        'country_code',
        'person_role',
        'is_updated',
        'is_deleted',
    ]

    def __init__(self,
                 transport_types=APIHelper.SKIP,
                 customer_contact_person_id=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 forename=APIHelper.SKIP,
                 mc=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 gender=APIHelper.SKIP,
                 role=APIHelper.SKIP,
                 activity=APIHelper.SKIP,
                 work_area=APIHelper.SKIP,
                 phone_business_1=APIHelper.SKIP,
                 phone_business_2=APIHelper.SKIP,
                 mobile_business=APIHelper.SKIP,
                 e_mail_business=APIHelper.SKIP,
                 fax_business=APIHelper.SKIP,
                 information_business=APIHelper.SKIP,
                 cost_center_id=APIHelper.SKIP,
                 phone=APIHelper.SKIP,
                 mobile=APIHelper.SKIP,
                 e_mail=APIHelper.SKIP,
                 fax=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 city_district=APIHelper.SKIP,
                 zip_code=APIHelper.SKIP,
                 street=APIHelper.SKIP,
                 information=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 win_sped_user_id=APIHelper.SKIP,
                 signature_prefix=APIHelper.SKIP,
                 server_user=APIHelper.SKIP,
                 server_password=APIHelper.SKIP,
                 date_of_birth=APIHelper.SKIP,
                 serial_e_mail=APIHelper.SKIP,
                 tapi_line=APIHelper.SKIP,
                 extended_fields=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 person_role=APIHelper.SKIP,
                 is_updated=APIHelper.SKIP,
                 is_deleted=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerContactPerson class"""

        # Initialize members of the class
        if transport_types is not APIHelper.SKIP:
            self.transport_types = transport_types 
        if customer_contact_person_id is not APIHelper.SKIP:
            self.customer_contact_person_id = customer_contact_person_id 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if forename is not APIHelper.SKIP:
            self.forename = forename 
        if mc is not APIHelper.SKIP:
            self.mc = mc 
        if title is not APIHelper.SKIP:
            self.title = title 
        if gender is not APIHelper.SKIP:
            self.gender = gender 
        if role is not APIHelper.SKIP:
            self.role = role 
        if activity is not APIHelper.SKIP:
            self.activity = activity 
        if work_area is not APIHelper.SKIP:
            self.work_area = work_area 
        if phone_business_1 is not APIHelper.SKIP:
            self.phone_business_1 = phone_business_1 
        if phone_business_2 is not APIHelper.SKIP:
            self.phone_business_2 = phone_business_2 
        if mobile_business is not APIHelper.SKIP:
            self.mobile_business = mobile_business 
        if e_mail_business is not APIHelper.SKIP:
            self.e_mail_business = e_mail_business 
        if fax_business is not APIHelper.SKIP:
            self.fax_business = fax_business 
        if information_business is not APIHelper.SKIP:
            self.information_business = information_business 
        if cost_center_id is not APIHelper.SKIP:
            self.cost_center_id = cost_center_id 
        if phone is not APIHelper.SKIP:
            self.phone = phone 
        if mobile is not APIHelper.SKIP:
            self.mobile = mobile 
        if e_mail is not APIHelper.SKIP:
            self.e_mail = e_mail 
        if fax is not APIHelper.SKIP:
            self.fax = fax 
        if city is not APIHelper.SKIP:
            self.city = city 
        if city_district is not APIHelper.SKIP:
            self.city_district = city_district 
        if zip_code is not APIHelper.SKIP:
            self.zip_code = zip_code 
        if street is not APIHelper.SKIP:
            self.street = street 
        if information is not APIHelper.SKIP:
            self.information = information 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if win_sped_user_id is not APIHelper.SKIP:
            self.win_sped_user_id = win_sped_user_id 
        if signature_prefix is not APIHelper.SKIP:
            self.signature_prefix = signature_prefix 
        if server_user is not APIHelper.SKIP:
            self.server_user = server_user 
        if server_password is not APIHelper.SKIP:
            self.server_password = server_password 
        if date_of_birth is not APIHelper.SKIP:
            self.date_of_birth = APIHelper.RFC3339DateTime(date_of_birth) if date_of_birth else None 
        if serial_e_mail is not APIHelper.SKIP:
            self.serial_e_mail = serial_e_mail 
        if tapi_line is not APIHelper.SKIP:
            self.tapi_line = tapi_line 
        if extended_fields is not APIHelper.SKIP:
            self.extended_fields = extended_fields 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if person_role is not APIHelper.SKIP:
            self.person_role = person_role 
        if is_updated is not APIHelper.SKIP:
            self.is_updated = is_updated 
        if is_deleted is not APIHelper.SKIP:
            self.is_deleted = is_deleted 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        transport_types = dictionary.get("transportTypes") if dictionary.get("transportTypes") else APIHelper.SKIP
        customer_contact_person_id = dictionary.get("customerContactPersonId") if dictionary.get("customerContactPersonId") else APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        forename = dictionary.get("forename") if dictionary.get("forename") else APIHelper.SKIP
        mc = dictionary.get("mc") if dictionary.get("mc") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        gender = dictionary.get("gender") if dictionary.get("gender") else APIHelper.SKIP
        role = dictionary.get("role") if dictionary.get("role") else APIHelper.SKIP
        activity = dictionary.get("activity") if dictionary.get("activity") else APIHelper.SKIP
        work_area = dictionary.get("workArea") if dictionary.get("workArea") else APIHelper.SKIP
        phone_business_1 = dictionary.get("phoneBusiness1") if dictionary.get("phoneBusiness1") else APIHelper.SKIP
        phone_business_2 = dictionary.get("phoneBusiness2") if dictionary.get("phoneBusiness2") else APIHelper.SKIP
        mobile_business = dictionary.get("mobileBusiness") if dictionary.get("mobileBusiness") else APIHelper.SKIP
        e_mail_business = dictionary.get("eMailBusiness") if dictionary.get("eMailBusiness") else APIHelper.SKIP
        fax_business = dictionary.get("faxBusiness") if dictionary.get("faxBusiness") else APIHelper.SKIP
        information_business = dictionary.get("informationBusiness") if dictionary.get("informationBusiness") else APIHelper.SKIP
        cost_center_id = dictionary.get("costCenterId") if dictionary.get("costCenterId") else APIHelper.SKIP
        phone = dictionary.get("phone") if dictionary.get("phone") else APIHelper.SKIP
        mobile = dictionary.get("mobile") if dictionary.get("mobile") else APIHelper.SKIP
        e_mail = dictionary.get("eMail") if dictionary.get("eMail") else APIHelper.SKIP
        fax = dictionary.get("fax") if dictionary.get("fax") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        city_district = dictionary.get("cityDistrict") if dictionary.get("cityDistrict") else APIHelper.SKIP
        zip_code = dictionary.get("zipCode") if dictionary.get("zipCode") else APIHelper.SKIP
        street = dictionary.get("street") if dictionary.get("street") else APIHelper.SKIP
        information = dictionary.get("information") if dictionary.get("information") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        win_sped_user_id = dictionary.get("winSpedUserId") if dictionary.get("winSpedUserId") else APIHelper.SKIP
        signature_prefix = dictionary.get("signaturePrefix") if dictionary.get("signaturePrefix") else APIHelper.SKIP
        server_user = dictionary.get("serverUser") if dictionary.get("serverUser") else APIHelper.SKIP
        server_password = dictionary.get("serverPassword") if dictionary.get("serverPassword") else APIHelper.SKIP
        date_of_birth = APIHelper.RFC3339DateTime.from_value(dictionary.get("dateOfBirth")).datetime if dictionary.get("dateOfBirth") else APIHelper.SKIP
        serial_e_mail = dictionary.get("serialEMail") if dictionary.get("serialEMail") else APIHelper.SKIP
        tapi_line = dictionary.get("tapiLine") if dictionary.get("tapiLine") else APIHelper.SKIP
        extended_fields = LISPublicExtendedDataTableRecord.from_dictionary(dictionary.get('extendedFields')) if 'extendedFields' in dictionary.keys() else APIHelper.SKIP
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else APIHelper.SKIP
        person_role = dictionary.get("personRole") if dictionary.get("personRole") else APIHelper.SKIP
        is_updated = dictionary.get("isUpdated") if "isUpdated" in dictionary.keys() else APIHelper.SKIP
        is_deleted = dictionary.get("isDeleted") if "isDeleted" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(transport_types,
                   customer_contact_person_id,
                   customer_id,
                   name,
                   forename,
                   mc,
                   title,
                   gender,
                   role,
                   activity,
                   work_area,
                   phone_business_1,
                   phone_business_2,
                   mobile_business,
                   e_mail_business,
                   fax_business,
                   information_business,
                   cost_center_id,
                   phone,
                   mobile,
                   e_mail,
                   fax,
                   city,
                   city_district,
                   zip_code,
                   street,
                   information,
                   changed_on,
                   changed_by,
                   win_sped_user_id,
                   signature_prefix,
                   server_user,
                   server_password,
                   date_of_birth,
                   serial_e_mail,
                   tapi_line,
                   extended_fields,
                   country_code,
                   person_role,
                   is_updated,
                   is_deleted)
