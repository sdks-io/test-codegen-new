# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerMDMScope(object):

    """Implementation of the 'LISPublicCustomerMDMScope' model.

    The LISCustomerMDMScope data contract.

    Attributes:
        customer_id (int): Gets or sets CustomerId.
        matchcode (string): Gets or sets Matchcode.
        name_1 (string): Gets or sets Name1.
        name_2 (string): Gets or sets Name2.
        name_3 (string): Gets or sets Name3.
        street (string): Gets or sets Street.
        country_code (string): Gets or sets CountryCode.
        zip (string): Gets or sets Zip.
        city (string): Gets or sets City.
        city_district (string): Gets or sets the city district.
        post_office_box (string): Gets or sets PostOfficeBox.
        post_office_zip_code (string): Gets or sets PostOfficeZipCode.
        tax_id_number (string): Gets or sets TaxIdNumber.
        tax_number (string): Gets or sets TaxNumber.
        search_procedure (SearchProcedureEnum): Gets or sets SearchProcedure.
        limit_debit (int): Gets or sets LimitDebit.
        limit_credit (int): Gets or sets LimitCredit.
        debit_print_currency (string): Gets or sets DebitPrintCurrency.
        credit_print_currency (string): Gets or sets CreditPrintCurrency.
        terms_of_payment_debitor (int): Gets or sets TermsOfPaymentDebitor.
        terms_of_payment_creditor (int): Gets or sets TermsOfPaymentCreditor.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "matchcode": 'matchcode',
        "name_1": 'name1',
        "name_2": 'name2',
        "name_3": 'name3',
        "street": 'street',
        "country_code": 'countryCode',
        "zip": 'zip',
        "city": 'city',
        "city_district": 'cityDistrict',
        "post_office_box": 'postOfficeBox',
        "post_office_zip_code": 'postOfficeZipCode',
        "tax_id_number": 'taxIdNumber',
        "tax_number": 'taxNumber',
        "search_procedure": 'searchProcedure',
        "limit_debit": 'limitDebit',
        "limit_credit": 'limitCredit',
        "debit_print_currency": 'debitPrintCurrency',
        "credit_print_currency": 'creditPrintCurrency',
        "terms_of_payment_debitor": 'termsOfPaymentDebitor',
        "terms_of_payment_creditor": 'termsOfPaymentCreditor'
    }

    _optionals = [
        'customer_id',
        'matchcode',
        'name_1',
        'name_2',
        'name_3',
        'street',
        'country_code',
        'zip',
        'city',
        'city_district',
        'post_office_box',
        'post_office_zip_code',
        'tax_id_number',
        'tax_number',
        'search_procedure',
        'limit_debit',
        'limit_credit',
        'debit_print_currency',
        'credit_print_currency',
        'terms_of_payment_debitor',
        'terms_of_payment_creditor',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 matchcode=APIHelper.SKIP,
                 name_1=APIHelper.SKIP,
                 name_2=APIHelper.SKIP,
                 name_3=APIHelper.SKIP,
                 street=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 zip=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 city_district=APIHelper.SKIP,
                 post_office_box=APIHelper.SKIP,
                 post_office_zip_code=APIHelper.SKIP,
                 tax_id_number=APIHelper.SKIP,
                 tax_number=APIHelper.SKIP,
                 search_procedure=APIHelper.SKIP,
                 limit_debit=APIHelper.SKIP,
                 limit_credit=APIHelper.SKIP,
                 debit_print_currency=APIHelper.SKIP,
                 credit_print_currency=APIHelper.SKIP,
                 terms_of_payment_debitor=APIHelper.SKIP,
                 terms_of_payment_creditor=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerMDMScope class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if matchcode is not APIHelper.SKIP:
            self.matchcode = matchcode 
        if name_1 is not APIHelper.SKIP:
            self.name_1 = name_1 
        if name_2 is not APIHelper.SKIP:
            self.name_2 = name_2 
        if name_3 is not APIHelper.SKIP:
            self.name_3 = name_3 
        if street is not APIHelper.SKIP:
            self.street = street 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if zip is not APIHelper.SKIP:
            self.zip = zip 
        if city is not APIHelper.SKIP:
            self.city = city 
        if city_district is not APIHelper.SKIP:
            self.city_district = city_district 
        if post_office_box is not APIHelper.SKIP:
            self.post_office_box = post_office_box 
        if post_office_zip_code is not APIHelper.SKIP:
            self.post_office_zip_code = post_office_zip_code 
        if tax_id_number is not APIHelper.SKIP:
            self.tax_id_number = tax_id_number 
        if tax_number is not APIHelper.SKIP:
            self.tax_number = tax_number 
        if search_procedure is not APIHelper.SKIP:
            self.search_procedure = search_procedure 
        if limit_debit is not APIHelper.SKIP:
            self.limit_debit = limit_debit 
        if limit_credit is not APIHelper.SKIP:
            self.limit_credit = limit_credit 
        if debit_print_currency is not APIHelper.SKIP:
            self.debit_print_currency = debit_print_currency 
        if credit_print_currency is not APIHelper.SKIP:
            self.credit_print_currency = credit_print_currency 
        if terms_of_payment_debitor is not APIHelper.SKIP:
            self.terms_of_payment_debitor = terms_of_payment_debitor 
        if terms_of_payment_creditor is not APIHelper.SKIP:
            self.terms_of_payment_creditor = terms_of_payment_creditor 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        matchcode = dictionary.get("matchcode") if dictionary.get("matchcode") else APIHelper.SKIP
        name_1 = dictionary.get("name1") if dictionary.get("name1") else APIHelper.SKIP
        name_2 = dictionary.get("name2") if dictionary.get("name2") else APIHelper.SKIP
        name_3 = dictionary.get("name3") if dictionary.get("name3") else APIHelper.SKIP
        street = dictionary.get("street") if dictionary.get("street") else APIHelper.SKIP
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else APIHelper.SKIP
        zip = dictionary.get("zip") if dictionary.get("zip") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        city_district = dictionary.get("cityDistrict") if dictionary.get("cityDistrict") else APIHelper.SKIP
        post_office_box = dictionary.get("postOfficeBox") if dictionary.get("postOfficeBox") else APIHelper.SKIP
        post_office_zip_code = dictionary.get("postOfficeZipCode") if dictionary.get("postOfficeZipCode") else APIHelper.SKIP
        tax_id_number = dictionary.get("taxIdNumber") if dictionary.get("taxIdNumber") else APIHelper.SKIP
        tax_number = dictionary.get("taxNumber") if dictionary.get("taxNumber") else APIHelper.SKIP
        search_procedure = dictionary.get("searchProcedure") if dictionary.get("searchProcedure") else APIHelper.SKIP
        limit_debit = dictionary.get("limitDebit") if dictionary.get("limitDebit") else APIHelper.SKIP
        limit_credit = dictionary.get("limitCredit") if dictionary.get("limitCredit") else APIHelper.SKIP
        debit_print_currency = dictionary.get("debitPrintCurrency") if dictionary.get("debitPrintCurrency") else APIHelper.SKIP
        credit_print_currency = dictionary.get("creditPrintCurrency") if dictionary.get("creditPrintCurrency") else APIHelper.SKIP
        terms_of_payment_debitor = dictionary.get("termsOfPaymentDebitor") if dictionary.get("termsOfPaymentDebitor") else APIHelper.SKIP
        terms_of_payment_creditor = dictionary.get("termsOfPaymentCreditor") if dictionary.get("termsOfPaymentCreditor") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   matchcode,
                   name_1,
                   name_2,
                   name_3,
                   street,
                   country_code,
                   zip,
                   city,
                   city_district,
                   post_office_box,
                   post_office_zip_code,
                   tax_id_number,
                   tax_number,
                   search_procedure,
                   limit_debit,
                   limit_credit,
                   debit_print_currency,
                   credit_print_currency,
                   terms_of_payment_debitor,
                   terms_of_payment_creditor)
