# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_wms_article_ean import LISPublicWMSArticleEan
from lispublicservices.models.lis_public_wms_article_unit import LISPublicWMSArticleUnit


class LISPublicWMSArticle(object):

    """Implementation of the 'LISPublicWMSArticle' model.

    The LISPublicWMSArticle data contract.

    Attributes:
        article_units (list of LISPublicWMSArticleUnit): TODO: type
            description here.
        article_eans (list of LISPublicWMSArticleEan): TODO: type description
            here.
        article_id (int): Gets or sets ArticleId.
        company_id (int): Gets or sets CompanyId.
        changed_by (string): Gets or sets ChangedBy.
        changed_on (datetime): Gets or sets ChangedOn.
        created_by (string): Gets or sets ChangedBy.
        created_on (datetime): Gets or sets ChangedOn.
        article_number (string): Gets or sets ArticleNumber.
        customer_id (int): Gets or sets Client.
        name_1 (string): Gets or sets Name1.
        name_2 (string): Gets or sets Name2.
        name_3 (string): Gets or sets Name3.
        name_4 (string): Gets or sets Name4.
        article_short (string): Gets or sets ArticleShort.
        matchcode (string): Gets or sets Matchcode.
        product_group (string): Gets or sets ProductGroup.
        always_batched (bool): Gets or sets AlwaysBatched.
        serial_number_required (bool): Gets or sets SerialNumberRequiered.
        subject_to_ed (bool): Gets or sets SubjectToMHD.
        bom_item (bool): Gets or sets BOMItem.
        article_parts_id (int): Gets or sets ArticlePartsId.
        not_commissionable (bool): Gets or sets NotCommissionable.
        storage_unit_id (int): Gets or sets StorageUnitId.
        is_new (bool): Gets or sets a value indicating whether this entity
            will be inserted or updated.
        original_hash_snapshot (string): Gets or sets the original hash
            snapshot.
        original_snapshot (string): Gets or sets the original snapshot.
        current_snapshot (string): Gets or sets the current snapshot.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "article_units": 'articleUnits',
        "article_eans": 'articleEans',
        "article_id": 'articleId',
        "company_id": 'companyId',
        "changed_by": 'changedBy',
        "changed_on": 'changedOn',
        "created_by": 'createdBy',
        "created_on": 'createdOn',
        "article_number": 'articleNumber',
        "customer_id": 'customerId',
        "name_1": 'name1',
        "name_2": 'name2',
        "name_3": 'name3',
        "name_4": 'name4',
        "article_short": 'articleShort',
        "matchcode": 'matchcode',
        "product_group": 'productGroup',
        "always_batched": 'alwaysBatched',
        "serial_number_required": 'serialNumberRequired',
        "subject_to_ed": 'subjectToED',
        "bom_item": 'bomItem',
        "article_parts_id": 'articlePartsId',
        "not_commissionable": 'notCommissionable',
        "storage_unit_id": 'storageUnitId',
        "is_new": 'isNew',
        "original_hash_snapshot": 'originalHashSnapshot',
        "original_snapshot": 'originalSnapshot',
        "current_snapshot": 'currentSnapshot'
    }

    _optionals = [
        'article_units',
        'article_eans',
        'article_id',
        'company_id',
        'changed_by',
        'changed_on',
        'created_by',
        'created_on',
        'article_number',
        'customer_id',
        'name_1',
        'name_2',
        'name_3',
        'name_4',
        'article_short',
        'matchcode',
        'product_group',
        'always_batched',
        'serial_number_required',
        'subject_to_ed',
        'bom_item',
        'article_parts_id',
        'not_commissionable',
        'storage_unit_id',
        'is_new',
        'original_hash_snapshot',
        'original_snapshot',
        'current_snapshot',
    ]

    def __init__(self,
                 article_units=APIHelper.SKIP,
                 article_eans=APIHelper.SKIP,
                 article_id=APIHelper.SKIP,
                 company_id=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 article_number=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 name_1=APIHelper.SKIP,
                 name_2=APIHelper.SKIP,
                 name_3=APIHelper.SKIP,
                 name_4=APIHelper.SKIP,
                 article_short=APIHelper.SKIP,
                 matchcode=APIHelper.SKIP,
                 product_group=APIHelper.SKIP,
                 always_batched=APIHelper.SKIP,
                 serial_number_required=APIHelper.SKIP,
                 subject_to_ed=APIHelper.SKIP,
                 bom_item=APIHelper.SKIP,
                 article_parts_id=APIHelper.SKIP,
                 not_commissionable=APIHelper.SKIP,
                 storage_unit_id=APIHelper.SKIP,
                 is_new=APIHelper.SKIP,
                 original_hash_snapshot=APIHelper.SKIP,
                 original_snapshot=APIHelper.SKIP,
                 current_snapshot=APIHelper.SKIP):
        """Constructor for the LISPublicWMSArticle class"""

        # Initialize members of the class
        if article_units is not APIHelper.SKIP:
            self.article_units = article_units 
        if article_eans is not APIHelper.SKIP:
            self.article_eans = article_eans 
        if article_id is not APIHelper.SKIP:
            self.article_id = article_id 
        if company_id is not APIHelper.SKIP:
            self.company_id = company_id 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if article_number is not APIHelper.SKIP:
            self.article_number = article_number 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if name_1 is not APIHelper.SKIP:
            self.name_1 = name_1 
        if name_2 is not APIHelper.SKIP:
            self.name_2 = name_2 
        if name_3 is not APIHelper.SKIP:
            self.name_3 = name_3 
        if name_4 is not APIHelper.SKIP:
            self.name_4 = name_4 
        if article_short is not APIHelper.SKIP:
            self.article_short = article_short 
        if matchcode is not APIHelper.SKIP:
            self.matchcode = matchcode 
        if product_group is not APIHelper.SKIP:
            self.product_group = product_group 
        if always_batched is not APIHelper.SKIP:
            self.always_batched = always_batched 
        if serial_number_required is not APIHelper.SKIP:
            self.serial_number_required = serial_number_required 
        if subject_to_ed is not APIHelper.SKIP:
            self.subject_to_ed = subject_to_ed 
        if bom_item is not APIHelper.SKIP:
            self.bom_item = bom_item 
        if article_parts_id is not APIHelper.SKIP:
            self.article_parts_id = article_parts_id 
        if not_commissionable is not APIHelper.SKIP:
            self.not_commissionable = not_commissionable 
        if storage_unit_id is not APIHelper.SKIP:
            self.storage_unit_id = storage_unit_id 
        if is_new is not APIHelper.SKIP:
            self.is_new = is_new 
        if original_hash_snapshot is not APIHelper.SKIP:
            self.original_hash_snapshot = original_hash_snapshot 
        if original_snapshot is not APIHelper.SKIP:
            self.original_snapshot = original_snapshot 
        if current_snapshot is not APIHelper.SKIP:
            self.current_snapshot = current_snapshot 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        article_units = None
        if dictionary.get('articleUnits') is not None:
            article_units = [LISPublicWMSArticleUnit.from_dictionary(x) for x in dictionary.get('articleUnits')]
        else:
            article_units = APIHelper.SKIP
        article_eans = None
        if dictionary.get('articleEans') is not None:
            article_eans = [LISPublicWMSArticleEan.from_dictionary(x) for x in dictionary.get('articleEans')]
        else:
            article_eans = APIHelper.SKIP
        article_id = dictionary.get("articleId") if dictionary.get("articleId") else APIHelper.SKIP
        company_id = dictionary.get("companyId") if dictionary.get("companyId") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        article_number = dictionary.get("articleNumber") if dictionary.get("articleNumber") else APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        name_1 = dictionary.get("name1") if dictionary.get("name1") else APIHelper.SKIP
        name_2 = dictionary.get("name2") if dictionary.get("name2") else APIHelper.SKIP
        name_3 = dictionary.get("name3") if dictionary.get("name3") else APIHelper.SKIP
        name_4 = dictionary.get("name4") if dictionary.get("name4") else APIHelper.SKIP
        article_short = dictionary.get("articleShort") if dictionary.get("articleShort") else APIHelper.SKIP
        matchcode = dictionary.get("matchcode") if dictionary.get("matchcode") else APIHelper.SKIP
        product_group = dictionary.get("productGroup") if dictionary.get("productGroup") else APIHelper.SKIP
        always_batched = dictionary.get("alwaysBatched") if "alwaysBatched" in dictionary.keys() else APIHelper.SKIP
        serial_number_required = dictionary.get("serialNumberRequired") if "serialNumberRequired" in dictionary.keys() else APIHelper.SKIP
        subject_to_ed = dictionary.get("subjectToED") if "subjectToED" in dictionary.keys() else APIHelper.SKIP
        bom_item = dictionary.get("bomItem") if "bomItem" in dictionary.keys() else APIHelper.SKIP
        article_parts_id = dictionary.get("articlePartsId") if dictionary.get("articlePartsId") else APIHelper.SKIP
        not_commissionable = dictionary.get("notCommissionable") if "notCommissionable" in dictionary.keys() else APIHelper.SKIP
        storage_unit_id = dictionary.get("storageUnitId") if dictionary.get("storageUnitId") else APIHelper.SKIP
        is_new = dictionary.get("isNew") if "isNew" in dictionary.keys() else APIHelper.SKIP
        original_hash_snapshot = dictionary.get("originalHashSnapshot") if dictionary.get("originalHashSnapshot") else APIHelper.SKIP
        original_snapshot = dictionary.get("originalSnapshot") if dictionary.get("originalSnapshot") else APIHelper.SKIP
        current_snapshot = dictionary.get("currentSnapshot") if dictionary.get("currentSnapshot") else APIHelper.SKIP
        # Return an object of this model
        return cls(article_units,
                   article_eans,
                   article_id,
                   company_id,
                   changed_by,
                   changed_on,
                   created_by,
                   created_on,
                   article_number,
                   customer_id,
                   name_1,
                   name_2,
                   name_3,
                   name_4,
                   article_short,
                   matchcode,
                   product_group,
                   always_batched,
                   serial_number_required,
                   subject_to_ed,
                   bom_item,
                   article_parts_id,
                   not_commissionable,
                   storage_unit_id,
                   is_new,
                   original_hash_snapshot,
                   original_snapshot,
                   current_snapshot)
