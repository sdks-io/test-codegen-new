# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicOrderDGood(object):

    """Implementation of the 'LISPublicOrderDGood' model.

    The LISOrderDGood data contract.

    Attributes:
        d_good_id (int): Gets or sets DGoodId.
        order_id (int): Gets or sets OrderId.
        order_detail_id (int): Gets or sets OrderDetailId.
        un_number_id (int): Gets or sets UNNumberId.
        un_number (string): Gets or sets UNNumber.
        transport_category (string): Gets or sets TransportCategory.
        un_class (string): Gets or sets UNClass.
        un_digit (string): Gets or sets UNDigit.
        un_character (string): Gets or sets UNCharacter.
        material_name (string): Gets or sets MaterialName.
        chemical_name (string): Gets or sets ChemicalName.
        nos_entrie (string): Gets or sets NOSEntrie.
        material_amount (float): Gets or sets MaterialAmount.
        factor (float): Gets or sets Factor.
        score (float): Gets or sets Score.
        code (string): Gets or sets Code.
        kemler_number (string): Gets or sets KemlerNumber.
        limited_quantity (string): Gets or sets LimitedQuantity.
        package_type (string): Gets or sets PackageType.
        packages (float): Gets or sets Packages.
        weight (float): Gets or sets Weight.
        gross_weight (float): Gets or sets GrossWeight.
        net_weight (float): Gets or sets NetWeight.
        cubic_decimeter (float): Gets or sets CubicDecimeter.
        flash_point (float): Gets or sets FlashPoint.
        label_1 (string): Gets or sets Label1.
        label_2 (string): Gets or sets Label2.
        label_3 (string): Gets or sets Label3.
        label_4 (string): Gets or sets Label4.
        special_provisions (string): Gets or sets SpecialProvisions.
        tunnelcode (string): Gets or sets Tunnelcode.
        compatibility_group (string): Gets or sets CompatibilityGroup.
        ecological_menace_flag (EcologicalMenaceFlagEnum): Gets or sets
            EcologicalMenaceFlag.
        disposal_observation (DisposalObservationEnum): Gets or sets
            DisposalObservation.
        group_id (int): Gets or sets GroupId.
        un_type (UnTypeEnum): Gets or sets UNType.
        track_changes (bool): Gets or sets TrackChanges.
        has_changes (bool): Gets or sets HasChanges.
        pi_pass_nr (string): Gets or sets the pi pass nr.
        pi_pass_max (string): Gets or sets the pi pass maximum.
        ypi_pass_nr (string): Gets or sets the ypi pass nr.
        ypi_pass_max (string): Gets or sets the ypi pass maximum.
        pi_cargo_nr (string): Gets or sets the pi cargo nr.
        pi_cargo_max (string): Gets or sets the pi cargo maximum.
        erg_code (string): Gets or sets the erg code.
        em_s_nummer_1 (string): Gets or sets the em s nummer1.
        em_s_nummer_2 (string): Gets or sets the em s nummer2.
        composite_packaging (int): Gets or sets the composite packaging.
        reference_id (int): Gets or sets the reference identifier.
        reference_type (ReferenceTypeEnum): Gets or sets the type of the
            reference.
        route_determination (int): Gets or sets the route determination.
        serious_hazard (int): Gets or sets the serious hazard.
        excepted_quantities (string): Gets or sets the excepted quantities.
        sort_index (int): Gets or sets the index of the sort.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "d_good_id": 'dGoodId',
        "order_id": 'orderId',
        "order_detail_id": 'orderDetailId',
        "un_number_id": 'unNumberId',
        "un_number": 'unNumber',
        "transport_category": 'transportCategory',
        "un_class": 'unClass',
        "un_digit": 'unDigit',
        "un_character": 'unCharacter',
        "material_name": 'materialName',
        "chemical_name": 'chemicalName',
        "nos_entrie": 'nosEntrie',
        "material_amount": 'materialAmount',
        "factor": 'factor',
        "score": 'score',
        "code": 'code',
        "kemler_number": 'kemlerNumber',
        "limited_quantity": 'limitedQuantity',
        "package_type": 'packageType',
        "packages": 'packages',
        "weight": 'weight',
        "gross_weight": 'grossWeight',
        "net_weight": 'netWeight',
        "cubic_decimeter": 'cubicDecimeter',
        "flash_point": 'flashPoint',
        "label_1": 'label1',
        "label_2": 'label2',
        "label_3": 'label3',
        "label_4": 'label4',
        "special_provisions": 'specialProvisions',
        "tunnelcode": 'tunnelcode',
        "compatibility_group": 'compatibilityGroup',
        "ecological_menace_flag": 'ecologicalMenaceFlag',
        "disposal_observation": 'disposalObservation',
        "group_id": 'groupId',
        "un_type": 'unType',
        "track_changes": 'trackChanges',
        "has_changes": 'hasChanges',
        "pi_pass_nr": 'piPassNr',
        "pi_pass_max": 'piPassMax',
        "ypi_pass_nr": 'ypiPassNr',
        "ypi_pass_max": 'ypiPassMax',
        "pi_cargo_nr": 'piCargoNr',
        "pi_cargo_max": 'piCargoMax',
        "erg_code": 'ergCode',
        "em_s_nummer_1": 'emSNummer1',
        "em_s_nummer_2": 'emSNummer2',
        "composite_packaging": 'compositePackaging',
        "reference_id": 'referenceId',
        "reference_type": 'referenceType',
        "route_determination": 'routeDetermination',
        "serious_hazard": 'seriousHazard',
        "excepted_quantities": 'exceptedQuantities',
        "sort_index": 'sortIndex'
    }

    _optionals = [
        'd_good_id',
        'order_id',
        'order_detail_id',
        'un_number_id',
        'un_number',
        'transport_category',
        'un_class',
        'un_digit',
        'un_character',
        'material_name',
        'chemical_name',
        'nos_entrie',
        'material_amount',
        'factor',
        'score',
        'code',
        'kemler_number',
        'limited_quantity',
        'package_type',
        'packages',
        'weight',
        'gross_weight',
        'net_weight',
        'cubic_decimeter',
        'flash_point',
        'label_1',
        'label_2',
        'label_3',
        'label_4',
        'special_provisions',
        'tunnelcode',
        'compatibility_group',
        'ecological_menace_flag',
        'disposal_observation',
        'group_id',
        'un_type',
        'track_changes',
        'has_changes',
        'pi_pass_nr',
        'pi_pass_max',
        'ypi_pass_nr',
        'ypi_pass_max',
        'pi_cargo_nr',
        'pi_cargo_max',
        'erg_code',
        'em_s_nummer_1',
        'em_s_nummer_2',
        'composite_packaging',
        'reference_id',
        'reference_type',
        'route_determination',
        'serious_hazard',
        'excepted_quantities',
        'sort_index',
    ]

    def __init__(self,
                 d_good_id=APIHelper.SKIP,
                 order_id=APIHelper.SKIP,
                 order_detail_id=APIHelper.SKIP,
                 un_number_id=APIHelper.SKIP,
                 un_number=APIHelper.SKIP,
                 transport_category=APIHelper.SKIP,
                 un_class=APIHelper.SKIP,
                 un_digit=APIHelper.SKIP,
                 un_character=APIHelper.SKIP,
                 material_name=APIHelper.SKIP,
                 chemical_name=APIHelper.SKIP,
                 nos_entrie=APIHelper.SKIP,
                 material_amount=APIHelper.SKIP,
                 factor=APIHelper.SKIP,
                 score=APIHelper.SKIP,
                 code=APIHelper.SKIP,
                 kemler_number=APIHelper.SKIP,
                 limited_quantity=APIHelper.SKIP,
                 package_type=APIHelper.SKIP,
                 packages=APIHelper.SKIP,
                 weight=APIHelper.SKIP,
                 gross_weight=APIHelper.SKIP,
                 net_weight=APIHelper.SKIP,
                 cubic_decimeter=APIHelper.SKIP,
                 flash_point=APIHelper.SKIP,
                 label_1=APIHelper.SKIP,
                 label_2=APIHelper.SKIP,
                 label_3=APIHelper.SKIP,
                 label_4=APIHelper.SKIP,
                 special_provisions=APIHelper.SKIP,
                 tunnelcode=APIHelper.SKIP,
                 compatibility_group=APIHelper.SKIP,
                 ecological_menace_flag=APIHelper.SKIP,
                 disposal_observation=APIHelper.SKIP,
                 group_id=APIHelper.SKIP,
                 un_type=APIHelper.SKIP,
                 track_changes=APIHelper.SKIP,
                 has_changes=APIHelper.SKIP,
                 pi_pass_nr=APIHelper.SKIP,
                 pi_pass_max=APIHelper.SKIP,
                 ypi_pass_nr=APIHelper.SKIP,
                 ypi_pass_max=APIHelper.SKIP,
                 pi_cargo_nr=APIHelper.SKIP,
                 pi_cargo_max=APIHelper.SKIP,
                 erg_code=APIHelper.SKIP,
                 em_s_nummer_1=APIHelper.SKIP,
                 em_s_nummer_2=APIHelper.SKIP,
                 composite_packaging=APIHelper.SKIP,
                 reference_id=APIHelper.SKIP,
                 reference_type=APIHelper.SKIP,
                 route_determination=APIHelper.SKIP,
                 serious_hazard=APIHelper.SKIP,
                 excepted_quantities=APIHelper.SKIP,
                 sort_index=APIHelper.SKIP):
        """Constructor for the LISPublicOrderDGood class"""

        # Initialize members of the class
        if d_good_id is not APIHelper.SKIP:
            self.d_good_id = d_good_id 
        if order_id is not APIHelper.SKIP:
            self.order_id = order_id 
        if order_detail_id is not APIHelper.SKIP:
            self.order_detail_id = order_detail_id 
        if un_number_id is not APIHelper.SKIP:
            self.un_number_id = un_number_id 
        if un_number is not APIHelper.SKIP:
            self.un_number = un_number 
        if transport_category is not APIHelper.SKIP:
            self.transport_category = transport_category 
        if un_class is not APIHelper.SKIP:
            self.un_class = un_class 
        if un_digit is not APIHelper.SKIP:
            self.un_digit = un_digit 
        if un_character is not APIHelper.SKIP:
            self.un_character = un_character 
        if material_name is not APIHelper.SKIP:
            self.material_name = material_name 
        if chemical_name is not APIHelper.SKIP:
            self.chemical_name = chemical_name 
        if nos_entrie is not APIHelper.SKIP:
            self.nos_entrie = nos_entrie 
        if material_amount is not APIHelper.SKIP:
            self.material_amount = material_amount 
        if factor is not APIHelper.SKIP:
            self.factor = factor 
        if score is not APIHelper.SKIP:
            self.score = score 
        if code is not APIHelper.SKIP:
            self.code = code 
        if kemler_number is not APIHelper.SKIP:
            self.kemler_number = kemler_number 
        if limited_quantity is not APIHelper.SKIP:
            self.limited_quantity = limited_quantity 
        if package_type is not APIHelper.SKIP:
            self.package_type = package_type 
        if packages is not APIHelper.SKIP:
            self.packages = packages 
        if weight is not APIHelper.SKIP:
            self.weight = weight 
        if gross_weight is not APIHelper.SKIP:
            self.gross_weight = gross_weight 
        if net_weight is not APIHelper.SKIP:
            self.net_weight = net_weight 
        if cubic_decimeter is not APIHelper.SKIP:
            self.cubic_decimeter = cubic_decimeter 
        if flash_point is not APIHelper.SKIP:
            self.flash_point = flash_point 
        if label_1 is not APIHelper.SKIP:
            self.label_1 = label_1 
        if label_2 is not APIHelper.SKIP:
            self.label_2 = label_2 
        if label_3 is not APIHelper.SKIP:
            self.label_3 = label_3 
        if label_4 is not APIHelper.SKIP:
            self.label_4 = label_4 
        if special_provisions is not APIHelper.SKIP:
            self.special_provisions = special_provisions 
        if tunnelcode is not APIHelper.SKIP:
            self.tunnelcode = tunnelcode 
        if compatibility_group is not APIHelper.SKIP:
            self.compatibility_group = compatibility_group 
        if ecological_menace_flag is not APIHelper.SKIP:
            self.ecological_menace_flag = ecological_menace_flag 
        if disposal_observation is not APIHelper.SKIP:
            self.disposal_observation = disposal_observation 
        if group_id is not APIHelper.SKIP:
            self.group_id = group_id 
        if un_type is not APIHelper.SKIP:
            self.un_type = un_type 
        if track_changes is not APIHelper.SKIP:
            self.track_changes = track_changes 
        if has_changes is not APIHelper.SKIP:
            self.has_changes = has_changes 
        if pi_pass_nr is not APIHelper.SKIP:
            self.pi_pass_nr = pi_pass_nr 
        if pi_pass_max is not APIHelper.SKIP:
            self.pi_pass_max = pi_pass_max 
        if ypi_pass_nr is not APIHelper.SKIP:
            self.ypi_pass_nr = ypi_pass_nr 
        if ypi_pass_max is not APIHelper.SKIP:
            self.ypi_pass_max = ypi_pass_max 
        if pi_cargo_nr is not APIHelper.SKIP:
            self.pi_cargo_nr = pi_cargo_nr 
        if pi_cargo_max is not APIHelper.SKIP:
            self.pi_cargo_max = pi_cargo_max 
        if erg_code is not APIHelper.SKIP:
            self.erg_code = erg_code 
        if em_s_nummer_1 is not APIHelper.SKIP:
            self.em_s_nummer_1 = em_s_nummer_1 
        if em_s_nummer_2 is not APIHelper.SKIP:
            self.em_s_nummer_2 = em_s_nummer_2 
        if composite_packaging is not APIHelper.SKIP:
            self.composite_packaging = composite_packaging 
        if reference_id is not APIHelper.SKIP:
            self.reference_id = reference_id 
        if reference_type is not APIHelper.SKIP:
            self.reference_type = reference_type 
        if route_determination is not APIHelper.SKIP:
            self.route_determination = route_determination 
        if serious_hazard is not APIHelper.SKIP:
            self.serious_hazard = serious_hazard 
        if excepted_quantities is not APIHelper.SKIP:
            self.excepted_quantities = excepted_quantities 
        if sort_index is not APIHelper.SKIP:
            self.sort_index = sort_index 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        d_good_id = dictionary.get("dGoodId") if dictionary.get("dGoodId") else APIHelper.SKIP
        order_id = dictionary.get("orderId") if dictionary.get("orderId") else APIHelper.SKIP
        order_detail_id = dictionary.get("orderDetailId") if dictionary.get("orderDetailId") else APIHelper.SKIP
        un_number_id = dictionary.get("unNumberId") if dictionary.get("unNumberId") else APIHelper.SKIP
        un_number = dictionary.get("unNumber") if dictionary.get("unNumber") else APIHelper.SKIP
        transport_category = dictionary.get("transportCategory") if dictionary.get("transportCategory") else APIHelper.SKIP
        un_class = dictionary.get("unClass") if dictionary.get("unClass") else APIHelper.SKIP
        un_digit = dictionary.get("unDigit") if dictionary.get("unDigit") else APIHelper.SKIP
        un_character = dictionary.get("unCharacter") if dictionary.get("unCharacter") else APIHelper.SKIP
        material_name = dictionary.get("materialName") if dictionary.get("materialName") else APIHelper.SKIP
        chemical_name = dictionary.get("chemicalName") if dictionary.get("chemicalName") else APIHelper.SKIP
        nos_entrie = dictionary.get("nosEntrie") if dictionary.get("nosEntrie") else APIHelper.SKIP
        material_amount = dictionary.get("materialAmount") if dictionary.get("materialAmount") else APIHelper.SKIP
        factor = dictionary.get("factor") if dictionary.get("factor") else APIHelper.SKIP
        score = dictionary.get("score") if dictionary.get("score") else APIHelper.SKIP
        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        kemler_number = dictionary.get("kemlerNumber") if dictionary.get("kemlerNumber") else APIHelper.SKIP
        limited_quantity = dictionary.get("limitedQuantity") if dictionary.get("limitedQuantity") else APIHelper.SKIP
        package_type = dictionary.get("packageType") if dictionary.get("packageType") else APIHelper.SKIP
        packages = dictionary.get("packages") if dictionary.get("packages") else APIHelper.SKIP
        weight = dictionary.get("weight") if dictionary.get("weight") else APIHelper.SKIP
        gross_weight = dictionary.get("grossWeight") if dictionary.get("grossWeight") else APIHelper.SKIP
        net_weight = dictionary.get("netWeight") if dictionary.get("netWeight") else APIHelper.SKIP
        cubic_decimeter = dictionary.get("cubicDecimeter") if dictionary.get("cubicDecimeter") else APIHelper.SKIP
        flash_point = dictionary.get("flashPoint") if dictionary.get("flashPoint") else APIHelper.SKIP
        label_1 = dictionary.get("label1") if dictionary.get("label1") else APIHelper.SKIP
        label_2 = dictionary.get("label2") if dictionary.get("label2") else APIHelper.SKIP
        label_3 = dictionary.get("label3") if dictionary.get("label3") else APIHelper.SKIP
        label_4 = dictionary.get("label4") if dictionary.get("label4") else APIHelper.SKIP
        special_provisions = dictionary.get("specialProvisions") if dictionary.get("specialProvisions") else APIHelper.SKIP
        tunnelcode = dictionary.get("tunnelcode") if dictionary.get("tunnelcode") else APIHelper.SKIP
        compatibility_group = dictionary.get("compatibilityGroup") if dictionary.get("compatibilityGroup") else APIHelper.SKIP
        ecological_menace_flag = dictionary.get("ecologicalMenaceFlag") if dictionary.get("ecologicalMenaceFlag") else APIHelper.SKIP
        disposal_observation = dictionary.get("disposalObservation") if dictionary.get("disposalObservation") else APIHelper.SKIP
        group_id = dictionary.get("groupId") if dictionary.get("groupId") else APIHelper.SKIP
        un_type = dictionary.get("unType") if dictionary.get("unType") else APIHelper.SKIP
        track_changes = dictionary.get("trackChanges") if "trackChanges" in dictionary.keys() else APIHelper.SKIP
        has_changes = dictionary.get("hasChanges") if "hasChanges" in dictionary.keys() else APIHelper.SKIP
        pi_pass_nr = dictionary.get("piPassNr") if dictionary.get("piPassNr") else APIHelper.SKIP
        pi_pass_max = dictionary.get("piPassMax") if dictionary.get("piPassMax") else APIHelper.SKIP
        ypi_pass_nr = dictionary.get("ypiPassNr") if dictionary.get("ypiPassNr") else APIHelper.SKIP
        ypi_pass_max = dictionary.get("ypiPassMax") if dictionary.get("ypiPassMax") else APIHelper.SKIP
        pi_cargo_nr = dictionary.get("piCargoNr") if dictionary.get("piCargoNr") else APIHelper.SKIP
        pi_cargo_max = dictionary.get("piCargoMax") if dictionary.get("piCargoMax") else APIHelper.SKIP
        erg_code = dictionary.get("ergCode") if dictionary.get("ergCode") else APIHelper.SKIP
        em_s_nummer_1 = dictionary.get("emSNummer1") if dictionary.get("emSNummer1") else APIHelper.SKIP
        em_s_nummer_2 = dictionary.get("emSNummer2") if dictionary.get("emSNummer2") else APIHelper.SKIP
        composite_packaging = dictionary.get("compositePackaging") if dictionary.get("compositePackaging") else APIHelper.SKIP
        reference_id = dictionary.get("referenceId") if dictionary.get("referenceId") else APIHelper.SKIP
        reference_type = dictionary.get("referenceType") if dictionary.get("referenceType") else APIHelper.SKIP
        route_determination = dictionary.get("routeDetermination") if dictionary.get("routeDetermination") else APIHelper.SKIP
        serious_hazard = dictionary.get("seriousHazard") if dictionary.get("seriousHazard") else APIHelper.SKIP
        excepted_quantities = dictionary.get("exceptedQuantities") if dictionary.get("exceptedQuantities") else APIHelper.SKIP
        sort_index = dictionary.get("sortIndex") if dictionary.get("sortIndex") else APIHelper.SKIP
        # Return an object of this model
        return cls(d_good_id,
                   order_id,
                   order_detail_id,
                   un_number_id,
                   un_number,
                   transport_category,
                   un_class,
                   un_digit,
                   un_character,
                   material_name,
                   chemical_name,
                   nos_entrie,
                   material_amount,
                   factor,
                   score,
                   code,
                   kemler_number,
                   limited_quantity,
                   package_type,
                   packages,
                   weight,
                   gross_weight,
                   net_weight,
                   cubic_decimeter,
                   flash_point,
                   label_1,
                   label_2,
                   label_3,
                   label_4,
                   special_provisions,
                   tunnelcode,
                   compatibility_group,
                   ecological_menace_flag,
                   disposal_observation,
                   group_id,
                   un_type,
                   track_changes,
                   has_changes,
                   pi_pass_nr,
                   pi_pass_max,
                   ypi_pass_nr,
                   ypi_pass_max,
                   pi_cargo_nr,
                   pi_cargo_max,
                   erg_code,
                   em_s_nummer_1,
                   em_s_nummer_2,
                   composite_packaging,
                   reference_id,
                   reference_type,
                   route_determination,
                   serious_hazard,
                   excepted_quantities,
                   sort_index)
