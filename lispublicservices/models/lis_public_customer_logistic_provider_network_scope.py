# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_customer_logistic_provider_network import LISPublicCustomerLogisticProviderNetwork


class LISPublicCustomerLogisticProviderNetworkScope(object):

    """Implementation of the 'LISPublicCustomerLogisticProviderNetworkScope' model.

    The LISCustomerSystemTrafficScope data contract.

    Attributes:
        logistic_provider_networks (list of
            LISPublicCustomerLogisticProviderNetwork): Gets or sets
            ShortTexts.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "logistic_provider_networks": 'logisticProviderNetworks'
    }

    _optionals = [
        'logistic_provider_networks',
    ]

    def __init__(self,
                 logistic_provider_networks=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerLogisticProviderNetworkScope class"""

        # Initialize members of the class
        if logistic_provider_networks is not APIHelper.SKIP:
            self.logistic_provider_networks = logistic_provider_networks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        logistic_provider_networks = None
        if dictionary.get('logisticProviderNetworks') is not None:
            logistic_provider_networks = [LISPublicCustomerLogisticProviderNetwork.from_dictionary(x) for x in dictionary.get('logisticProviderNetworks')]
        else:
            logistic_provider_networks = APIHelper.SKIP
        # Return an object of this model
        return cls(logistic_provider_networks)
