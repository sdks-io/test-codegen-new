# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_customer_contact_person import LISPublicCustomerContactPerson


class LISPublicCustomerContactPersonScope(object):

    """Implementation of the 'LISPublicCustomerContactPersonScope' model.

    The LISCustomerContactPersonScope data contract.

    Attributes:
        contact_persons (list of LISPublicCustomerContactPerson): Gets or sets
            ContactPersons.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contact_persons": 'contactPersons'
    }

    _optionals = [
        'contact_persons',
    ]

    def __init__(self,
                 contact_persons=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerContactPersonScope class"""

        # Initialize members of the class
        if contact_persons is not APIHelper.SKIP:
            self.contact_persons = contact_persons 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        contact_persons = None
        if dictionary.get('contactPersons') is not None:
            contact_persons = [LISPublicCustomerContactPerson.from_dictionary(x) for x in dictionary.get('contactPersons')]
        else:
            contact_persons = APIHelper.SKIP
        # Return an object of this model
        return cls(contact_persons)
