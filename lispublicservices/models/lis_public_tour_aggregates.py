# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicTourAggregates(object):

    """Implementation of the 'LISPublicTourAggregates' model.

    The public tour aggregates

    Attributes:
        weight (float): Gets or sets the weight.
        chargeable_weight (float): Gets or sets the chargeable weight.
        cubic_decimeter (float): Gets or sets the cubic decimeter.
        loading_meter (float): Gets or sets the loading meter.
        square_meter (float): Gets or sets the square meter.
        storage_places (float): Gets or sets the storage places.
        given_weight (float): Gets or sets the given weight.
        palletts (float): Gets or sets the palletts.
        packages (float): Gets or sets the packages.
        pieces (float): Gets or sets the pieces.
        shipping_units (float): Gets or sets the shipping units.
        dangerous_goods (bool): Gets or sets a value indicating whether
            [dangerous goods].
        reefer_cargo (bool): Gets or sets a value indicating whether [reefer
            cargo].
        declared_value (float): Gets or sets the declared value.
        calculated_amount (float): Gets or sets the calculated amount.
        tour_sections (int): Gets or sets the tour sections.
        orders (int): Gets or sets the orders.
        consignees (int): Gets or sets the consignees.
        remark_2 (string): Gets or sets the remark2.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "weight": 'weight',
        "chargeable_weight": 'chargeableWeight',
        "cubic_decimeter": 'cubicDecimeter',
        "loading_meter": 'loadingMeter',
        "square_meter": 'squareMeter',
        "storage_places": 'storagePlaces',
        "given_weight": 'givenWeight',
        "palletts": 'palletts',
        "packages": 'packages',
        "pieces": 'pieces',
        "shipping_units": 'shippingUnits',
        "dangerous_goods": 'dangerousGoods',
        "reefer_cargo": 'reeferCargo',
        "declared_value": 'declaredValue',
        "calculated_amount": 'calculatedAmount',
        "tour_sections": 'tourSections',
        "orders": 'orders',
        "consignees": 'consignees',
        "remark_2": 'remark2'
    }

    _optionals = [
        'weight',
        'chargeable_weight',
        'cubic_decimeter',
        'loading_meter',
        'square_meter',
        'storage_places',
        'given_weight',
        'palletts',
        'packages',
        'pieces',
        'shipping_units',
        'dangerous_goods',
        'reefer_cargo',
        'declared_value',
        'calculated_amount',
        'tour_sections',
        'orders',
        'consignees',
        'remark_2',
    ]

    def __init__(self,
                 weight=APIHelper.SKIP,
                 chargeable_weight=APIHelper.SKIP,
                 cubic_decimeter=APIHelper.SKIP,
                 loading_meter=APIHelper.SKIP,
                 square_meter=APIHelper.SKIP,
                 storage_places=APIHelper.SKIP,
                 given_weight=APIHelper.SKIP,
                 palletts=APIHelper.SKIP,
                 packages=APIHelper.SKIP,
                 pieces=APIHelper.SKIP,
                 shipping_units=APIHelper.SKIP,
                 dangerous_goods=APIHelper.SKIP,
                 reefer_cargo=APIHelper.SKIP,
                 declared_value=APIHelper.SKIP,
                 calculated_amount=APIHelper.SKIP,
                 tour_sections=APIHelper.SKIP,
                 orders=APIHelper.SKIP,
                 consignees=APIHelper.SKIP,
                 remark_2=APIHelper.SKIP):
        """Constructor for the LISPublicTourAggregates class"""

        # Initialize members of the class
        if weight is not APIHelper.SKIP:
            self.weight = weight 
        if chargeable_weight is not APIHelper.SKIP:
            self.chargeable_weight = chargeable_weight 
        if cubic_decimeter is not APIHelper.SKIP:
            self.cubic_decimeter = cubic_decimeter 
        if loading_meter is not APIHelper.SKIP:
            self.loading_meter = loading_meter 
        if square_meter is not APIHelper.SKIP:
            self.square_meter = square_meter 
        if storage_places is not APIHelper.SKIP:
            self.storage_places = storage_places 
        if given_weight is not APIHelper.SKIP:
            self.given_weight = given_weight 
        if palletts is not APIHelper.SKIP:
            self.palletts = palletts 
        if packages is not APIHelper.SKIP:
            self.packages = packages 
        if pieces is not APIHelper.SKIP:
            self.pieces = pieces 
        if shipping_units is not APIHelper.SKIP:
            self.shipping_units = shipping_units 
        if dangerous_goods is not APIHelper.SKIP:
            self.dangerous_goods = dangerous_goods 
        if reefer_cargo is not APIHelper.SKIP:
            self.reefer_cargo = reefer_cargo 
        if declared_value is not APIHelper.SKIP:
            self.declared_value = declared_value 
        if calculated_amount is not APIHelper.SKIP:
            self.calculated_amount = calculated_amount 
        if tour_sections is not APIHelper.SKIP:
            self.tour_sections = tour_sections 
        if orders is not APIHelper.SKIP:
            self.orders = orders 
        if consignees is not APIHelper.SKIP:
            self.consignees = consignees 
        if remark_2 is not APIHelper.SKIP:
            self.remark_2 = remark_2 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        weight = dictionary.get("weight") if dictionary.get("weight") else APIHelper.SKIP
        chargeable_weight = dictionary.get("chargeableWeight") if dictionary.get("chargeableWeight") else APIHelper.SKIP
        cubic_decimeter = dictionary.get("cubicDecimeter") if dictionary.get("cubicDecimeter") else APIHelper.SKIP
        loading_meter = dictionary.get("loadingMeter") if dictionary.get("loadingMeter") else APIHelper.SKIP
        square_meter = dictionary.get("squareMeter") if dictionary.get("squareMeter") else APIHelper.SKIP
        storage_places = dictionary.get("storagePlaces") if dictionary.get("storagePlaces") else APIHelper.SKIP
        given_weight = dictionary.get("givenWeight") if dictionary.get("givenWeight") else APIHelper.SKIP
        palletts = dictionary.get("palletts") if dictionary.get("palletts") else APIHelper.SKIP
        packages = dictionary.get("packages") if dictionary.get("packages") else APIHelper.SKIP
        pieces = dictionary.get("pieces") if dictionary.get("pieces") else APIHelper.SKIP
        shipping_units = dictionary.get("shippingUnits") if dictionary.get("shippingUnits") else APIHelper.SKIP
        dangerous_goods = dictionary.get("dangerousGoods") if "dangerousGoods" in dictionary.keys() else APIHelper.SKIP
        reefer_cargo = dictionary.get("reeferCargo") if "reeferCargo" in dictionary.keys() else APIHelper.SKIP
        declared_value = dictionary.get("declaredValue") if dictionary.get("declaredValue") else APIHelper.SKIP
        calculated_amount = dictionary.get("calculatedAmount") if dictionary.get("calculatedAmount") else APIHelper.SKIP
        tour_sections = dictionary.get("tourSections") if dictionary.get("tourSections") else APIHelper.SKIP
        orders = dictionary.get("orders") if dictionary.get("orders") else APIHelper.SKIP
        consignees = dictionary.get("consignees") if dictionary.get("consignees") else APIHelper.SKIP
        remark_2 = dictionary.get("remark2") if dictionary.get("remark2") else APIHelper.SKIP
        # Return an object of this model
        return cls(weight,
                   chargeable_weight,
                   cubic_decimeter,
                   loading_meter,
                   square_meter,
                   storage_places,
                   given_weight,
                   palletts,
                   packages,
                   pieces,
                   shipping_units,
                   dangerous_goods,
                   reefer_cargo,
                   declared_value,
                   calculated_amount,
                   tour_sections,
                   orders,
                   consignees,
                   remark_2)
