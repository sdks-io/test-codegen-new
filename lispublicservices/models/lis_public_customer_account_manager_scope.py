# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_customer_manager import LISPublicCustomerManager


class LISPublicCustomerAccountManagerScope(object):

    """Implementation of the 'LISPublicCustomerAccountManagerScope' model.

    The LISCustomerAccountManagerScope data contract.

    Attributes:
        account_managers (list of LISPublicCustomerManager): Gets or sets
            AccountManagers.
        track_changes (bool): Gets or sets TrackChanges.
        has_changes (bool): Gets or sets HasChanges.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_managers": 'accountManagers',
        "track_changes": 'trackChanges',
        "has_changes": 'hasChanges'
    }

    _optionals = [
        'account_managers',
        'track_changes',
        'has_changes',
    ]

    def __init__(self,
                 account_managers=APIHelper.SKIP,
                 track_changes=APIHelper.SKIP,
                 has_changes=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerAccountManagerScope class"""

        # Initialize members of the class
        if account_managers is not APIHelper.SKIP:
            self.account_managers = account_managers 
        if track_changes is not APIHelper.SKIP:
            self.track_changes = track_changes 
        if has_changes is not APIHelper.SKIP:
            self.has_changes = has_changes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        account_managers = None
        if dictionary.get('accountManagers') is not None:
            account_managers = [LISPublicCustomerManager.from_dictionary(x) for x in dictionary.get('accountManagers')]
        else:
            account_managers = APIHelper.SKIP
        track_changes = dictionary.get("trackChanges") if "trackChanges" in dictionary.keys() else APIHelper.SKIP
        has_changes = dictionary.get("hasChanges") if "hasChanges" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_managers,
                   track_changes,
                   has_changes)
