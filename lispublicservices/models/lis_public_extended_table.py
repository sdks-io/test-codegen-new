# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicExtendedTable(object):

    """Implementation of the 'LISPublicExtendedTable' model.

    LISExtendedTable class.

    Attributes:
        base_table_name (string): Gets or sets the name of the base table.
        extended_table_name (string): Gets or sets the name of the extended
            table.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "base_table_name": 'baseTableName',
        "extended_table_name": 'extendedTableName'
    }

    _optionals = [
        'base_table_name',
        'extended_table_name',
    ]

    def __init__(self,
                 base_table_name=APIHelper.SKIP,
                 extended_table_name=APIHelper.SKIP):
        """Constructor for the LISPublicExtendedTable class"""

        # Initialize members of the class
        if base_table_name is not APIHelper.SKIP:
            self.base_table_name = base_table_name 
        if extended_table_name is not APIHelper.SKIP:
            self.extended_table_name = extended_table_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        base_table_name = dictionary.get("baseTableName") if dictionary.get("baseTableName") else APIHelper.SKIP
        extended_table_name = dictionary.get("extendedTableName") if dictionary.get("extendedTableName") else APIHelper.SKIP
        # Return an object of this model
        return cls(base_table_name,
                   extended_table_name)
