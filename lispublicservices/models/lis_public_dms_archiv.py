# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicDMSArchiv(object):

    """Implementation of the 'LISPublicDMSArchiv' model.

    DMS Archiv

    Attributes:
        dms_archiv_id (int): Gets or sets the DMS archiv id.
        archiv_name (string): Gets or sets the name of the archiv.
        archiv_type (ArchivTypeEnum): Gets or sets the type of the archiv.
        created_by (string): Gets or sets the date the item was created.
        created_on (datetime): Gets or sets the name of the user that created
            this item.
        changed_by (string): Gets or sets the name of the user that made the
            last change to this item.
        changed_on (datetime): Gets or sets the date of the last change to
            this item.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dms_archiv_id": 'dmsArchivId',
        "archiv_name": 'archivName',
        "archiv_type": 'archivType',
        "created_by": 'createdBy',
        "created_on": 'createdOn',
        "changed_by": 'changedBy',
        "changed_on": 'changedOn'
    }

    _optionals = [
        'dms_archiv_id',
        'archiv_name',
        'archiv_type',
        'created_by',
        'created_on',
        'changed_by',
        'changed_on',
    ]

    def __init__(self,
                 dms_archiv_id=APIHelper.SKIP,
                 archiv_name=APIHelper.SKIP,
                 archiv_type=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP):
        """Constructor for the LISPublicDMSArchiv class"""

        # Initialize members of the class
        if dms_archiv_id is not APIHelper.SKIP:
            self.dms_archiv_id = dms_archiv_id 
        if archiv_name is not APIHelper.SKIP:
            self.archiv_name = archiv_name 
        if archiv_type is not APIHelper.SKIP:
            self.archiv_type = archiv_type 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        dms_archiv_id = dictionary.get("dmsArchivId") if dictionary.get("dmsArchivId") else APIHelper.SKIP
        archiv_name = dictionary.get("archivName") if dictionary.get("archivName") else APIHelper.SKIP
        archiv_type = dictionary.get("archivType") if dictionary.get("archivType") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        # Return an object of this model
        return cls(dms_archiv_id,
                   archiv_name,
                   archiv_type,
                   created_by,
                   created_on,
                   changed_by,
                   changed_on)
