# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerDispositionScope(object):

    """Implementation of the 'LISPublicCustomerDispositionScope' model.

    The LISCustomerDispositionScope data contract.

    Attributes:
        departure_type (DepartureTypeEnum): Gets or sets DepartureType.
        warehouse (int): Gets or sets the warehouse.
        additional_usage (AdditionalUsageEnum): Gets or sets AdditionalUsage.
        insurance_international_valid_till (datetime): Gets or sets
            InsuranceInternationalValidTill.
        insurance_international_amount (float): Gets or sets
            InsuranceInternationalAmount.
        insurance_international_currency (string): Gets or sets
            InsuranceInternationalCurrency.
        insurance_national_valid_till (datetime): Gets or sets
            InsuranceNationalValidTill.
        insurance_national_amount (float): Gets or sets
            InsuranceNationalAmount.
        insurance_national_currency (string): Gets or sets
            InsuranceNationalCurrency.
        insurance_international_additional_valid_till (datetime): Gets or sets
            InsuranceInternationalAdditionalValidTill.
        insurance_international_additional_amount (float): Gets or sets
            InsuranceInternationalAdditionalAmount.
        insurance_international_additional_currency (string): Gets or sets
            InsuranceInternationalAdditionalCurrency.
        european_license_valid_till (datetime): Gets or sets
            EuropeanLicenseValidTill.
        cabotage_allowed_from (datetime): Gets or sets CabotageAllowedFrom.
        equipment_code (string): Gets or sets EquipmentCode.
        customer_protection (bool): Gets or sets a value indicating whether
            [customer protection].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "departure_type": 'departureType',
        "warehouse": 'warehouse',
        "additional_usage": 'additionalUsage',
        "insurance_international_valid_till": 'insuranceInternationalValidTill',
        "insurance_international_amount": 'insuranceInternationalAmount',
        "insurance_international_currency": 'insuranceInternationalCurrency',
        "insurance_national_valid_till": 'insuranceNationalValidTill',
        "insurance_national_amount": 'insuranceNationalAmount',
        "insurance_national_currency": 'insuranceNationalCurrency',
        "insurance_international_additional_valid_till": 'insuranceInternationalAdditionalValidTill',
        "insurance_international_additional_amount": 'insuranceInternationalAdditionalAmount',
        "insurance_international_additional_currency": 'insuranceInternationalAdditionalCurrency',
        "european_license_valid_till": 'europeanLicenseValidTill',
        "cabotage_allowed_from": 'cabotageAllowedFrom',
        "equipment_code": 'equipmentCode',
        "customer_protection": 'customerProtection'
    }

    _optionals = [
        'departure_type',
        'warehouse',
        'additional_usage',
        'insurance_international_valid_till',
        'insurance_international_amount',
        'insurance_international_currency',
        'insurance_national_valid_till',
        'insurance_national_amount',
        'insurance_national_currency',
        'insurance_international_additional_valid_till',
        'insurance_international_additional_amount',
        'insurance_international_additional_currency',
        'european_license_valid_till',
        'cabotage_allowed_from',
        'equipment_code',
        'customer_protection',
    ]

    def __init__(self,
                 departure_type=APIHelper.SKIP,
                 warehouse=APIHelper.SKIP,
                 additional_usage=APIHelper.SKIP,
                 insurance_international_valid_till=APIHelper.SKIP,
                 insurance_international_amount=APIHelper.SKIP,
                 insurance_international_currency=APIHelper.SKIP,
                 insurance_national_valid_till=APIHelper.SKIP,
                 insurance_national_amount=APIHelper.SKIP,
                 insurance_national_currency=APIHelper.SKIP,
                 insurance_international_additional_valid_till=APIHelper.SKIP,
                 insurance_international_additional_amount=APIHelper.SKIP,
                 insurance_international_additional_currency=APIHelper.SKIP,
                 european_license_valid_till=APIHelper.SKIP,
                 cabotage_allowed_from=APIHelper.SKIP,
                 equipment_code=APIHelper.SKIP,
                 customer_protection=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerDispositionScope class"""

        # Initialize members of the class
        if departure_type is not APIHelper.SKIP:
            self.departure_type = departure_type 
        if warehouse is not APIHelper.SKIP:
            self.warehouse = warehouse 
        if additional_usage is not APIHelper.SKIP:
            self.additional_usage = additional_usage 
        if insurance_international_valid_till is not APIHelper.SKIP:
            self.insurance_international_valid_till = APIHelper.RFC3339DateTime(insurance_international_valid_till) if insurance_international_valid_till else None 
        if insurance_international_amount is not APIHelper.SKIP:
            self.insurance_international_amount = insurance_international_amount 
        if insurance_international_currency is not APIHelper.SKIP:
            self.insurance_international_currency = insurance_international_currency 
        if insurance_national_valid_till is not APIHelper.SKIP:
            self.insurance_national_valid_till = APIHelper.RFC3339DateTime(insurance_national_valid_till) if insurance_national_valid_till else None 
        if insurance_national_amount is not APIHelper.SKIP:
            self.insurance_national_amount = insurance_national_amount 
        if insurance_national_currency is not APIHelper.SKIP:
            self.insurance_national_currency = insurance_national_currency 
        if insurance_international_additional_valid_till is not APIHelper.SKIP:
            self.insurance_international_additional_valid_till = APIHelper.RFC3339DateTime(insurance_international_additional_valid_till) if insurance_international_additional_valid_till else None 
        if insurance_international_additional_amount is not APIHelper.SKIP:
            self.insurance_international_additional_amount = insurance_international_additional_amount 
        if insurance_international_additional_currency is not APIHelper.SKIP:
            self.insurance_international_additional_currency = insurance_international_additional_currency 
        if european_license_valid_till is not APIHelper.SKIP:
            self.european_license_valid_till = APIHelper.RFC3339DateTime(european_license_valid_till) if european_license_valid_till else None 
        if cabotage_allowed_from is not APIHelper.SKIP:
            self.cabotage_allowed_from = APIHelper.RFC3339DateTime(cabotage_allowed_from) if cabotage_allowed_from else None 
        if equipment_code is not APIHelper.SKIP:
            self.equipment_code = equipment_code 
        if customer_protection is not APIHelper.SKIP:
            self.customer_protection = customer_protection 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        departure_type = dictionary.get("departureType") if dictionary.get("departureType") else APIHelper.SKIP
        warehouse = dictionary.get("warehouse") if dictionary.get("warehouse") else APIHelper.SKIP
        additional_usage = dictionary.get("additionalUsage") if dictionary.get("additionalUsage") else APIHelper.SKIP
        insurance_international_valid_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("insuranceInternationalValidTill")).datetime if dictionary.get("insuranceInternationalValidTill") else APIHelper.SKIP
        insurance_international_amount = dictionary.get("insuranceInternationalAmount") if dictionary.get("insuranceInternationalAmount") else APIHelper.SKIP
        insurance_international_currency = dictionary.get("insuranceInternationalCurrency") if dictionary.get("insuranceInternationalCurrency") else APIHelper.SKIP
        insurance_national_valid_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("insuranceNationalValidTill")).datetime if dictionary.get("insuranceNationalValidTill") else APIHelper.SKIP
        insurance_national_amount = dictionary.get("insuranceNationalAmount") if dictionary.get("insuranceNationalAmount") else APIHelper.SKIP
        insurance_national_currency = dictionary.get("insuranceNationalCurrency") if dictionary.get("insuranceNationalCurrency") else APIHelper.SKIP
        insurance_international_additional_valid_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("insuranceInternationalAdditionalValidTill")).datetime if dictionary.get("insuranceInternationalAdditionalValidTill") else APIHelper.SKIP
        insurance_international_additional_amount = dictionary.get("insuranceInternationalAdditionalAmount") if dictionary.get("insuranceInternationalAdditionalAmount") else APIHelper.SKIP
        insurance_international_additional_currency = dictionary.get("insuranceInternationalAdditionalCurrency") if dictionary.get("insuranceInternationalAdditionalCurrency") else APIHelper.SKIP
        european_license_valid_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("europeanLicenseValidTill")).datetime if dictionary.get("europeanLicenseValidTill") else APIHelper.SKIP
        cabotage_allowed_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("cabotageAllowedFrom")).datetime if dictionary.get("cabotageAllowedFrom") else APIHelper.SKIP
        equipment_code = dictionary.get("equipmentCode") if dictionary.get("equipmentCode") else APIHelper.SKIP
        customer_protection = dictionary.get("customerProtection") if "customerProtection" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(departure_type,
                   warehouse,
                   additional_usage,
                   insurance_international_valid_till,
                   insurance_international_amount,
                   insurance_international_currency,
                   insurance_national_valid_till,
                   insurance_national_amount,
                   insurance_national_currency,
                   insurance_international_additional_valid_till,
                   insurance_international_additional_amount,
                   insurance_international_additional_currency,
                   european_license_valid_till,
                   cabotage_allowed_from,
                   equipment_code,
                   customer_protection)
