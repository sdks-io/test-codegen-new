# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicOperationHours(object):

    """Implementation of the 'LISPublicOperationHours' model.

    The operation hours.

    Attributes:
        day_of_week (DayOfWeek1Enum): Gets or sets the day of week.
        loading_time_from_1 (datetime): Gets or sets the loading time from1.
        loading_time_to_1 (datetime): Gets or sets the loading time to1.
        loading_time_from_2 (datetime): Gets or sets the loading time from2.
        loading_time_to_2 (datetime): Gets or sets the loading time to2.
        loading_time_span (int): Gets or sets the loading time span.
        delivery_time_from_1 (datetime): Gets or sets the delivery time
            from1.
        delivery_time_to_1 (datetime): Gets or sets the delivery time to1.
        delivery_time_from_2 (datetime): Gets or sets the delivery time
            from2.
        delivery_time_to_2 (datetime): Gets or sets the delivery time to2.
        delivery_time_span (int): Gets or sets the delivery time span.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "day_of_week": 'dayOfWeek',
        "loading_time_from_1": 'loadingTimeFrom1',
        "loading_time_to_1": 'loadingTimeTo1',
        "loading_time_from_2": 'loadingTimeFrom2',
        "loading_time_to_2": 'loadingTimeTo2',
        "loading_time_span": 'loadingTimeSpan',
        "delivery_time_from_1": 'deliveryTimeFrom1',
        "delivery_time_to_1": 'deliveryTimeTo1',
        "delivery_time_from_2": 'deliveryTimeFrom2',
        "delivery_time_to_2": 'deliveryTimeTo2',
        "delivery_time_span": 'deliveryTimeSpan'
    }

    _optionals = [
        'day_of_week',
        'loading_time_from_1',
        'loading_time_to_1',
        'loading_time_from_2',
        'loading_time_to_2',
        'loading_time_span',
        'delivery_time_from_1',
        'delivery_time_to_1',
        'delivery_time_from_2',
        'delivery_time_to_2',
        'delivery_time_span',
    ]

    def __init__(self,
                 day_of_week=APIHelper.SKIP,
                 loading_time_from_1=APIHelper.SKIP,
                 loading_time_to_1=APIHelper.SKIP,
                 loading_time_from_2=APIHelper.SKIP,
                 loading_time_to_2=APIHelper.SKIP,
                 loading_time_span=APIHelper.SKIP,
                 delivery_time_from_1=APIHelper.SKIP,
                 delivery_time_to_1=APIHelper.SKIP,
                 delivery_time_from_2=APIHelper.SKIP,
                 delivery_time_to_2=APIHelper.SKIP,
                 delivery_time_span=APIHelper.SKIP):
        """Constructor for the LISPublicOperationHours class"""

        # Initialize members of the class
        if day_of_week is not APIHelper.SKIP:
            self.day_of_week = day_of_week 
        if loading_time_from_1 is not APIHelper.SKIP:
            self.loading_time_from_1 = APIHelper.RFC3339DateTime(loading_time_from_1) if loading_time_from_1 else None 
        if loading_time_to_1 is not APIHelper.SKIP:
            self.loading_time_to_1 = APIHelper.RFC3339DateTime(loading_time_to_1) if loading_time_to_1 else None 
        if loading_time_from_2 is not APIHelper.SKIP:
            self.loading_time_from_2 = APIHelper.RFC3339DateTime(loading_time_from_2) if loading_time_from_2 else None 
        if loading_time_to_2 is not APIHelper.SKIP:
            self.loading_time_to_2 = APIHelper.RFC3339DateTime(loading_time_to_2) if loading_time_to_2 else None 
        if loading_time_span is not APIHelper.SKIP:
            self.loading_time_span = loading_time_span 
        if delivery_time_from_1 is not APIHelper.SKIP:
            self.delivery_time_from_1 = APIHelper.RFC3339DateTime(delivery_time_from_1) if delivery_time_from_1 else None 
        if delivery_time_to_1 is not APIHelper.SKIP:
            self.delivery_time_to_1 = APIHelper.RFC3339DateTime(delivery_time_to_1) if delivery_time_to_1 else None 
        if delivery_time_from_2 is not APIHelper.SKIP:
            self.delivery_time_from_2 = APIHelper.RFC3339DateTime(delivery_time_from_2) if delivery_time_from_2 else None 
        if delivery_time_to_2 is not APIHelper.SKIP:
            self.delivery_time_to_2 = APIHelper.RFC3339DateTime(delivery_time_to_2) if delivery_time_to_2 else None 
        if delivery_time_span is not APIHelper.SKIP:
            self.delivery_time_span = delivery_time_span 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        day_of_week = dictionary.get("dayOfWeek") if dictionary.get("dayOfWeek") else APIHelper.SKIP
        loading_time_from_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTimeFrom1")).datetime if dictionary.get("loadingTimeFrom1") else APIHelper.SKIP
        loading_time_to_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTimeTo1")).datetime if dictionary.get("loadingTimeTo1") else APIHelper.SKIP
        loading_time_from_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTimeFrom2")).datetime if dictionary.get("loadingTimeFrom2") else APIHelper.SKIP
        loading_time_to_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTimeTo2")).datetime if dictionary.get("loadingTimeTo2") else APIHelper.SKIP
        loading_time_span = dictionary.get("loadingTimeSpan") if dictionary.get("loadingTimeSpan") else APIHelper.SKIP
        delivery_time_from_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryTimeFrom1")).datetime if dictionary.get("deliveryTimeFrom1") else APIHelper.SKIP
        delivery_time_to_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryTimeTo1")).datetime if dictionary.get("deliveryTimeTo1") else APIHelper.SKIP
        delivery_time_from_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryTimeFrom2")).datetime if dictionary.get("deliveryTimeFrom2") else APIHelper.SKIP
        delivery_time_to_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryTimeTo2")).datetime if dictionary.get("deliveryTimeTo2") else APIHelper.SKIP
        delivery_time_span = dictionary.get("deliveryTimeSpan") if dictionary.get("deliveryTimeSpan") else APIHelper.SKIP
        # Return an object of this model
        return cls(day_of_week,
                   loading_time_from_1,
                   loading_time_to_1,
                   loading_time_from_2,
                   loading_time_to_2,
                   loading_time_span,
                   delivery_time_from_1,
                   delivery_time_to_1,
                   delivery_time_from_2,
                   delivery_time_to_2,
                   delivery_time_span)
