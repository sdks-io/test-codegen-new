# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_customer_short_text import LISPublicCustomerShortText


class LISPublicCustomerTextScope(object):

    """Implementation of the 'LISPublicCustomerTextScope' model.

    The LISCustomerTextScope data contract.

    Attributes:
        short_texts (list of LISPublicCustomerShortText): Gets or sets
            ShortTexts.
        notice_1 (string): Gets or sets the notice1.
        notice_2 (string): Gets or sets the notice2.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "short_texts": 'shortTexts',
        "notice_1": 'notice1',
        "notice_2": 'notice2'
    }

    _optionals = [
        'short_texts',
        'notice_1',
        'notice_2',
    ]

    def __init__(self,
                 short_texts=APIHelper.SKIP,
                 notice_1=APIHelper.SKIP,
                 notice_2=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerTextScope class"""

        # Initialize members of the class
        if short_texts is not APIHelper.SKIP:
            self.short_texts = short_texts 
        if notice_1 is not APIHelper.SKIP:
            self.notice_1 = notice_1 
        if notice_2 is not APIHelper.SKIP:
            self.notice_2 = notice_2 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        short_texts = None
        if dictionary.get('shortTexts') is not None:
            short_texts = [LISPublicCustomerShortText.from_dictionary(x) for x in dictionary.get('shortTexts')]
        else:
            short_texts = APIHelper.SKIP
        notice_1 = dictionary.get("notice1") if dictionary.get("notice1") else APIHelper.SKIP
        notice_2 = dictionary.get("notice2") if dictionary.get("notice2") else APIHelper.SKIP
        # Return an object of this model
        return cls(short_texts,
                   notice_1,
                   notice_2)
