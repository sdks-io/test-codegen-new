# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_create_order_status_adv_properties import LISCreateOrderStatusAdvProperties


class LISCreateOrderStatusRequest(object):

    """Implementation of the 'LISCreateOrderStatusRequest' model.

    Request object for creating an order status.

    Attributes:
        status_id (int): The identifier of order status which should be
            created.
        order_id (int): The identifier of affected order.
        advanced_properties (LISCreateOrderStatusAdvProperties): The
            LISOrderStatusEntityAdvProperties data contract.
        event_date_time (datetime): The date and time when given status is
            occured.
        receipt (string): The receipt of given status.
        tour_id (int): The tour id of given status.
        bordero_id (int): The bordero id of given status.
        order_status_history_id (int): The OrderStatusHistoryId id of given
            status.
        do_not_copy_data_ref (bool): Describes if copying the data reference
            of given status is allowd.
        return_primary_keys (bool): Describes if primary keys of givenstatus
            should be returned.
        is_manually_recorded (bool): Describes if givenstatus is manually
            recorded.
        data_reference_id (int): Gets or sets DataReferenceId.
        status_event_id (StatusEventIdEnum): Event Id of given status.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status_id": 'statusId',
        "order_id": 'orderId',
        "advanced_properties": 'advancedProperties',
        "event_date_time": 'eventDateTime',
        "receipt": 'receipt',
        "tour_id": 'tourId',
        "bordero_id": 'borderoId',
        "order_status_history_id": 'orderStatusHistoryId',
        "do_not_copy_data_ref": 'doNotCopyDataRef',
        "return_primary_keys": 'returnPrimaryKeys',
        "is_manually_recorded": 'isManuallyRecorded',
        "data_reference_id": 'dataReferenceId',
        "status_event_id": 'statusEventId'
    }

    _optionals = [
        'advanced_properties',
        'event_date_time',
        'receipt',
        'tour_id',
        'bordero_id',
        'order_status_history_id',
        'do_not_copy_data_ref',
        'return_primary_keys',
        'is_manually_recorded',
        'data_reference_id',
        'status_event_id',
    ]

    def __init__(self,
                 status_id=None,
                 order_id=None,
                 advanced_properties=APIHelper.SKIP,
                 event_date_time=APIHelper.SKIP,
                 receipt=APIHelper.SKIP,
                 tour_id=APIHelper.SKIP,
                 bordero_id=APIHelper.SKIP,
                 order_status_history_id=APIHelper.SKIP,
                 do_not_copy_data_ref=APIHelper.SKIP,
                 return_primary_keys=APIHelper.SKIP,
                 is_manually_recorded=APIHelper.SKIP,
                 data_reference_id=APIHelper.SKIP,
                 status_event_id=APIHelper.SKIP):
        """Constructor for the LISCreateOrderStatusRequest class"""

        # Initialize members of the class
        self.status_id = status_id 
        self.order_id = order_id 
        if advanced_properties is not APIHelper.SKIP:
            self.advanced_properties = advanced_properties 
        if event_date_time is not APIHelper.SKIP:
            self.event_date_time = APIHelper.RFC3339DateTime(event_date_time) if event_date_time else None 
        if receipt is not APIHelper.SKIP:
            self.receipt = receipt 
        if tour_id is not APIHelper.SKIP:
            self.tour_id = tour_id 
        if bordero_id is not APIHelper.SKIP:
            self.bordero_id = bordero_id 
        if order_status_history_id is not APIHelper.SKIP:
            self.order_status_history_id = order_status_history_id 
        if do_not_copy_data_ref is not APIHelper.SKIP:
            self.do_not_copy_data_ref = do_not_copy_data_ref 
        if return_primary_keys is not APIHelper.SKIP:
            self.return_primary_keys = return_primary_keys 
        if is_manually_recorded is not APIHelper.SKIP:
            self.is_manually_recorded = is_manually_recorded 
        if data_reference_id is not APIHelper.SKIP:
            self.data_reference_id = data_reference_id 
        if status_event_id is not APIHelper.SKIP:
            self.status_event_id = status_event_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        status_id = dictionary.get("statusId") if dictionary.get("statusId") else None
        order_id = dictionary.get("orderId") if dictionary.get("orderId") else None
        advanced_properties = LISCreateOrderStatusAdvProperties.from_dictionary(dictionary.get('advancedProperties')) if 'advancedProperties' in dictionary.keys() else APIHelper.SKIP
        event_date_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("eventDateTime")).datetime if dictionary.get("eventDateTime") else APIHelper.SKIP
        receipt = dictionary.get("receipt") if dictionary.get("receipt") else APIHelper.SKIP
        tour_id = dictionary.get("tourId") if dictionary.get("tourId") else APIHelper.SKIP
        bordero_id = dictionary.get("borderoId") if dictionary.get("borderoId") else APIHelper.SKIP
        order_status_history_id = dictionary.get("orderStatusHistoryId") if dictionary.get("orderStatusHistoryId") else APIHelper.SKIP
        do_not_copy_data_ref = dictionary.get("doNotCopyDataRef") if "doNotCopyDataRef" in dictionary.keys() else APIHelper.SKIP
        return_primary_keys = dictionary.get("returnPrimaryKeys") if "returnPrimaryKeys" in dictionary.keys() else APIHelper.SKIP
        is_manually_recorded = dictionary.get("isManuallyRecorded") if "isManuallyRecorded" in dictionary.keys() else APIHelper.SKIP
        data_reference_id = dictionary.get("dataReferenceId") if dictionary.get("dataReferenceId") else APIHelper.SKIP
        status_event_id = dictionary.get("statusEventId") if dictionary.get("statusEventId") else APIHelper.SKIP
        # Return an object of this model
        return cls(status_id,
                   order_id,
                   advanced_properties,
                   event_date_time,
                   receipt,
                   tour_id,
                   bordero_id,
                   order_status_history_id,
                   do_not_copy_data_ref,
                   return_primary_keys,
                   is_manually_recorded,
                   data_reference_id,
                   status_event_id)
