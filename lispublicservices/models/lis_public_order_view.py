# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicOrderView(object):

    """Implementation of the 'LISPublicOrderView' model.

    Represents an entity class. This class depends on the database table
    #*V__GetKunAufKomplett

    Attributes:
        initial_cost (float): Gets or sets the Vorkosten property. This
            property depends on the database field Vorkosten.
        is_fbf_printed (bool): Gets or sets the DruFBF property. This property
            depends on the database field DruFBF.
        is_sped_us_printed (bool): Gets or sets the DruSpedUS property. This
            property depends on the database field DruSpedUS.
        incoming_bordero_no (string): Gets or sets the IncomingBorderoNo
            property. This property depends on the database field BordENr.
        sequence_no (int): Gets or sets the BordELfdNr property. This property
            depends on the database field BordELfdNr.
        order_input_type (OrderInputTypeEnum): Gets or sets the OrderInputType
            property. This property depends on the database field ErfTyp.
        is_cash_payment (bool): Gets or sets the CashPayment property. This
            property depends on the database field Bar.
        order_id_gs (int): Gets or sets the AufIntGs property. This property
            depends on the database field AufIntGs.
        cash_on_delivery_vat_free (float): Gets or sets the
            CashOnDeliveryVATFree property. This property depends on the
            database field NachFrei.
        shipment_id (int): Gets or sets the OrderId property. This property
            depends on the database field AufIntNr.
        order_no (int): Gets or sets the OrderNo property. This property
            depends on the database field AufNr.
        order_sub_number (int): Gets or sets the OrderSubNumber property. This
            property depends on the database field AufUnterNr.
        company (int): Gets or sets the Company property. This property
            depends on the database field Firma.
        accounting_division (int): Gets or sets the NL property. This property
            depends on the database field NL.
        division (int): Gets or sets the Division property. This property
            depends on the database field Abt.
        changed_on (datetime): Gets or sets the ChangedOn property. This
            property depends on the database field AendDat.
        changed_by (string): Gets or sets the ChangedBy property. This
            property depends on the database field AendUs.
        order_type (OrderTypeEnum): Gets or sets the AufArt property. This
            property depends on the database field AufArt.
        order_text (string): Gets or sets the AufText property. This property
            depends on the database field AufText.
        remark (string): Gets or sets the Remark property. This property
            depends on the database field AufInfo.
        order_date (datetime): Gets or sets the AufDatum property. This
            property depends on the database field AufDatum.
        customer_id (int): Gets or sets the CustomerId property. This property
            depends on the database field AufgeberNr.
        delivery_number (string): Gets or sets the DeliveryNote property. This
            property depends on the database field LiefNr.
        delivery_date (datetime): Gets or sets the LiefDat property. This
            property depends on the database field LiefDat.
        picking_no (string): Gets or sets the ConsignmentNumber property. This
            property depends on the database field KommNr.
        charge_no (string): Gets or sets the ChargeNo property. This property
            depends on the database field ChargeNr.
        bordero_id (int): Gets or sets the BorderoId property. This property
            depends on the database field BordIntNr.
        loading_customer_id (int): Gets or sets the LoadingCustomerId
            property. This property depends on the database field BelNr.
        loading_country_code (string): Gets or sets the LoadingCountryCode
            property. This property depends on the database field BelLKZ.
        loading_locality_id (int): Gets or sets the LoadingLocalityId
            property. This property depends on the database field BelId.
        loading_zip (string): Gets or sets the LoadingZip property. This
            property depends on the database field BelPLZ.
        loading_city (string): Gets or sets the LoadingCity property. This
            property depends on the database field BelOrt.
        loadingt_bsl (string): Gets or sets the BelBSL property. This property
            depends on the database field BelBSL.
        degt (string): Gets or sets the BelDEGT property. This property
            depends on the database field BelDEGT.
        community_code (int): Gets or sets the BelGTB property. This property
            depends on the database field BelGTB.
        loading_from_date (datetime): Gets or sets the BelVonDat property.
            This property depends on the database field BelVonDat.
        loading_from_time (datetime): Gets or sets the BelVonZeit property.
            This property depends on the database field BelVonZeit.
        loading_till_date (datetime): Gets or sets the BelBisDat property.
            This property depends on the database field BelBisDat.
        loading_till_time (datetime): Gets or sets the BelBisZeit property.
            This property depends on the database field BelBisZeit.
        fix_loading_date_from (datetime): Gets or sets the BelFix property.
            This property depends on the database field BelFix.
        loading_fee (int): Gets or sets the BelGebNein property. This property
            depends on the database field BelGebNein.
        estimated_loading_date (datetime): Gets or sets the BelSollVon
            property. This property depends on the database field BelSollVon.
        estimated_loading_till_date (datetime): Gets or sets the BelSollBis
            property. This property depends on the database field BelSollBis.
        guaranteed_loading_date (datetime): Gets or sets the BelFixBis
            property. This property depends on the database field BelFixBis.
        loading_rf (int): Gets or sets the BelRF property. This property
            depends on the database field BelRF.
        bordero_no (int): Gets or sets the BorderoNo property. This property
            depends on the database field BordNr.
        delivery_area_no (int): Gets or sets the BelGebNr property. This
            property depends on the database field BelGebNr.
        first_tour_id (int): Gets or sets the ErsteTourIntNr property. This
            property depends on the database field ErsteTourIntNr.
        first_tour_no (int): Gets or sets the ErsteTourNr property. This
            property depends on the database field ErsteTourNr.
        tour_id (int): Gets or sets the TourId property. This property depends
            on the database field TourIntNr.
        tour_no (int): Gets or sets the TourNo property. This property depends
            on the database field TourNr.
        tour_sequential_no (int): Gets or sets the TourSequentialNo property.
            This property depends on the database field TourLfdNr.
        internal_bordero_no (int): Gets or sets the InternalBorderoNo
            property. This property depends on the database field BordEIntNr.
        sender_id (int): Gets or sets the SenderId property. This property
            depends on the database field AbsNr.
        departure_country_code (string): Gets or sets the DepartureCountryCode
            property. This property depends on the database field AbgLKZ.
        departure_id (int): Gets or sets the AbgID property. This property
            depends on the database field AbgID.
        departure_zip (string): Gets or sets the DepartureZip property. This
            property depends on the database field AbgPLZ.
        departure_city (string): Gets or sets the DepartureCity property. This
            property depends on the database field AbgOrt.
        sender_bsl (string): Gets or sets the AbgBSL property. This property
            depends on the database field AbgBSL.
        sender_degt (string): Gets or sets the AbgDEGT property. This property
            depends on the database field AbgDEGT.
        sender_community_code (int): Gets or sets the AbgGTB property. This
            property depends on the database field AbgGTB.
        departure_type (DepartureType1Enum): Gets or sets the AbgKZ property.
            This property depends on the database field AbgKZ.
        direct_delivery (bool): Gets or sets the Direkt property. This
            property depends on the database field Direkt.
        collecting_vehicle (string): Gets or sets the AbholKfz property. This
            property depends on the database field AbholKfz.
        consignee_id (int): Gets or sets the ConsigneeId property. This
            property depends on the database field EmpNr.
        unloading_country_code (string): Gets or sets the UnloadingCountryCode
            property. This property depends on the database field EmgLKZ.
        unloading_locality_id (int): Gets or sets the UnloadingLocalityId
            property. This property depends on the database field EmgID.
        unloading_zip (string): Gets or sets the UnloadingZip property. This
            property depends on the database field EmgPLZ.
        unloading_city (string): Gets or sets the UnloadingCity property. This
            property depends on the database field EmgOrt.
        consignee_bsl (string): Gets or sets the EmgBSL property. This
            property depends on the database field EmgBSL.
        consignee_degt (string): Gets or sets the EmgDEGT property. This
            property depends on the database field EmgDEGT.
        consignee_community_code (int): Gets or sets the EmgGTB property. This
            property depends on the database field EmgGTB.
        deliver_date_from (datetime): Gets or sets the EntVonDat property.
            This property depends on the database field EntVonDat.
        delivery_time_from (datetime): Gets or sets the EntVonZeit property.
            This property depends on the database field EntVonZeit.
        deliver_end_date (datetime): Gets or sets the EntBisDat property. This
            property depends on the database field EntBisDat.
        delivery_end_time (datetime): Gets or sets the TimeTill property. This
            property depends on the database field EntBisZeit.
        distance (float): Gets or sets the KM property. This property depends
            on the database field KM.
        distance_section (float): Gets or sets the KMGFT property. This
            property depends on the database field KMGFT.
        driving_time (int): Gets or sets the DrivingTime property. This
            property depends on the database field Fahrtzeit.
        freight_payer_id (int): Gets or sets the FreightPayerId property. This
            property depends on the database field FZNr.
        freight_payer_condition_type (string): Gets or sets the
            FreightPayerConditionType property. This property depends on the
            database field FZKond.
        freight_payer_optimizing_type (string): Gets or sets the
            FreightPayerOptimizingType property. This property depends on the
            database field FZOptKz.
        freight_payer_optimizing_no (int): Gets or sets the
            FreightPayerOptimizingNo property. This property depends on the
            database field FZOptNr.
        freight_payer_main_carriage (string): Gets or sets the
            FreightPayerMainCarriage property. This property depends on the
            database field FZHLKz.
        freight_payer_sales_tax_code (string): Gets or sets the
            FreightPayerSalesTaxCode property. This property depends on the
            database field FZUC.
        carrier_id (int): Gets or sets the CarrierId property. This property
            depends on the database field FFNr.
        carrier_condition_type (CarrierConditionType1Enum): Gets or sets the
            CarrierConditionType property. This property depends on the
            database field FFKond.
        carrier_optimization_type (CarrierOptimizationTypeEnum): Gets or sets
            the CarrierOptimizationType property. This property depends on the
            database field FFOptKz.
        carrier_optimization_no (int): Gets or sets the CarrierOptimizationNo
            property. This property depends on the database field FFOptNr.
        carrier_main_carriage_type (string): Gets or sets the
            CarrierMainCarriageType property. This property depends on the
            database field FFHLKz.
        carrier_sales_tax_code (string): Gets or sets the CarrierSalesTaxCode
            property. This property depends on the database field FFUC.
        traffic_mode (string): Gets or sets the TrafficMode property. This
            property depends on the database field VerkArt.
        freight_terms (string): Gets or sets the Freight Terms property. This
            property depends on the database field Frankatur.
        lump_sum (float): Gets or sets the LumpSum property. This property
            depends on the database field Pauschale.
        cash_on_delivery (float): Gets or sets the CashOnDelivery property.
            This property depends on the database field Nach.
        cash_on_delivery_sales_tax_code (string): Gets or sets the
            CashOnDeliverySalesTaxCode property. This property depends on the
            database field NachUC.
        weight (float): Gets or sets the Weight property. This property
            depends on the database field TatsGew.
        chargeable_weight (float): Gets or sets the ChargeableWeight property.
            This property depends on the database field FpflGew.
        packages (int): Gets or sets the Packages property. This property
            depends on the database field ColliAnz.
        pallets (int): Gets or sets the Pallets property. This property
            depends on the database field PalAnz.
        storage_places (int): Gets or sets the StoragePlaces property. This
            property depends on the database field SPAnz.
        destination_forwarder_id (int): Gets or sets the
            DestinationForwarderId property. This property depends on the
            database field EmpSped.
        lorry_id (string): Gets or sets the LorryId property. This property
            depends on the database field KfzZugID.
        proceeds (float): Gets or sets the Proceeds property. This property
            depends on the database field Erloes.
        charges (float): Gets or sets the Charges property. This property
            depends on the database field Kosten.
        goods_cd (int): Gets or sets the WarenKz property. This property
            depends on the database field WarenKz.
        permit_id (string): Gets or sets the PermitId property. This property
            depends on the database field Gen.
        co_driver_id (int): Gets or sets the CoDriverId property. This
            property depends on the database field BFahID.
        driver_id (int): Gets or sets the DriverId property. This property
            depends on the database field FahID.
        trailer_id (string): Gets or sets the TrailerId property. This
            property depends on the database field KfzAnhID.
        reference_number (string): Gets or sets the ReferenceNumber property.
            This property depends on the database field RefNr.
        swap_body_id_1 (string): Gets or sets the SwapBodyId1 property. This
            property depends on the database field WBruecke1.
        swap_body_2 (string): Gets or sets the WBruecke2 property. This
            property depends on the database field WBruecke2.
        is_credit_invoiced (int): Gets or sets the IsCreditInvoiced property.
            This property depends on the database field FakGs.
        hazardous_good_qualified (bool): Gets or sets the
            HazardousGoodQualified property. This property depends on the
            database field Gefahrgut.
        cost_center (int): Gets or sets the CostCenter property. This property
            depends on the database field Kostenstel.
        account_table (int): Gets or sets the AccountTable property. This
            property depends on the database field KtoTab.
        reefer_cargo (bool): Gets or sets the ReeferCargo property. This
            property depends on the database field Kuehlgut.
        load_dev_voucher_no (int): Gets or sets the LmScheinNr property. This
            property depends on the database field LmScheinNr.
        is_invoice_invoiced (int): Gets or sets the IsInvoiceInvoiced
            property. This property depends on the database field FakRe.
        is_pallet_note_printed (bool): Gets or sets the IsPalletNotePrinted
            property. This property depends on the database field DruPal.
        original_sender_id (int): Gets or sets the OriginalSenderId property.
            This property depends on the database field UrAbsNr.
        print_retrieval (bool): Gets or sets the DruAbhol property. This
            property depends on the database field DruAbhol.
        planned_swap_body_construction (string): Gets or sets the SollWBAufb
            property. This property depends on the database field SollWBAufb.
        freight_payer_common_rate (int): Gets or sets the
            FreightPayerCommonRate property. This property depends on the
            database field FZAllgKond.
        print_nn (bool): Gets or sets the DruNN property. This property
            depends on the database field DruNN.
        internal_order_no_debitor (int): Gets or sets the
            InternalOrderNoDebitor property. This property depends on the
            database field AufIntRe.
        invoicing_indicator (int): Gets or sets the InvoicingIndicator
            property. This property depends on the database field ReAbrKz.
        rec_adv (int): Gets or sets the RecAdv property. This property depends
            on the database field RecAdv.
        relation_kind (RelationKindEnum): Gets or sets the FZNahFern property.
            This property depends on the database field FZNahFern.
        is_transport_order_printed (bool): Gets or sets the DruTRANS property.
            This property depends on the database field DruTRANS.
        is_order_confirmation_printed (bool): Gets or sets the DruAufBest
            property. This property depends on the database field DruAufBest.
        final_recipient_id (int): Gets or sets the FinalRecipientId property.
            This property depends on the database field EndEmpNr.
        end_name_1 (string): Gets or sets the EndName1 property. This property
            depends on the database field EndName1.
        receiver_contry_code (string): Gets or sets the ReceiverContryCode
            property. This property depends on the database field EndLKZ.
        receiver_zip (string): Gets or sets the ReceiverZip property. This
            property depends on the database field EndPLZ.
        receiver_city (string): Gets or sets the ReceiverCity property. This
            property depends on the database field EndOrt.
        receiver_street (string): Gets or sets the ReceiverStreet property.
            This property depends on the database field EndStr.
        cash_on_delivery_currency (string): Gets or sets the
            CashOnDeliveryCurrency property. This property depends on the
            database field WNWaehr.
        carriage_forward_currency (string): Gets or sets the
            CarriageForwardCurrency property. This property depends on the
            database field FNWaehr.
        border_file_id (int): Gets or sets the Grenze property. This property
            depends on the database field Grenze.
        distance_till_border (float): Gets or sets the KMBisGrz property. This
            property depends on the database field KMBisGrz.
        km_after_border (float): Gets or sets the KMAbGrz property. This
            property depends on the database field KMAbGrz.
        goods_currency (string): Gets or sets the WWWaehr property. This
            property depends on the database field WWWaehr.
        intra_stat_customer_id (int): Gets or sets the IntrastatCustomerNo
            property. This property depends on the database field IntraAkpNr.
        are_labels_printed (bool): Gets or sets the DruAufEtik property. This
            property depends on the database field DruAufEtik.
        division_id (int): Gets or sets the DivisionId property. This property
            depends on the database field HAbtID.
        harbour (int): Gets or sets the Harbour property. This property
            depends on the database field Ladehafen.
        dsi_number (string): Gets or sets the DsiNr property. This property
            depends on the database field DsiNr.
        pieces (int): Gets or sets the Pieces property. This property depends
            on the database field MEAnz.
        dossier_id (int): Gets or sets the DosIntNr property. This property
            depends on the database field DosIntNr.
        dossier_no_short (string): Gets or sets the DosNr property. This
            property depends on the database field DosNr.
        load_dev_booking (bool): Gets or sets the LoadDevBooking property.
            This property depends on the database field LmVerb.
        declared_value (float): Gets or sets the DeclaredValue property. This
            property depends on the database field Warenwert.
        pri_ezb (bool): Gets or sets the DruEZB property. This property
            depends on the database field DruEZB.
        cubic_decimeter (float): Gets or sets the CubicDecimeter property.
            This property depends on the database field CDMAnz.
        loading_meter (float): Gets or sets the LoadingMeter property. This
            property depends on the database field LMAnz.
        square_meter (float): Gets or sets the SquareMeter property. This
            property depends on the database field QMAnz.
        cost_unit (int): Gets or sets the CostUnit property. This property
            depends on the database field KTraeger.
        original_sender_relation (string): Gets or sets the
            OriginalSenderRelation property. This property depends on the
            database field UrAbsRel.
        loading_area_id (string): Gets or sets the LoadingArea property. This
            property depends on the database field GBTAbg.
        unloading_area_id (string): Gets or sets the UnloadingArea property.
            This property depends on the database field GBTEmg.
        is_company_paper_printed (bool): Gets or sets the DruSpedAkt property.
            This property depends on the database field DruSpedAkt.
        order_group (string): Gets or sets the AufGrp property. This property
            depends on the database field AufGrp.
        dispo_info_1 (int): Gets or sets the DispoInfo1 property. This
            property depends on the database field DispoInfo1.
        dispo_info_2 (int): Gets or sets the DispoInfo2 property. This
            property depends on the database field DispoInfo2.
        dispo_info_3 (int): Gets or sets the DispoInfo3 property. This
            property depends on the database field DispoInfo3.
        dispatch_information (int): Gets or sets the DispatchInformation
            property. This property depends on the database field DispoInfo4.
        order_category (string): Gets or sets the AufKlasse property. This
            property depends on the database field AufKlasse.
        is_loading_list_printed (bool): Gets or sets the IsLoadingListPrinted
            property. This property depends on the database field DruLadeL.
        bord_int_ext (int): Gets or sets the BordIntExt property. This
            property depends on the database field BordIntExt.
        outra_stat_customer_id (int): Gets or sets the OutraAkpNr property.
            This property depends on the database field OutraAkpNr.
        unloading_date_fix_from (datetime): Gets or sets the EntFix property.
            This property depends on the database field EntFix.
        invoice_division_id (int): Gets or sets the InvoiceDivisionId
            property. This property depends on the database field ReAbtID.
        short_telematic_message (string): Gets or sets the
            ShortTelematicMessage property. This property depends on the
            database field TMMsgMC.
        is_freight_payer_invoicing_blocked (bool): Gets or sets the
            IsFreightPayerInvoicingBlocked property. This property depends on
            the database field FZFakSperr.
        d_good_id (int): Gets or sets the AufGGutNr property. This property
            depends on the database field AufGGutNr.
        distance_load (float): Gets or sets the Distance property. This
            property depends on the database field KMLast.
        distance_toll (float): Gets or sets the DistanceToll property. This
            property depends on the database field KMMaut.
        distance_empty (float): Gets or sets the DistanceEmpty property. This
            property depends on the database field KMLeer.
        distance_toll_empty (float): Gets or sets the DistanceTollEmpty
            property. This property depends on the database field KMLeerMaut.
        container_id (int): Gets or sets the TMittel property. This property
            depends on the database field TMittel.
        unloading_list_id (int): Gets or sets the ELadLIntNr property. This
            property depends on the database field ELadLIntNr.
        cargo_insurance (string): Gets or sets the FZKunVB property. This
            property depends on the database field FZKunVB.
        bonus_lump_sum (float): Gets or sets the TVPausch property. This
            property depends on the database field TVPausch.
        distance_state (DistanceStateEnum): Gets or sets the DistanceState
            property. This property depends on the database field KMStatus.
        sv_mode (int): Gets or sets the SVModus property. This property
            depends on the database field SVModus.
        palletts (float): Gets or sets the PalAnzSum property. This property
            depends on the database field PalAnzSum.
        storage_places_sum (float): Gets or sets the PallettSpacesCount
            property. This property depends on the database field SpAnzSum.
        pieces_sum (float): Gets or sets the MeAnzSum property. This property
            depends on the database field MeAnzSum.
        shipping_units (float): Gets or sets the ShippingUnits property. This
            property depends on the database field NVEAnzSum.
        lis_exit (int): Gets or sets the LisExit property. This property
            depends on the database field LisExit.
        base_order_no (int): Gets or sets the BasisNr property. This property
            depends on the database field BasisNr.
        base_order_id (int): Gets or sets the BasisIntNr property. This
            property depends on the database field BasisIntNr.
        invoice_department_id (int): Gets or sets the InvoiceDepartmentId
            property. This property depends on the database field ReBerID.
        department_id (int): Gets or sets the DepartmentId property. This
            property depends on the database field HBerID.
        sub_department_id (int): Gets or sets the UBerID property. This
            property depends on the database field UBerID.
        internal_cost_allocation_mode (int): Gets or sets the
            InternalCostAllocationMode property. This property depends on the
            database field ILVModus.
        created_on (datetime): Gets or sets the CreatedOn property. This
            property depends on the database field ErstDat.
        debit_form_type (int): Gets or sets the FormType property. This
            property depends on the database field FormTyp.
        own_form_type (int): Gets or sets the OwnFormType property. This
            property depends on the database field FormETyp.
        currency_print (string): Gets or sets the CurrencyPrint property. This
            property depends on the database field WaehrDru.
        unloading_date_till_planned (datetime): Gets or sets the EntSollBis
            property. This property depends on the database field EntSollBis.
        transportation_route_id (int): Gets or sets the TransportationRoute
            property. This property depends on the database field ErfDR.
        logistic_provider_service_id (int): Gets or sets the DlSvINr property.
            This property depends on the database field DlSvINr.
        order_id_bord (int): Gets or sets the AufIntBord property. This
            property depends on the database field AufIntBord.
        bord_int_sub (int): Gets or sets the BordIntSub property. This
            property depends on the database field BordIntSub.
        order_int_sub (int): Gets or sets the AufIntSub property. This
            property depends on the database field AufIntSub.
        calculated_amount (float): Gets or sets the CalculatedAmount property.
            This property depends on the database field ReNettoAnt.
        cont_int_nr (int): Gets or sets the ContIntNr property. This property
            depends on the database field ContIntNr.
        cancellation_state (int): Gets or sets the CancellationState property.
            This property depends on the database field DelKz.
        ilv_ori_nr (int): Gets or sets the ILVOriNr property. This property
            depends on the database field ILVOriNr.
        ilv_abg_nr (int): Gets or sets the ILVAbgNr property. This property
            depends on the database field ILVAbgNr.
        target_weight (float): Gets or sets the TargetWeight property. This
            property depends on the database field SolTGewSum.
        exchange_rate_date (datetime): Gets or sets the WKursDat property.
            This property depends on the database field WKursDat.
        created_by (string): Gets or sets the CreatedBy property. This
            property depends on the database field ErstUs.
        dispo_info_5 (int): Gets or sets the DispoInfo5 property. This
            property depends on the database field DispoInfo5.
        dispo_info_6 (int): Gets or sets the DispoInfo6 property. This
            property depends on the database field DispoInfo6.
        dispo_info_7 (int): Gets or sets the DispoInfo7 property. This
            property depends on the database field DispoInfo7.
        dispo_info_8 (int): Gets or sets the DispoInfo8 property. This
            property depends on the database field DispoInfo8.
        dispo_info_9 (int): Gets or sets the DispoInfo9 property. This
            property depends on the database field DispoInfo9.
        dispo_inf_10 (int): Gets or sets the DispoInf10 property. This
            property depends on the database field DispoInf10.
        route_id (int): Gets or sets the RouteId property. This property
            depends on the database field RoutIntNr.
        km_methode (string): Gets or sets the KmMethode property. This
            property depends on the database field KmMethode.
        last_delivery_date (datetime): Gets or sets the EntSollVon property.
            This property depends on the database field EntSollVon.
        departure_relation_id (string): Gets or sets the AbholRel property.
            This property depends on the database field AbholRel.
        final_recipient_relation_relation_id (string): Gets or sets the
            EndEmpRel property. This property depends on the database field
            EndEmpRel.
        given_packages (float): Gets or sets the SollVPESum property. This
            property depends on the database field SollVPESum.
        unloading_date_fix_till (datetime): Gets or sets the EntFixBis
            property. This property depends on the database field EntFixBis.
        internal_order_no_debitor_3 (int): Gets or sets the
            InternalOrderNoDebitor3 property. This property depends on the
            database field AufIntRe3.
        order_state (int): Gets or sets the SLStatus property. This property
            depends on the database field SLStatus.
        pre_order_planning_id (int): Gets or sets the PreOrderPlanningId
            property. This property depends on the database field VDisIntNr.
        owner (string): Gets or sets the EigenUS property. This property
            depends on the database field EigenUS.
        dossier_no (string): Gets or sets the PositionNumber property. This
            property depends on the database field LPosNr.
        logistic_provider_information (string): Gets or sets the AufDLInfo
            property. This property depends on the database field AufDLInfo.
        pre_order_planning_no (string): Gets or sets the PreOrderPlanningNo
            property. This property depends on the database field VDisNrExt.
        unloading_container (int): Gets or sets the EntBeh property. This
            property depends on the database field EntBeh.
        unloading_rf (int): Gets or sets the EntRF property. This property
            depends on the database field EntRF.
        contact_person_id (int): Gets or sets the ContactPersonId property.
            This property depends on the database field AspNr.
        original_order_type (OriginalOrderType1Enum): Gets or sets the
            ErstAufArt property. This property depends on the database field
            ErstAufArt.
        additional_charging_no (int): Gets or sets the AdditionalChargingNo
            property. This property depends on the database field ZBNr.
        log_model_id (int): Gets or sets the LogModelId property. This
            property depends on the database field LogModelId.
        service_order_template_id (int): Gets or sets the
            ServiceOrderTemplateId property. This property depends on the
            database field ServiceOrderTemplateId.
        order_source_area (int): Gets or sets the SourceArea property. This
            property depends on the database field SourceArea.
        terms_of_payment (string): Gets or sets the TermsOfPayment property.
            This property depends on the database field ZahlBed.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "initial_cost": 'initialCost',
        "is_fbf_printed": 'isFBFPrinted',
        "is_sped_us_printed": 'isSpedUsPrinted',
        "incoming_bordero_no": 'incomingBorderoNo',
        "sequence_no": 'sequenceNo',
        "order_input_type": 'orderInputType',
        "is_cash_payment": 'isCashPayment',
        "order_id_gs": 'orderIdGs',
        "cash_on_delivery_vat_free": 'cashOnDeliveryVATFree',
        "shipment_id": 'shipmentId',
        "order_no": 'orderNo',
        "order_sub_number": 'orderSubNumber',
        "company": 'company',
        "accounting_division": 'accountingDivision',
        "division": 'division',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "order_type": 'orderType',
        "order_text": 'orderText',
        "remark": 'remark',
        "order_date": 'orderDate',
        "customer_id": 'customerId',
        "delivery_number": 'deliveryNumber',
        "delivery_date": 'deliveryDate',
        "picking_no": 'pickingNo',
        "charge_no": 'chargeNo',
        "bordero_id": 'borderoId',
        "loading_customer_id": 'loadingCustomerId',
        "loading_country_code": 'loadingCountryCode',
        "loading_locality_id": 'loadingLocalityId',
        "loading_zip": 'loadingZip',
        "loading_city": 'loadingCity',
        "loadingt_bsl": 'loadingtBSL',
        "degt": 'degt',
        "community_code": 'communityCode',
        "loading_from_date": 'loadingFromDate',
        "loading_from_time": 'loadingFromTime',
        "loading_till_date": 'loadingTillDate',
        "loading_till_time": 'loadingTillTime',
        "fix_loading_date_from": 'fixLoadingDateFrom',
        "loading_fee": 'loadingFee',
        "estimated_loading_date": 'estimatedLoadingDate',
        "estimated_loading_till_date": 'estimatedLoadingTillDate',
        "guaranteed_loading_date": 'guaranteedLoadingDate',
        "loading_rf": 'loadingRF',
        "bordero_no": 'borderoNo',
        "delivery_area_no": 'deliveryAreaNo',
        "first_tour_id": 'firstTourId',
        "first_tour_no": 'firstTourNo',
        "tour_id": 'tourId',
        "tour_no": 'tourNo',
        "tour_sequential_no": 'tourSequentialNo',
        "internal_bordero_no": 'internalBorderoNo',
        "sender_id": 'senderId',
        "departure_country_code": 'departureCountryCode',
        "departure_id": 'departureID',
        "departure_zip": 'departureZip',
        "departure_city": 'departureCity',
        "sender_bsl": 'senderBSL',
        "sender_degt": 'senderDEGT',
        "sender_community_code": 'senderCommunityCode',
        "departure_type": 'departureType',
        "direct_delivery": 'directDelivery',
        "collecting_vehicle": 'collectingVehicle',
        "consignee_id": 'consigneeId',
        "unloading_country_code": 'unloadingCountryCode',
        "unloading_locality_id": 'unloadingLocalityId',
        "unloading_zip": 'unloadingZip',
        "unloading_city": 'unloadingCity',
        "consignee_bsl": 'consigneeBSL',
        "consignee_degt": 'consigneeDEGT',
        "consignee_community_code": 'consigneeCommunityCode',
        "deliver_date_from": 'deliverDateFrom',
        "delivery_time_from": 'deliveryTimeFrom',
        "deliver_end_date": 'deliverEndDate',
        "delivery_end_time": 'deliveryEndTime',
        "distance": 'distance',
        "distance_section": 'distanceSection',
        "driving_time": 'drivingTime',
        "freight_payer_id": 'freightPayerId',
        "freight_payer_condition_type": 'freightPayerConditionType',
        "freight_payer_optimizing_type": 'freightPayerOptimizingType',
        "freight_payer_optimizing_no": 'freightPayerOptimizingNo',
        "freight_payer_main_carriage": 'freightPayerMainCarriage',
        "freight_payer_sales_tax_code": 'freightPayerSalesTaxCode',
        "carrier_id": 'carrierId',
        "carrier_condition_type": 'carrierConditionType',
        "carrier_optimization_type": 'carrierOptimizationType',
        "carrier_optimization_no": 'carrierOptimizationNo',
        "carrier_main_carriage_type": 'carrierMainCarriageType',
        "carrier_sales_tax_code": 'carrierSalesTaxCode',
        "traffic_mode": 'trafficMode',
        "freight_terms": 'freightTerms',
        "lump_sum": 'lumpSum',
        "cash_on_delivery": 'cashOnDelivery',
        "cash_on_delivery_sales_tax_code": 'cashOnDeliverySalesTaxCode',
        "weight": 'weight',
        "chargeable_weight": 'chargeableWeight',
        "packages": 'packages',
        "pallets": 'pallets',
        "storage_places": 'storagePlaces',
        "destination_forwarder_id": 'destinationForwarderId',
        "lorry_id": 'lorryId',
        "proceeds": 'proceeds',
        "charges": 'charges',
        "goods_cd": 'goodsCd',
        "permit_id": 'permitId',
        "co_driver_id": 'coDriverId',
        "driver_id": 'driverId',
        "trailer_id": 'trailerId',
        "reference_number": 'referenceNumber',
        "swap_body_id_1": 'swapBodyId1',
        "swap_body_2": 'swapBody2',
        "is_credit_invoiced": 'isCreditInvoiced',
        "hazardous_good_qualified": 'hazardousGoodQualified',
        "cost_center": 'costCenter',
        "account_table": 'accountTable',
        "reefer_cargo": 'reeferCargo',
        "load_dev_voucher_no": 'loadDevVoucherNo',
        "is_invoice_invoiced": 'isInvoiceInvoiced',
        "is_pallet_note_printed": 'isPalletNotePrinted',
        "original_sender_id": 'originalSenderId',
        "print_retrieval": 'printRetrieval',
        "planned_swap_body_construction": 'plannedSwapBodyConstruction',
        "freight_payer_common_rate": 'freightPayerCommonRate',
        "print_nn": 'printNN',
        "internal_order_no_debitor": 'internalOrderNoDebitor',
        "invoicing_indicator": 'invoicingIndicator',
        "rec_adv": 'recAdv',
        "relation_kind": 'relationKind',
        "is_transport_order_printed": 'isTransportOrderPrinted',
        "is_order_confirmation_printed": 'isOrderConfirmationPrinted',
        "final_recipient_id": 'finalRecipientId',
        "end_name_1": 'endName1',
        "receiver_contry_code": 'receiverContryCode',
        "receiver_zip": 'receiverZip',
        "receiver_city": 'receiverCity',
        "receiver_street": 'receiverStreet',
        "cash_on_delivery_currency": 'cashOnDeliveryCurrency',
        "carriage_forward_currency": 'carriageForwardCurrency',
        "border_file_id": 'borderFileId',
        "distance_till_border": 'distanceTillBorder',
        "km_after_border": 'kmAfterBorder',
        "goods_currency": 'goodsCurrency',
        "intra_stat_customer_id": 'intraStatCustomerId',
        "are_labels_printed": 'areLabelsPrinted',
        "division_id": 'divisionId',
        "harbour": 'harbour',
        "dsi_number": 'dsiNumber',
        "pieces": 'pieces',
        "dossier_id": 'dossierId',
        "dossier_no_short": 'dossierNoShort',
        "load_dev_booking": 'loadDevBooking',
        "declared_value": 'declaredValue',
        "pri_ezb": 'priEZB',
        "cubic_decimeter": 'cubicDecimeter',
        "loading_meter": 'loadingMeter',
        "square_meter": 'squareMeter',
        "cost_unit": 'costUnit',
        "original_sender_relation": 'originalSenderRelation',
        "loading_area_id": 'loadingAreaId',
        "unloading_area_id": 'unloadingAreaId',
        "is_company_paper_printed": 'isCompanyPaperPrinted',
        "order_group": 'orderGroup',
        "dispo_info_1": 'dispoInfo1',
        "dispo_info_2": 'dispoInfo2',
        "dispo_info_3": 'dispoInfo3',
        "dispatch_information": 'dispatchInformation',
        "order_category": 'orderCategory',
        "is_loading_list_printed": 'isLoadingListPrinted',
        "bord_int_ext": 'bordIntExt',
        "outra_stat_customer_id": 'outraStatCustomerId',
        "unloading_date_fix_from": 'unloadingDateFixFrom',
        "invoice_division_id": 'invoiceDivisionId',
        "short_telematic_message": 'shortTelematicMessage',
        "is_freight_payer_invoicing_blocked": 'isFreightPayerInvoicingBlocked',
        "d_good_id": 'dGoodId',
        "distance_load": 'distanceLoad',
        "distance_toll": 'distanceToll',
        "distance_empty": 'distanceEmpty',
        "distance_toll_empty": 'distanceTollEmpty',
        "container_id": 'containerId',
        "unloading_list_id": 'unloadingListId',
        "cargo_insurance": 'cargoInsurance',
        "bonus_lump_sum": 'bonusLumpSum',
        "distance_state": 'distanceState',
        "sv_mode": 'svMode',
        "palletts": 'palletts',
        "storage_places_sum": 'storagePlacesSum',
        "pieces_sum": 'piecesSum',
        "shipping_units": 'shippingUnits',
        "lis_exit": 'lisExit',
        "base_order_no": 'baseOrderNo',
        "base_order_id": 'baseOrderId',
        "invoice_department_id": 'invoiceDepartmentId',
        "department_id": 'departmentId',
        "sub_department_id": 'subDepartmentId',
        "internal_cost_allocation_mode": 'internalCostAllocationMode',
        "created_on": 'createdOn',
        "debit_form_type": 'debitFormType',
        "own_form_type": 'ownFormType',
        "currency_print": 'currencyPrint',
        "unloading_date_till_planned": 'unloadingDateTillPlanned',
        "transportation_route_id": 'transportationRouteId',
        "logistic_provider_service_id": 'logisticProviderServiceId',
        "order_id_bord": 'orderIdBord',
        "bord_int_sub": 'bordIntSub',
        "order_int_sub": 'orderIntSub',
        "calculated_amount": 'calculatedAmount',
        "cont_int_nr": 'contIntNr',
        "cancellation_state": 'cancellationState',
        "ilv_ori_nr": 'ilvOriNr',
        "ilv_abg_nr": 'ilvAbgNr',
        "target_weight": 'targetWeight',
        "exchange_rate_date": 'exchangeRateDate',
        "created_by": 'createdBy',
        "dispo_info_5": 'dispoInfo5',
        "dispo_info_6": 'dispoInfo6',
        "dispo_info_7": 'dispoInfo7',
        "dispo_info_8": 'dispoInfo8',
        "dispo_info_9": 'dispoInfo9',
        "dispo_inf_10": 'dispoInf10',
        "route_id": 'routeId',
        "km_methode": 'kmMethode',
        "last_delivery_date": 'lastDeliveryDate',
        "departure_relation_id": 'departureRelationId',
        "final_recipient_relation_relation_id": 'finalRecipientRelationRelationId',
        "given_packages": 'givenPackages',
        "unloading_date_fix_till": 'unloadingDateFixTill',
        "internal_order_no_debitor_3": 'internalOrderNoDebitor3',
        "order_state": 'orderState',
        "pre_order_planning_id": 'preOrderPlanningId',
        "owner": 'owner',
        "dossier_no": 'dossierNo',
        "logistic_provider_information": 'logisticProviderInformation',
        "pre_order_planning_no": 'preOrderPlanningNo',
        "unloading_container": 'unloadingContainer',
        "unloading_rf": 'unloadingRF',
        "contact_person_id": 'contactPersonId',
        "original_order_type": 'originalOrderType',
        "additional_charging_no": 'additionalChargingNo',
        "log_model_id": 'logModelId',
        "service_order_template_id": 'serviceOrderTemplateId',
        "order_source_area": 'orderSourceArea',
        "terms_of_payment": 'termsOfPayment'
    }

    _optionals = [
        'initial_cost',
        'is_fbf_printed',
        'is_sped_us_printed',
        'incoming_bordero_no',
        'sequence_no',
        'order_input_type',
        'is_cash_payment',
        'order_id_gs',
        'cash_on_delivery_vat_free',
        'shipment_id',
        'order_no',
        'order_sub_number',
        'company',
        'accounting_division',
        'division',
        'changed_on',
        'changed_by',
        'order_type',
        'order_text',
        'remark',
        'order_date',
        'customer_id',
        'delivery_number',
        'delivery_date',
        'picking_no',
        'charge_no',
        'bordero_id',
        'loading_customer_id',
        'loading_country_code',
        'loading_locality_id',
        'loading_zip',
        'loading_city',
        'loadingt_bsl',
        'degt',
        'community_code',
        'loading_from_date',
        'loading_from_time',
        'loading_till_date',
        'loading_till_time',
        'fix_loading_date_from',
        'loading_fee',
        'estimated_loading_date',
        'estimated_loading_till_date',
        'guaranteed_loading_date',
        'loading_rf',
        'bordero_no',
        'delivery_area_no',
        'first_tour_id',
        'first_tour_no',
        'tour_id',
        'tour_no',
        'tour_sequential_no',
        'internal_bordero_no',
        'sender_id',
        'departure_country_code',
        'departure_id',
        'departure_zip',
        'departure_city',
        'sender_bsl',
        'sender_degt',
        'sender_community_code',
        'departure_type',
        'direct_delivery',
        'collecting_vehicle',
        'consignee_id',
        'unloading_country_code',
        'unloading_locality_id',
        'unloading_zip',
        'unloading_city',
        'consignee_bsl',
        'consignee_degt',
        'consignee_community_code',
        'deliver_date_from',
        'delivery_time_from',
        'deliver_end_date',
        'delivery_end_time',
        'distance',
        'distance_section',
        'driving_time',
        'freight_payer_id',
        'freight_payer_condition_type',
        'freight_payer_optimizing_type',
        'freight_payer_optimizing_no',
        'freight_payer_main_carriage',
        'freight_payer_sales_tax_code',
        'carrier_id',
        'carrier_condition_type',
        'carrier_optimization_type',
        'carrier_optimization_no',
        'carrier_main_carriage_type',
        'carrier_sales_tax_code',
        'traffic_mode',
        'freight_terms',
        'lump_sum',
        'cash_on_delivery',
        'cash_on_delivery_sales_tax_code',
        'weight',
        'chargeable_weight',
        'packages',
        'pallets',
        'storage_places',
        'destination_forwarder_id',
        'lorry_id',
        'proceeds',
        'charges',
        'goods_cd',
        'permit_id',
        'co_driver_id',
        'driver_id',
        'trailer_id',
        'reference_number',
        'swap_body_id_1',
        'swap_body_2',
        'is_credit_invoiced',
        'hazardous_good_qualified',
        'cost_center',
        'account_table',
        'reefer_cargo',
        'load_dev_voucher_no',
        'is_invoice_invoiced',
        'is_pallet_note_printed',
        'original_sender_id',
        'print_retrieval',
        'planned_swap_body_construction',
        'freight_payer_common_rate',
        'print_nn',
        'internal_order_no_debitor',
        'invoicing_indicator',
        'rec_adv',
        'relation_kind',
        'is_transport_order_printed',
        'is_order_confirmation_printed',
        'final_recipient_id',
        'end_name_1',
        'receiver_contry_code',
        'receiver_zip',
        'receiver_city',
        'receiver_street',
        'cash_on_delivery_currency',
        'carriage_forward_currency',
        'border_file_id',
        'distance_till_border',
        'km_after_border',
        'goods_currency',
        'intra_stat_customer_id',
        'are_labels_printed',
        'division_id',
        'harbour',
        'dsi_number',
        'pieces',
        'dossier_id',
        'dossier_no_short',
        'load_dev_booking',
        'declared_value',
        'pri_ezb',
        'cubic_decimeter',
        'loading_meter',
        'square_meter',
        'cost_unit',
        'original_sender_relation',
        'loading_area_id',
        'unloading_area_id',
        'is_company_paper_printed',
        'order_group',
        'dispo_info_1',
        'dispo_info_2',
        'dispo_info_3',
        'dispatch_information',
        'order_category',
        'is_loading_list_printed',
        'bord_int_ext',
        'outra_stat_customer_id',
        'unloading_date_fix_from',
        'invoice_division_id',
        'short_telematic_message',
        'is_freight_payer_invoicing_blocked',
        'd_good_id',
        'distance_load',
        'distance_toll',
        'distance_empty',
        'distance_toll_empty',
        'container_id',
        'unloading_list_id',
        'cargo_insurance',
        'bonus_lump_sum',
        'distance_state',
        'sv_mode',
        'palletts',
        'storage_places_sum',
        'pieces_sum',
        'shipping_units',
        'lis_exit',
        'base_order_no',
        'base_order_id',
        'invoice_department_id',
        'department_id',
        'sub_department_id',
        'internal_cost_allocation_mode',
        'created_on',
        'debit_form_type',
        'own_form_type',
        'currency_print',
        'unloading_date_till_planned',
        'transportation_route_id',
        'logistic_provider_service_id',
        'order_id_bord',
        'bord_int_sub',
        'order_int_sub',
        'calculated_amount',
        'cont_int_nr',
        'cancellation_state',
        'ilv_ori_nr',
        'ilv_abg_nr',
        'target_weight',
        'exchange_rate_date',
        'created_by',
        'dispo_info_5',
        'dispo_info_6',
        'dispo_info_7',
        'dispo_info_8',
        'dispo_info_9',
        'dispo_inf_10',
        'route_id',
        'km_methode',
        'last_delivery_date',
        'departure_relation_id',
        'final_recipient_relation_relation_id',
        'given_packages',
        'unloading_date_fix_till',
        'internal_order_no_debitor_3',
        'order_state',
        'pre_order_planning_id',
        'owner',
        'dossier_no',
        'logistic_provider_information',
        'pre_order_planning_no',
        'unloading_container',
        'unloading_rf',
        'contact_person_id',
        'original_order_type',
        'additional_charging_no',
        'log_model_id',
        'service_order_template_id',
        'order_source_area',
        'terms_of_payment',
    ]

    def __init__(self,
                 initial_cost=APIHelper.SKIP,
                 is_fbf_printed=APIHelper.SKIP,
                 is_sped_us_printed=APIHelper.SKIP,
                 incoming_bordero_no=APIHelper.SKIP,
                 sequence_no=APIHelper.SKIP,
                 order_input_type=APIHelper.SKIP,
                 is_cash_payment=APIHelper.SKIP,
                 order_id_gs=APIHelper.SKIP,
                 cash_on_delivery_vat_free=APIHelper.SKIP,
                 shipment_id=APIHelper.SKIP,
                 order_no=APIHelper.SKIP,
                 order_sub_number=APIHelper.SKIP,
                 company=APIHelper.SKIP,
                 accounting_division=APIHelper.SKIP,
                 division=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 order_type=APIHelper.SKIP,
                 order_text=APIHelper.SKIP,
                 remark=APIHelper.SKIP,
                 order_date=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 delivery_number=APIHelper.SKIP,
                 delivery_date=APIHelper.SKIP,
                 picking_no=APIHelper.SKIP,
                 charge_no=APIHelper.SKIP,
                 bordero_id=APIHelper.SKIP,
                 loading_customer_id=APIHelper.SKIP,
                 loading_country_code=APIHelper.SKIP,
                 loading_locality_id=APIHelper.SKIP,
                 loading_zip=APIHelper.SKIP,
                 loading_city=APIHelper.SKIP,
                 loadingt_bsl=APIHelper.SKIP,
                 degt=APIHelper.SKIP,
                 community_code=APIHelper.SKIP,
                 loading_from_date=APIHelper.SKIP,
                 loading_from_time=APIHelper.SKIP,
                 loading_till_date=APIHelper.SKIP,
                 loading_till_time=APIHelper.SKIP,
                 fix_loading_date_from=APIHelper.SKIP,
                 loading_fee=APIHelper.SKIP,
                 estimated_loading_date=APIHelper.SKIP,
                 estimated_loading_till_date=APIHelper.SKIP,
                 guaranteed_loading_date=APIHelper.SKIP,
                 loading_rf=APIHelper.SKIP,
                 bordero_no=APIHelper.SKIP,
                 delivery_area_no=APIHelper.SKIP,
                 first_tour_id=APIHelper.SKIP,
                 first_tour_no=APIHelper.SKIP,
                 tour_id=APIHelper.SKIP,
                 tour_no=APIHelper.SKIP,
                 tour_sequential_no=APIHelper.SKIP,
                 internal_bordero_no=APIHelper.SKIP,
                 sender_id=APIHelper.SKIP,
                 departure_country_code=APIHelper.SKIP,
                 departure_id=APIHelper.SKIP,
                 departure_zip=APIHelper.SKIP,
                 departure_city=APIHelper.SKIP,
                 sender_bsl=APIHelper.SKIP,
                 sender_degt=APIHelper.SKIP,
                 sender_community_code=APIHelper.SKIP,
                 departure_type=APIHelper.SKIP,
                 direct_delivery=APIHelper.SKIP,
                 collecting_vehicle=APIHelper.SKIP,
                 consignee_id=APIHelper.SKIP,
                 unloading_country_code=APIHelper.SKIP,
                 unloading_locality_id=APIHelper.SKIP,
                 unloading_zip=APIHelper.SKIP,
                 unloading_city=APIHelper.SKIP,
                 consignee_bsl=APIHelper.SKIP,
                 consignee_degt=APIHelper.SKIP,
                 consignee_community_code=APIHelper.SKIP,
                 deliver_date_from=APIHelper.SKIP,
                 delivery_time_from=APIHelper.SKIP,
                 deliver_end_date=APIHelper.SKIP,
                 delivery_end_time=APIHelper.SKIP,
                 distance=APIHelper.SKIP,
                 distance_section=APIHelper.SKIP,
                 driving_time=APIHelper.SKIP,
                 freight_payer_id=APIHelper.SKIP,
                 freight_payer_condition_type=APIHelper.SKIP,
                 freight_payer_optimizing_type=APIHelper.SKIP,
                 freight_payer_optimizing_no=APIHelper.SKIP,
                 freight_payer_main_carriage=APIHelper.SKIP,
                 freight_payer_sales_tax_code=APIHelper.SKIP,
                 carrier_id=APIHelper.SKIP,
                 carrier_condition_type=APIHelper.SKIP,
                 carrier_optimization_type=APIHelper.SKIP,
                 carrier_optimization_no=APIHelper.SKIP,
                 carrier_main_carriage_type=APIHelper.SKIP,
                 carrier_sales_tax_code=APIHelper.SKIP,
                 traffic_mode=APIHelper.SKIP,
                 freight_terms=APIHelper.SKIP,
                 lump_sum=APIHelper.SKIP,
                 cash_on_delivery=APIHelper.SKIP,
                 cash_on_delivery_sales_tax_code=APIHelper.SKIP,
                 weight=APIHelper.SKIP,
                 chargeable_weight=APIHelper.SKIP,
                 packages=APIHelper.SKIP,
                 pallets=APIHelper.SKIP,
                 storage_places=APIHelper.SKIP,
                 destination_forwarder_id=APIHelper.SKIP,
                 lorry_id=APIHelper.SKIP,
                 proceeds=APIHelper.SKIP,
                 charges=APIHelper.SKIP,
                 goods_cd=APIHelper.SKIP,
                 permit_id=APIHelper.SKIP,
                 co_driver_id=APIHelper.SKIP,
                 driver_id=APIHelper.SKIP,
                 trailer_id=APIHelper.SKIP,
                 reference_number=APIHelper.SKIP,
                 swap_body_id_1=APIHelper.SKIP,
                 swap_body_2=APIHelper.SKIP,
                 is_credit_invoiced=APIHelper.SKIP,
                 hazardous_good_qualified=APIHelper.SKIP,
                 cost_center=APIHelper.SKIP,
                 account_table=APIHelper.SKIP,
                 reefer_cargo=APIHelper.SKIP,
                 load_dev_voucher_no=APIHelper.SKIP,
                 is_invoice_invoiced=APIHelper.SKIP,
                 is_pallet_note_printed=APIHelper.SKIP,
                 original_sender_id=APIHelper.SKIP,
                 print_retrieval=APIHelper.SKIP,
                 planned_swap_body_construction=APIHelper.SKIP,
                 freight_payer_common_rate=APIHelper.SKIP,
                 print_nn=APIHelper.SKIP,
                 internal_order_no_debitor=APIHelper.SKIP,
                 invoicing_indicator=APIHelper.SKIP,
                 rec_adv=APIHelper.SKIP,
                 relation_kind=APIHelper.SKIP,
                 is_transport_order_printed=APIHelper.SKIP,
                 is_order_confirmation_printed=APIHelper.SKIP,
                 final_recipient_id=APIHelper.SKIP,
                 end_name_1=APIHelper.SKIP,
                 receiver_contry_code=APIHelper.SKIP,
                 receiver_zip=APIHelper.SKIP,
                 receiver_city=APIHelper.SKIP,
                 receiver_street=APIHelper.SKIP,
                 cash_on_delivery_currency=APIHelper.SKIP,
                 carriage_forward_currency=APIHelper.SKIP,
                 border_file_id=APIHelper.SKIP,
                 distance_till_border=APIHelper.SKIP,
                 km_after_border=APIHelper.SKIP,
                 goods_currency=APIHelper.SKIP,
                 intra_stat_customer_id=APIHelper.SKIP,
                 are_labels_printed=APIHelper.SKIP,
                 division_id=APIHelper.SKIP,
                 harbour=APIHelper.SKIP,
                 dsi_number=APIHelper.SKIP,
                 pieces=APIHelper.SKIP,
                 dossier_id=APIHelper.SKIP,
                 dossier_no_short=APIHelper.SKIP,
                 load_dev_booking=APIHelper.SKIP,
                 declared_value=APIHelper.SKIP,
                 pri_ezb=APIHelper.SKIP,
                 cubic_decimeter=APIHelper.SKIP,
                 loading_meter=APIHelper.SKIP,
                 square_meter=APIHelper.SKIP,
                 cost_unit=APIHelper.SKIP,
                 original_sender_relation=APIHelper.SKIP,
                 loading_area_id=APIHelper.SKIP,
                 unloading_area_id=APIHelper.SKIP,
                 is_company_paper_printed=APIHelper.SKIP,
                 order_group=APIHelper.SKIP,
                 dispo_info_1=APIHelper.SKIP,
                 dispo_info_2=APIHelper.SKIP,
                 dispo_info_3=APIHelper.SKIP,
                 dispatch_information=APIHelper.SKIP,
                 order_category=APIHelper.SKIP,
                 is_loading_list_printed=APIHelper.SKIP,
                 bord_int_ext=APIHelper.SKIP,
                 outra_stat_customer_id=APIHelper.SKIP,
                 unloading_date_fix_from=APIHelper.SKIP,
                 invoice_division_id=APIHelper.SKIP,
                 short_telematic_message=APIHelper.SKIP,
                 is_freight_payer_invoicing_blocked=APIHelper.SKIP,
                 d_good_id=APIHelper.SKIP,
                 distance_load=APIHelper.SKIP,
                 distance_toll=APIHelper.SKIP,
                 distance_empty=APIHelper.SKIP,
                 distance_toll_empty=APIHelper.SKIP,
                 container_id=APIHelper.SKIP,
                 unloading_list_id=APIHelper.SKIP,
                 cargo_insurance=APIHelper.SKIP,
                 bonus_lump_sum=APIHelper.SKIP,
                 distance_state=APIHelper.SKIP,
                 sv_mode=APIHelper.SKIP,
                 palletts=APIHelper.SKIP,
                 storage_places_sum=APIHelper.SKIP,
                 pieces_sum=APIHelper.SKIP,
                 shipping_units=APIHelper.SKIP,
                 lis_exit=APIHelper.SKIP,
                 base_order_no=APIHelper.SKIP,
                 base_order_id=APIHelper.SKIP,
                 invoice_department_id=APIHelper.SKIP,
                 department_id=APIHelper.SKIP,
                 sub_department_id=APIHelper.SKIP,
                 internal_cost_allocation_mode=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 debit_form_type=APIHelper.SKIP,
                 own_form_type=APIHelper.SKIP,
                 currency_print=APIHelper.SKIP,
                 unloading_date_till_planned=APIHelper.SKIP,
                 transportation_route_id=APIHelper.SKIP,
                 logistic_provider_service_id=APIHelper.SKIP,
                 order_id_bord=APIHelper.SKIP,
                 bord_int_sub=APIHelper.SKIP,
                 order_int_sub=APIHelper.SKIP,
                 calculated_amount=APIHelper.SKIP,
                 cont_int_nr=APIHelper.SKIP,
                 cancellation_state=APIHelper.SKIP,
                 ilv_ori_nr=APIHelper.SKIP,
                 ilv_abg_nr=APIHelper.SKIP,
                 target_weight=APIHelper.SKIP,
                 exchange_rate_date=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 dispo_info_5=APIHelper.SKIP,
                 dispo_info_6=APIHelper.SKIP,
                 dispo_info_7=APIHelper.SKIP,
                 dispo_info_8=APIHelper.SKIP,
                 dispo_info_9=APIHelper.SKIP,
                 dispo_inf_10=APIHelper.SKIP,
                 route_id=APIHelper.SKIP,
                 km_methode=APIHelper.SKIP,
                 last_delivery_date=APIHelper.SKIP,
                 departure_relation_id=APIHelper.SKIP,
                 final_recipient_relation_relation_id=APIHelper.SKIP,
                 given_packages=APIHelper.SKIP,
                 unloading_date_fix_till=APIHelper.SKIP,
                 internal_order_no_debitor_3=APIHelper.SKIP,
                 order_state=APIHelper.SKIP,
                 pre_order_planning_id=APIHelper.SKIP,
                 owner=APIHelper.SKIP,
                 dossier_no=APIHelper.SKIP,
                 logistic_provider_information=APIHelper.SKIP,
                 pre_order_planning_no=APIHelper.SKIP,
                 unloading_container=APIHelper.SKIP,
                 unloading_rf=APIHelper.SKIP,
                 contact_person_id=APIHelper.SKIP,
                 original_order_type=APIHelper.SKIP,
                 additional_charging_no=APIHelper.SKIP,
                 log_model_id=APIHelper.SKIP,
                 service_order_template_id=APIHelper.SKIP,
                 order_source_area=APIHelper.SKIP,
                 terms_of_payment=APIHelper.SKIP):
        """Constructor for the LISPublicOrderView class"""

        # Initialize members of the class
        if initial_cost is not APIHelper.SKIP:
            self.initial_cost = initial_cost 
        if is_fbf_printed is not APIHelper.SKIP:
            self.is_fbf_printed = is_fbf_printed 
        if is_sped_us_printed is not APIHelper.SKIP:
            self.is_sped_us_printed = is_sped_us_printed 
        if incoming_bordero_no is not APIHelper.SKIP:
            self.incoming_bordero_no = incoming_bordero_no 
        if sequence_no is not APIHelper.SKIP:
            self.sequence_no = sequence_no 
        if order_input_type is not APIHelper.SKIP:
            self.order_input_type = order_input_type 
        if is_cash_payment is not APIHelper.SKIP:
            self.is_cash_payment = is_cash_payment 
        if order_id_gs is not APIHelper.SKIP:
            self.order_id_gs = order_id_gs 
        if cash_on_delivery_vat_free is not APIHelper.SKIP:
            self.cash_on_delivery_vat_free = cash_on_delivery_vat_free 
        if shipment_id is not APIHelper.SKIP:
            self.shipment_id = shipment_id 
        if order_no is not APIHelper.SKIP:
            self.order_no = order_no 
        if order_sub_number is not APIHelper.SKIP:
            self.order_sub_number = order_sub_number 
        if company is not APIHelper.SKIP:
            self.company = company 
        if accounting_division is not APIHelper.SKIP:
            self.accounting_division = accounting_division 
        if division is not APIHelper.SKIP:
            self.division = division 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if order_type is not APIHelper.SKIP:
            self.order_type = order_type 
        if order_text is not APIHelper.SKIP:
            self.order_text = order_text 
        if remark is not APIHelper.SKIP:
            self.remark = remark 
        if order_date is not APIHelper.SKIP:
            self.order_date = APIHelper.RFC3339DateTime(order_date) if order_date else None 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if delivery_number is not APIHelper.SKIP:
            self.delivery_number = delivery_number 
        if delivery_date is not APIHelper.SKIP:
            self.delivery_date = APIHelper.RFC3339DateTime(delivery_date) if delivery_date else None 
        if picking_no is not APIHelper.SKIP:
            self.picking_no = picking_no 
        if charge_no is not APIHelper.SKIP:
            self.charge_no = charge_no 
        if bordero_id is not APIHelper.SKIP:
            self.bordero_id = bordero_id 
        if loading_customer_id is not APIHelper.SKIP:
            self.loading_customer_id = loading_customer_id 
        if loading_country_code is not APIHelper.SKIP:
            self.loading_country_code = loading_country_code 
        if loading_locality_id is not APIHelper.SKIP:
            self.loading_locality_id = loading_locality_id 
        if loading_zip is not APIHelper.SKIP:
            self.loading_zip = loading_zip 
        if loading_city is not APIHelper.SKIP:
            self.loading_city = loading_city 
        if loadingt_bsl is not APIHelper.SKIP:
            self.loadingt_bsl = loadingt_bsl 
        if degt is not APIHelper.SKIP:
            self.degt = degt 
        if community_code is not APIHelper.SKIP:
            self.community_code = community_code 
        if loading_from_date is not APIHelper.SKIP:
            self.loading_from_date = APIHelper.RFC3339DateTime(loading_from_date) if loading_from_date else None 
        if loading_from_time is not APIHelper.SKIP:
            self.loading_from_time = APIHelper.RFC3339DateTime(loading_from_time) if loading_from_time else None 
        if loading_till_date is not APIHelper.SKIP:
            self.loading_till_date = APIHelper.RFC3339DateTime(loading_till_date) if loading_till_date else None 
        if loading_till_time is not APIHelper.SKIP:
            self.loading_till_time = APIHelper.RFC3339DateTime(loading_till_time) if loading_till_time else None 
        if fix_loading_date_from is not APIHelper.SKIP:
            self.fix_loading_date_from = APIHelper.RFC3339DateTime(fix_loading_date_from) if fix_loading_date_from else None 
        if loading_fee is not APIHelper.SKIP:
            self.loading_fee = loading_fee 
        if estimated_loading_date is not APIHelper.SKIP:
            self.estimated_loading_date = APIHelper.RFC3339DateTime(estimated_loading_date) if estimated_loading_date else None 
        if estimated_loading_till_date is not APIHelper.SKIP:
            self.estimated_loading_till_date = APIHelper.RFC3339DateTime(estimated_loading_till_date) if estimated_loading_till_date else None 
        if guaranteed_loading_date is not APIHelper.SKIP:
            self.guaranteed_loading_date = APIHelper.RFC3339DateTime(guaranteed_loading_date) if guaranteed_loading_date else None 
        if loading_rf is not APIHelper.SKIP:
            self.loading_rf = loading_rf 
        if bordero_no is not APIHelper.SKIP:
            self.bordero_no = bordero_no 
        if delivery_area_no is not APIHelper.SKIP:
            self.delivery_area_no = delivery_area_no 
        if first_tour_id is not APIHelper.SKIP:
            self.first_tour_id = first_tour_id 
        if first_tour_no is not APIHelper.SKIP:
            self.first_tour_no = first_tour_no 
        if tour_id is not APIHelper.SKIP:
            self.tour_id = tour_id 
        if tour_no is not APIHelper.SKIP:
            self.tour_no = tour_no 
        if tour_sequential_no is not APIHelper.SKIP:
            self.tour_sequential_no = tour_sequential_no 
        if internal_bordero_no is not APIHelper.SKIP:
            self.internal_bordero_no = internal_bordero_no 
        if sender_id is not APIHelper.SKIP:
            self.sender_id = sender_id 
        if departure_country_code is not APIHelper.SKIP:
            self.departure_country_code = departure_country_code 
        if departure_id is not APIHelper.SKIP:
            self.departure_id = departure_id 
        if departure_zip is not APIHelper.SKIP:
            self.departure_zip = departure_zip 
        if departure_city is not APIHelper.SKIP:
            self.departure_city = departure_city 
        if sender_bsl is not APIHelper.SKIP:
            self.sender_bsl = sender_bsl 
        if sender_degt is not APIHelper.SKIP:
            self.sender_degt = sender_degt 
        if sender_community_code is not APIHelper.SKIP:
            self.sender_community_code = sender_community_code 
        if departure_type is not APIHelper.SKIP:
            self.departure_type = departure_type 
        if direct_delivery is not APIHelper.SKIP:
            self.direct_delivery = direct_delivery 
        if collecting_vehicle is not APIHelper.SKIP:
            self.collecting_vehicle = collecting_vehicle 
        if consignee_id is not APIHelper.SKIP:
            self.consignee_id = consignee_id 
        if unloading_country_code is not APIHelper.SKIP:
            self.unloading_country_code = unloading_country_code 
        if unloading_locality_id is not APIHelper.SKIP:
            self.unloading_locality_id = unloading_locality_id 
        if unloading_zip is not APIHelper.SKIP:
            self.unloading_zip = unloading_zip 
        if unloading_city is not APIHelper.SKIP:
            self.unloading_city = unloading_city 
        if consignee_bsl is not APIHelper.SKIP:
            self.consignee_bsl = consignee_bsl 
        if consignee_degt is not APIHelper.SKIP:
            self.consignee_degt = consignee_degt 
        if consignee_community_code is not APIHelper.SKIP:
            self.consignee_community_code = consignee_community_code 
        if deliver_date_from is not APIHelper.SKIP:
            self.deliver_date_from = APIHelper.RFC3339DateTime(deliver_date_from) if deliver_date_from else None 
        if delivery_time_from is not APIHelper.SKIP:
            self.delivery_time_from = APIHelper.RFC3339DateTime(delivery_time_from) if delivery_time_from else None 
        if deliver_end_date is not APIHelper.SKIP:
            self.deliver_end_date = APIHelper.RFC3339DateTime(deliver_end_date) if deliver_end_date else None 
        if delivery_end_time is not APIHelper.SKIP:
            self.delivery_end_time = APIHelper.RFC3339DateTime(delivery_end_time) if delivery_end_time else None 
        if distance is not APIHelper.SKIP:
            self.distance = distance 
        if distance_section is not APIHelper.SKIP:
            self.distance_section = distance_section 
        if driving_time is not APIHelper.SKIP:
            self.driving_time = driving_time 
        if freight_payer_id is not APIHelper.SKIP:
            self.freight_payer_id = freight_payer_id 
        if freight_payer_condition_type is not APIHelper.SKIP:
            self.freight_payer_condition_type = freight_payer_condition_type 
        if freight_payer_optimizing_type is not APIHelper.SKIP:
            self.freight_payer_optimizing_type = freight_payer_optimizing_type 
        if freight_payer_optimizing_no is not APIHelper.SKIP:
            self.freight_payer_optimizing_no = freight_payer_optimizing_no 
        if freight_payer_main_carriage is not APIHelper.SKIP:
            self.freight_payer_main_carriage = freight_payer_main_carriage 
        if freight_payer_sales_tax_code is not APIHelper.SKIP:
            self.freight_payer_sales_tax_code = freight_payer_sales_tax_code 
        if carrier_id is not APIHelper.SKIP:
            self.carrier_id = carrier_id 
        if carrier_condition_type is not APIHelper.SKIP:
            self.carrier_condition_type = carrier_condition_type 
        if carrier_optimization_type is not APIHelper.SKIP:
            self.carrier_optimization_type = carrier_optimization_type 
        if carrier_optimization_no is not APIHelper.SKIP:
            self.carrier_optimization_no = carrier_optimization_no 
        if carrier_main_carriage_type is not APIHelper.SKIP:
            self.carrier_main_carriage_type = carrier_main_carriage_type 
        if carrier_sales_tax_code is not APIHelper.SKIP:
            self.carrier_sales_tax_code = carrier_sales_tax_code 
        if traffic_mode is not APIHelper.SKIP:
            self.traffic_mode = traffic_mode 
        if freight_terms is not APIHelper.SKIP:
            self.freight_terms = freight_terms 
        if lump_sum is not APIHelper.SKIP:
            self.lump_sum = lump_sum 
        if cash_on_delivery is not APIHelper.SKIP:
            self.cash_on_delivery = cash_on_delivery 
        if cash_on_delivery_sales_tax_code is not APIHelper.SKIP:
            self.cash_on_delivery_sales_tax_code = cash_on_delivery_sales_tax_code 
        if weight is not APIHelper.SKIP:
            self.weight = weight 
        if chargeable_weight is not APIHelper.SKIP:
            self.chargeable_weight = chargeable_weight 
        if packages is not APIHelper.SKIP:
            self.packages = packages 
        if pallets is not APIHelper.SKIP:
            self.pallets = pallets 
        if storage_places is not APIHelper.SKIP:
            self.storage_places = storage_places 
        if destination_forwarder_id is not APIHelper.SKIP:
            self.destination_forwarder_id = destination_forwarder_id 
        if lorry_id is not APIHelper.SKIP:
            self.lorry_id = lorry_id 
        if proceeds is not APIHelper.SKIP:
            self.proceeds = proceeds 
        if charges is not APIHelper.SKIP:
            self.charges = charges 
        if goods_cd is not APIHelper.SKIP:
            self.goods_cd = goods_cd 
        if permit_id is not APIHelper.SKIP:
            self.permit_id = permit_id 
        if co_driver_id is not APIHelper.SKIP:
            self.co_driver_id = co_driver_id 
        if driver_id is not APIHelper.SKIP:
            self.driver_id = driver_id 
        if trailer_id is not APIHelper.SKIP:
            self.trailer_id = trailer_id 
        if reference_number is not APIHelper.SKIP:
            self.reference_number = reference_number 
        if swap_body_id_1 is not APIHelper.SKIP:
            self.swap_body_id_1 = swap_body_id_1 
        if swap_body_2 is not APIHelper.SKIP:
            self.swap_body_2 = swap_body_2 
        if is_credit_invoiced is not APIHelper.SKIP:
            self.is_credit_invoiced = is_credit_invoiced 
        if hazardous_good_qualified is not APIHelper.SKIP:
            self.hazardous_good_qualified = hazardous_good_qualified 
        if cost_center is not APIHelper.SKIP:
            self.cost_center = cost_center 
        if account_table is not APIHelper.SKIP:
            self.account_table = account_table 
        if reefer_cargo is not APIHelper.SKIP:
            self.reefer_cargo = reefer_cargo 
        if load_dev_voucher_no is not APIHelper.SKIP:
            self.load_dev_voucher_no = load_dev_voucher_no 
        if is_invoice_invoiced is not APIHelper.SKIP:
            self.is_invoice_invoiced = is_invoice_invoiced 
        if is_pallet_note_printed is not APIHelper.SKIP:
            self.is_pallet_note_printed = is_pallet_note_printed 
        if original_sender_id is not APIHelper.SKIP:
            self.original_sender_id = original_sender_id 
        if print_retrieval is not APIHelper.SKIP:
            self.print_retrieval = print_retrieval 
        if planned_swap_body_construction is not APIHelper.SKIP:
            self.planned_swap_body_construction = planned_swap_body_construction 
        if freight_payer_common_rate is not APIHelper.SKIP:
            self.freight_payer_common_rate = freight_payer_common_rate 
        if print_nn is not APIHelper.SKIP:
            self.print_nn = print_nn 
        if internal_order_no_debitor is not APIHelper.SKIP:
            self.internal_order_no_debitor = internal_order_no_debitor 
        if invoicing_indicator is not APIHelper.SKIP:
            self.invoicing_indicator = invoicing_indicator 
        if rec_adv is not APIHelper.SKIP:
            self.rec_adv = rec_adv 
        if relation_kind is not APIHelper.SKIP:
            self.relation_kind = relation_kind 
        if is_transport_order_printed is not APIHelper.SKIP:
            self.is_transport_order_printed = is_transport_order_printed 
        if is_order_confirmation_printed is not APIHelper.SKIP:
            self.is_order_confirmation_printed = is_order_confirmation_printed 
        if final_recipient_id is not APIHelper.SKIP:
            self.final_recipient_id = final_recipient_id 
        if end_name_1 is not APIHelper.SKIP:
            self.end_name_1 = end_name_1 
        if receiver_contry_code is not APIHelper.SKIP:
            self.receiver_contry_code = receiver_contry_code 
        if receiver_zip is not APIHelper.SKIP:
            self.receiver_zip = receiver_zip 
        if receiver_city is not APIHelper.SKIP:
            self.receiver_city = receiver_city 
        if receiver_street is not APIHelper.SKIP:
            self.receiver_street = receiver_street 
        if cash_on_delivery_currency is not APIHelper.SKIP:
            self.cash_on_delivery_currency = cash_on_delivery_currency 
        if carriage_forward_currency is not APIHelper.SKIP:
            self.carriage_forward_currency = carriage_forward_currency 
        if border_file_id is not APIHelper.SKIP:
            self.border_file_id = border_file_id 
        if distance_till_border is not APIHelper.SKIP:
            self.distance_till_border = distance_till_border 
        if km_after_border is not APIHelper.SKIP:
            self.km_after_border = km_after_border 
        if goods_currency is not APIHelper.SKIP:
            self.goods_currency = goods_currency 
        if intra_stat_customer_id is not APIHelper.SKIP:
            self.intra_stat_customer_id = intra_stat_customer_id 
        if are_labels_printed is not APIHelper.SKIP:
            self.are_labels_printed = are_labels_printed 
        if division_id is not APIHelper.SKIP:
            self.division_id = division_id 
        if harbour is not APIHelper.SKIP:
            self.harbour = harbour 
        if dsi_number is not APIHelper.SKIP:
            self.dsi_number = dsi_number 
        if pieces is not APIHelper.SKIP:
            self.pieces = pieces 
        if dossier_id is not APIHelper.SKIP:
            self.dossier_id = dossier_id 
        if dossier_no_short is not APIHelper.SKIP:
            self.dossier_no_short = dossier_no_short 
        if load_dev_booking is not APIHelper.SKIP:
            self.load_dev_booking = load_dev_booking 
        if declared_value is not APIHelper.SKIP:
            self.declared_value = declared_value 
        if pri_ezb is not APIHelper.SKIP:
            self.pri_ezb = pri_ezb 
        if cubic_decimeter is not APIHelper.SKIP:
            self.cubic_decimeter = cubic_decimeter 
        if loading_meter is not APIHelper.SKIP:
            self.loading_meter = loading_meter 
        if square_meter is not APIHelper.SKIP:
            self.square_meter = square_meter 
        if cost_unit is not APIHelper.SKIP:
            self.cost_unit = cost_unit 
        if original_sender_relation is not APIHelper.SKIP:
            self.original_sender_relation = original_sender_relation 
        if loading_area_id is not APIHelper.SKIP:
            self.loading_area_id = loading_area_id 
        if unloading_area_id is not APIHelper.SKIP:
            self.unloading_area_id = unloading_area_id 
        if is_company_paper_printed is not APIHelper.SKIP:
            self.is_company_paper_printed = is_company_paper_printed 
        if order_group is not APIHelper.SKIP:
            self.order_group = order_group 
        if dispo_info_1 is not APIHelper.SKIP:
            self.dispo_info_1 = dispo_info_1 
        if dispo_info_2 is not APIHelper.SKIP:
            self.dispo_info_2 = dispo_info_2 
        if dispo_info_3 is not APIHelper.SKIP:
            self.dispo_info_3 = dispo_info_3 
        if dispatch_information is not APIHelper.SKIP:
            self.dispatch_information = dispatch_information 
        if order_category is not APIHelper.SKIP:
            self.order_category = order_category 
        if is_loading_list_printed is not APIHelper.SKIP:
            self.is_loading_list_printed = is_loading_list_printed 
        if bord_int_ext is not APIHelper.SKIP:
            self.bord_int_ext = bord_int_ext 
        if outra_stat_customer_id is not APIHelper.SKIP:
            self.outra_stat_customer_id = outra_stat_customer_id 
        if unloading_date_fix_from is not APIHelper.SKIP:
            self.unloading_date_fix_from = APIHelper.RFC3339DateTime(unloading_date_fix_from) if unloading_date_fix_from else None 
        if invoice_division_id is not APIHelper.SKIP:
            self.invoice_division_id = invoice_division_id 
        if short_telematic_message is not APIHelper.SKIP:
            self.short_telematic_message = short_telematic_message 
        if is_freight_payer_invoicing_blocked is not APIHelper.SKIP:
            self.is_freight_payer_invoicing_blocked = is_freight_payer_invoicing_blocked 
        if d_good_id is not APIHelper.SKIP:
            self.d_good_id = d_good_id 
        if distance_load is not APIHelper.SKIP:
            self.distance_load = distance_load 
        if distance_toll is not APIHelper.SKIP:
            self.distance_toll = distance_toll 
        if distance_empty is not APIHelper.SKIP:
            self.distance_empty = distance_empty 
        if distance_toll_empty is not APIHelper.SKIP:
            self.distance_toll_empty = distance_toll_empty 
        if container_id is not APIHelper.SKIP:
            self.container_id = container_id 
        if unloading_list_id is not APIHelper.SKIP:
            self.unloading_list_id = unloading_list_id 
        if cargo_insurance is not APIHelper.SKIP:
            self.cargo_insurance = cargo_insurance 
        if bonus_lump_sum is not APIHelper.SKIP:
            self.bonus_lump_sum = bonus_lump_sum 
        if distance_state is not APIHelper.SKIP:
            self.distance_state = distance_state 
        if sv_mode is not APIHelper.SKIP:
            self.sv_mode = sv_mode 
        if palletts is not APIHelper.SKIP:
            self.palletts = palletts 
        if storage_places_sum is not APIHelper.SKIP:
            self.storage_places_sum = storage_places_sum 
        if pieces_sum is not APIHelper.SKIP:
            self.pieces_sum = pieces_sum 
        if shipping_units is not APIHelper.SKIP:
            self.shipping_units = shipping_units 
        if lis_exit is not APIHelper.SKIP:
            self.lis_exit = lis_exit 
        if base_order_no is not APIHelper.SKIP:
            self.base_order_no = base_order_no 
        if base_order_id is not APIHelper.SKIP:
            self.base_order_id = base_order_id 
        if invoice_department_id is not APIHelper.SKIP:
            self.invoice_department_id = invoice_department_id 
        if department_id is not APIHelper.SKIP:
            self.department_id = department_id 
        if sub_department_id is not APIHelper.SKIP:
            self.sub_department_id = sub_department_id 
        if internal_cost_allocation_mode is not APIHelper.SKIP:
            self.internal_cost_allocation_mode = internal_cost_allocation_mode 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if debit_form_type is not APIHelper.SKIP:
            self.debit_form_type = debit_form_type 
        if own_form_type is not APIHelper.SKIP:
            self.own_form_type = own_form_type 
        if currency_print is not APIHelper.SKIP:
            self.currency_print = currency_print 
        if unloading_date_till_planned is not APIHelper.SKIP:
            self.unloading_date_till_planned = APIHelper.RFC3339DateTime(unloading_date_till_planned) if unloading_date_till_planned else None 
        if transportation_route_id is not APIHelper.SKIP:
            self.transportation_route_id = transportation_route_id 
        if logistic_provider_service_id is not APIHelper.SKIP:
            self.logistic_provider_service_id = logistic_provider_service_id 
        if order_id_bord is not APIHelper.SKIP:
            self.order_id_bord = order_id_bord 
        if bord_int_sub is not APIHelper.SKIP:
            self.bord_int_sub = bord_int_sub 
        if order_int_sub is not APIHelper.SKIP:
            self.order_int_sub = order_int_sub 
        if calculated_amount is not APIHelper.SKIP:
            self.calculated_amount = calculated_amount 
        if cont_int_nr is not APIHelper.SKIP:
            self.cont_int_nr = cont_int_nr 
        if cancellation_state is not APIHelper.SKIP:
            self.cancellation_state = cancellation_state 
        if ilv_ori_nr is not APIHelper.SKIP:
            self.ilv_ori_nr = ilv_ori_nr 
        if ilv_abg_nr is not APIHelper.SKIP:
            self.ilv_abg_nr = ilv_abg_nr 
        if target_weight is not APIHelper.SKIP:
            self.target_weight = target_weight 
        if exchange_rate_date is not APIHelper.SKIP:
            self.exchange_rate_date = APIHelper.RFC3339DateTime(exchange_rate_date) if exchange_rate_date else None 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if dispo_info_5 is not APIHelper.SKIP:
            self.dispo_info_5 = dispo_info_5 
        if dispo_info_6 is not APIHelper.SKIP:
            self.dispo_info_6 = dispo_info_6 
        if dispo_info_7 is not APIHelper.SKIP:
            self.dispo_info_7 = dispo_info_7 
        if dispo_info_8 is not APIHelper.SKIP:
            self.dispo_info_8 = dispo_info_8 
        if dispo_info_9 is not APIHelper.SKIP:
            self.dispo_info_9 = dispo_info_9 
        if dispo_inf_10 is not APIHelper.SKIP:
            self.dispo_inf_10 = dispo_inf_10 
        if route_id is not APIHelper.SKIP:
            self.route_id = route_id 
        if km_methode is not APIHelper.SKIP:
            self.km_methode = km_methode 
        if last_delivery_date is not APIHelper.SKIP:
            self.last_delivery_date = APIHelper.RFC3339DateTime(last_delivery_date) if last_delivery_date else None 
        if departure_relation_id is not APIHelper.SKIP:
            self.departure_relation_id = departure_relation_id 
        if final_recipient_relation_relation_id is not APIHelper.SKIP:
            self.final_recipient_relation_relation_id = final_recipient_relation_relation_id 
        if given_packages is not APIHelper.SKIP:
            self.given_packages = given_packages 
        if unloading_date_fix_till is not APIHelper.SKIP:
            self.unloading_date_fix_till = APIHelper.RFC3339DateTime(unloading_date_fix_till) if unloading_date_fix_till else None 
        if internal_order_no_debitor_3 is not APIHelper.SKIP:
            self.internal_order_no_debitor_3 = internal_order_no_debitor_3 
        if order_state is not APIHelper.SKIP:
            self.order_state = order_state 
        if pre_order_planning_id is not APIHelper.SKIP:
            self.pre_order_planning_id = pre_order_planning_id 
        if owner is not APIHelper.SKIP:
            self.owner = owner 
        if dossier_no is not APIHelper.SKIP:
            self.dossier_no = dossier_no 
        if logistic_provider_information is not APIHelper.SKIP:
            self.logistic_provider_information = logistic_provider_information 
        if pre_order_planning_no is not APIHelper.SKIP:
            self.pre_order_planning_no = pre_order_planning_no 
        if unloading_container is not APIHelper.SKIP:
            self.unloading_container = unloading_container 
        if unloading_rf is not APIHelper.SKIP:
            self.unloading_rf = unloading_rf 
        if contact_person_id is not APIHelper.SKIP:
            self.contact_person_id = contact_person_id 
        if original_order_type is not APIHelper.SKIP:
            self.original_order_type = original_order_type 
        if additional_charging_no is not APIHelper.SKIP:
            self.additional_charging_no = additional_charging_no 
        if log_model_id is not APIHelper.SKIP:
            self.log_model_id = log_model_id 
        if service_order_template_id is not APIHelper.SKIP:
            self.service_order_template_id = service_order_template_id 
        if order_source_area is not APIHelper.SKIP:
            self.order_source_area = order_source_area 
        if terms_of_payment is not APIHelper.SKIP:
            self.terms_of_payment = terms_of_payment 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        initial_cost = dictionary.get("initialCost") if dictionary.get("initialCost") else APIHelper.SKIP
        is_fbf_printed = dictionary.get("isFBFPrinted") if "isFBFPrinted" in dictionary.keys() else APIHelper.SKIP
        is_sped_us_printed = dictionary.get("isSpedUsPrinted") if "isSpedUsPrinted" in dictionary.keys() else APIHelper.SKIP
        incoming_bordero_no = dictionary.get("incomingBorderoNo") if dictionary.get("incomingBorderoNo") else APIHelper.SKIP
        sequence_no = dictionary.get("sequenceNo") if dictionary.get("sequenceNo") else APIHelper.SKIP
        order_input_type = dictionary.get("orderInputType") if dictionary.get("orderInputType") else APIHelper.SKIP
        is_cash_payment = dictionary.get("isCashPayment") if "isCashPayment" in dictionary.keys() else APIHelper.SKIP
        order_id_gs = dictionary.get("orderIdGs") if dictionary.get("orderIdGs") else APIHelper.SKIP
        cash_on_delivery_vat_free = dictionary.get("cashOnDeliveryVATFree") if dictionary.get("cashOnDeliveryVATFree") else APIHelper.SKIP
        shipment_id = dictionary.get("shipmentId") if dictionary.get("shipmentId") else APIHelper.SKIP
        order_no = dictionary.get("orderNo") if dictionary.get("orderNo") else APIHelper.SKIP
        order_sub_number = dictionary.get("orderSubNumber") if dictionary.get("orderSubNumber") else APIHelper.SKIP
        company = dictionary.get("company") if dictionary.get("company") else APIHelper.SKIP
        accounting_division = dictionary.get("accountingDivision") if dictionary.get("accountingDivision") else APIHelper.SKIP
        division = dictionary.get("division") if dictionary.get("division") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        order_type = dictionary.get("orderType") if dictionary.get("orderType") else APIHelper.SKIP
        order_text = dictionary.get("orderText") if dictionary.get("orderText") else APIHelper.SKIP
        remark = dictionary.get("remark") if dictionary.get("remark") else APIHelper.SKIP
        order_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("orderDate")).datetime if dictionary.get("orderDate") else APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        delivery_number = dictionary.get("deliveryNumber") if dictionary.get("deliveryNumber") else APIHelper.SKIP
        delivery_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryDate")).datetime if dictionary.get("deliveryDate") else APIHelper.SKIP
        picking_no = dictionary.get("pickingNo") if dictionary.get("pickingNo") else APIHelper.SKIP
        charge_no = dictionary.get("chargeNo") if dictionary.get("chargeNo") else APIHelper.SKIP
        bordero_id = dictionary.get("borderoId") if dictionary.get("borderoId") else APIHelper.SKIP
        loading_customer_id = dictionary.get("loadingCustomerId") if dictionary.get("loadingCustomerId") else APIHelper.SKIP
        loading_country_code = dictionary.get("loadingCountryCode") if dictionary.get("loadingCountryCode") else APIHelper.SKIP
        loading_locality_id = dictionary.get("loadingLocalityId") if dictionary.get("loadingLocalityId") else APIHelper.SKIP
        loading_zip = dictionary.get("loadingZip") if dictionary.get("loadingZip") else APIHelper.SKIP
        loading_city = dictionary.get("loadingCity") if dictionary.get("loadingCity") else APIHelper.SKIP
        loadingt_bsl = dictionary.get("loadingtBSL") if dictionary.get("loadingtBSL") else APIHelper.SKIP
        degt = dictionary.get("degt") if dictionary.get("degt") else APIHelper.SKIP
        community_code = dictionary.get("communityCode") if dictionary.get("communityCode") else APIHelper.SKIP
        loading_from_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingFromDate")).datetime if dictionary.get("loadingFromDate") else APIHelper.SKIP
        loading_from_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingFromTime")).datetime if dictionary.get("loadingFromTime") else APIHelper.SKIP
        loading_till_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTillDate")).datetime if dictionary.get("loadingTillDate") else APIHelper.SKIP
        loading_till_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTillTime")).datetime if dictionary.get("loadingTillTime") else APIHelper.SKIP
        fix_loading_date_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("fixLoadingDateFrom")).datetime if dictionary.get("fixLoadingDateFrom") else APIHelper.SKIP
        loading_fee = dictionary.get("loadingFee") if dictionary.get("loadingFee") else APIHelper.SKIP
        estimated_loading_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("estimatedLoadingDate")).datetime if dictionary.get("estimatedLoadingDate") else APIHelper.SKIP
        estimated_loading_till_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("estimatedLoadingTillDate")).datetime if dictionary.get("estimatedLoadingTillDate") else APIHelper.SKIP
        guaranteed_loading_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("guaranteedLoadingDate")).datetime if dictionary.get("guaranteedLoadingDate") else APIHelper.SKIP
        loading_rf = dictionary.get("loadingRF") if dictionary.get("loadingRF") else APIHelper.SKIP
        bordero_no = dictionary.get("borderoNo") if dictionary.get("borderoNo") else APIHelper.SKIP
        delivery_area_no = dictionary.get("deliveryAreaNo") if dictionary.get("deliveryAreaNo") else APIHelper.SKIP
        first_tour_id = dictionary.get("firstTourId") if dictionary.get("firstTourId") else APIHelper.SKIP
        first_tour_no = dictionary.get("firstTourNo") if dictionary.get("firstTourNo") else APIHelper.SKIP
        tour_id = dictionary.get("tourId") if dictionary.get("tourId") else APIHelper.SKIP
        tour_no = dictionary.get("tourNo") if dictionary.get("tourNo") else APIHelper.SKIP
        tour_sequential_no = dictionary.get("tourSequentialNo") if dictionary.get("tourSequentialNo") else APIHelper.SKIP
        internal_bordero_no = dictionary.get("internalBorderoNo") if dictionary.get("internalBorderoNo") else APIHelper.SKIP
        sender_id = dictionary.get("senderId") if dictionary.get("senderId") else APIHelper.SKIP
        departure_country_code = dictionary.get("departureCountryCode") if dictionary.get("departureCountryCode") else APIHelper.SKIP
        departure_id = dictionary.get("departureID") if dictionary.get("departureID") else APIHelper.SKIP
        departure_zip = dictionary.get("departureZip") if dictionary.get("departureZip") else APIHelper.SKIP
        departure_city = dictionary.get("departureCity") if dictionary.get("departureCity") else APIHelper.SKIP
        sender_bsl = dictionary.get("senderBSL") if dictionary.get("senderBSL") else APIHelper.SKIP
        sender_degt = dictionary.get("senderDEGT") if dictionary.get("senderDEGT") else APIHelper.SKIP
        sender_community_code = dictionary.get("senderCommunityCode") if dictionary.get("senderCommunityCode") else APIHelper.SKIP
        departure_type = dictionary.get("departureType") if dictionary.get("departureType") else APIHelper.SKIP
        direct_delivery = dictionary.get("directDelivery") if "directDelivery" in dictionary.keys() else APIHelper.SKIP
        collecting_vehicle = dictionary.get("collectingVehicle") if dictionary.get("collectingVehicle") else APIHelper.SKIP
        consignee_id = dictionary.get("consigneeId") if dictionary.get("consigneeId") else APIHelper.SKIP
        unloading_country_code = dictionary.get("unloadingCountryCode") if dictionary.get("unloadingCountryCode") else APIHelper.SKIP
        unloading_locality_id = dictionary.get("unloadingLocalityId") if dictionary.get("unloadingLocalityId") else APIHelper.SKIP
        unloading_zip = dictionary.get("unloadingZip") if dictionary.get("unloadingZip") else APIHelper.SKIP
        unloading_city = dictionary.get("unloadingCity") if dictionary.get("unloadingCity") else APIHelper.SKIP
        consignee_bsl = dictionary.get("consigneeBSL") if dictionary.get("consigneeBSL") else APIHelper.SKIP
        consignee_degt = dictionary.get("consigneeDEGT") if dictionary.get("consigneeDEGT") else APIHelper.SKIP
        consignee_community_code = dictionary.get("consigneeCommunityCode") if dictionary.get("consigneeCommunityCode") else APIHelper.SKIP
        deliver_date_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliverDateFrom")).datetime if dictionary.get("deliverDateFrom") else APIHelper.SKIP
        delivery_time_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryTimeFrom")).datetime if dictionary.get("deliveryTimeFrom") else APIHelper.SKIP
        deliver_end_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliverEndDate")).datetime if dictionary.get("deliverEndDate") else APIHelper.SKIP
        delivery_end_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryEndTime")).datetime if dictionary.get("deliveryEndTime") else APIHelper.SKIP
        distance = dictionary.get("distance") if dictionary.get("distance") else APIHelper.SKIP
        distance_section = dictionary.get("distanceSection") if dictionary.get("distanceSection") else APIHelper.SKIP
        driving_time = dictionary.get("drivingTime") if dictionary.get("drivingTime") else APIHelper.SKIP
        freight_payer_id = dictionary.get("freightPayerId") if dictionary.get("freightPayerId") else APIHelper.SKIP
        freight_payer_condition_type = dictionary.get("freightPayerConditionType") if dictionary.get("freightPayerConditionType") else APIHelper.SKIP
        freight_payer_optimizing_type = dictionary.get("freightPayerOptimizingType") if dictionary.get("freightPayerOptimizingType") else APIHelper.SKIP
        freight_payer_optimizing_no = dictionary.get("freightPayerOptimizingNo") if dictionary.get("freightPayerOptimizingNo") else APIHelper.SKIP
        freight_payer_main_carriage = dictionary.get("freightPayerMainCarriage") if dictionary.get("freightPayerMainCarriage") else APIHelper.SKIP
        freight_payer_sales_tax_code = dictionary.get("freightPayerSalesTaxCode") if dictionary.get("freightPayerSalesTaxCode") else APIHelper.SKIP
        carrier_id = dictionary.get("carrierId") if dictionary.get("carrierId") else APIHelper.SKIP
        carrier_condition_type = dictionary.get("carrierConditionType") if dictionary.get("carrierConditionType") else APIHelper.SKIP
        carrier_optimization_type = dictionary.get("carrierOptimizationType") if dictionary.get("carrierOptimizationType") else APIHelper.SKIP
        carrier_optimization_no = dictionary.get("carrierOptimizationNo") if dictionary.get("carrierOptimizationNo") else APIHelper.SKIP
        carrier_main_carriage_type = dictionary.get("carrierMainCarriageType") if dictionary.get("carrierMainCarriageType") else APIHelper.SKIP
        carrier_sales_tax_code = dictionary.get("carrierSalesTaxCode") if dictionary.get("carrierSalesTaxCode") else APIHelper.SKIP
        traffic_mode = dictionary.get("trafficMode") if dictionary.get("trafficMode") else APIHelper.SKIP
        freight_terms = dictionary.get("freightTerms") if dictionary.get("freightTerms") else APIHelper.SKIP
        lump_sum = dictionary.get("lumpSum") if dictionary.get("lumpSum") else APIHelper.SKIP
        cash_on_delivery = dictionary.get("cashOnDelivery") if dictionary.get("cashOnDelivery") else APIHelper.SKIP
        cash_on_delivery_sales_tax_code = dictionary.get("cashOnDeliverySalesTaxCode") if dictionary.get("cashOnDeliverySalesTaxCode") else APIHelper.SKIP
        weight = dictionary.get("weight") if dictionary.get("weight") else APIHelper.SKIP
        chargeable_weight = dictionary.get("chargeableWeight") if dictionary.get("chargeableWeight") else APIHelper.SKIP
        packages = dictionary.get("packages") if dictionary.get("packages") else APIHelper.SKIP
        pallets = dictionary.get("pallets") if dictionary.get("pallets") else APIHelper.SKIP
        storage_places = dictionary.get("storagePlaces") if dictionary.get("storagePlaces") else APIHelper.SKIP
        destination_forwarder_id = dictionary.get("destinationForwarderId") if dictionary.get("destinationForwarderId") else APIHelper.SKIP
        lorry_id = dictionary.get("lorryId") if dictionary.get("lorryId") else APIHelper.SKIP
        proceeds = dictionary.get("proceeds") if dictionary.get("proceeds") else APIHelper.SKIP
        charges = dictionary.get("charges") if dictionary.get("charges") else APIHelper.SKIP
        goods_cd = dictionary.get("goodsCd") if dictionary.get("goodsCd") else APIHelper.SKIP
        permit_id = dictionary.get("permitId") if dictionary.get("permitId") else APIHelper.SKIP
        co_driver_id = dictionary.get("coDriverId") if dictionary.get("coDriverId") else APIHelper.SKIP
        driver_id = dictionary.get("driverId") if dictionary.get("driverId") else APIHelper.SKIP
        trailer_id = dictionary.get("trailerId") if dictionary.get("trailerId") else APIHelper.SKIP
        reference_number = dictionary.get("referenceNumber") if dictionary.get("referenceNumber") else APIHelper.SKIP
        swap_body_id_1 = dictionary.get("swapBodyId1") if dictionary.get("swapBodyId1") else APIHelper.SKIP
        swap_body_2 = dictionary.get("swapBody2") if dictionary.get("swapBody2") else APIHelper.SKIP
        is_credit_invoiced = dictionary.get("isCreditInvoiced") if dictionary.get("isCreditInvoiced") else APIHelper.SKIP
        hazardous_good_qualified = dictionary.get("hazardousGoodQualified") if "hazardousGoodQualified" in dictionary.keys() else APIHelper.SKIP
        cost_center = dictionary.get("costCenter") if dictionary.get("costCenter") else APIHelper.SKIP
        account_table = dictionary.get("accountTable") if dictionary.get("accountTable") else APIHelper.SKIP
        reefer_cargo = dictionary.get("reeferCargo") if "reeferCargo" in dictionary.keys() else APIHelper.SKIP
        load_dev_voucher_no = dictionary.get("loadDevVoucherNo") if dictionary.get("loadDevVoucherNo") else APIHelper.SKIP
        is_invoice_invoiced = dictionary.get("isInvoiceInvoiced") if dictionary.get("isInvoiceInvoiced") else APIHelper.SKIP
        is_pallet_note_printed = dictionary.get("isPalletNotePrinted") if "isPalletNotePrinted" in dictionary.keys() else APIHelper.SKIP
        original_sender_id = dictionary.get("originalSenderId") if dictionary.get("originalSenderId") else APIHelper.SKIP
        print_retrieval = dictionary.get("printRetrieval") if "printRetrieval" in dictionary.keys() else APIHelper.SKIP
        planned_swap_body_construction = dictionary.get("plannedSwapBodyConstruction") if dictionary.get("plannedSwapBodyConstruction") else APIHelper.SKIP
        freight_payer_common_rate = dictionary.get("freightPayerCommonRate") if dictionary.get("freightPayerCommonRate") else APIHelper.SKIP
        print_nn = dictionary.get("printNN") if "printNN" in dictionary.keys() else APIHelper.SKIP
        internal_order_no_debitor = dictionary.get("internalOrderNoDebitor") if dictionary.get("internalOrderNoDebitor") else APIHelper.SKIP
        invoicing_indicator = dictionary.get("invoicingIndicator") if dictionary.get("invoicingIndicator") else APIHelper.SKIP
        rec_adv = dictionary.get("recAdv") if dictionary.get("recAdv") else APIHelper.SKIP
        relation_kind = dictionary.get("relationKind") if dictionary.get("relationKind") else APIHelper.SKIP
        is_transport_order_printed = dictionary.get("isTransportOrderPrinted") if "isTransportOrderPrinted" in dictionary.keys() else APIHelper.SKIP
        is_order_confirmation_printed = dictionary.get("isOrderConfirmationPrinted") if "isOrderConfirmationPrinted" in dictionary.keys() else APIHelper.SKIP
        final_recipient_id = dictionary.get("finalRecipientId") if dictionary.get("finalRecipientId") else APIHelper.SKIP
        end_name_1 = dictionary.get("endName1") if dictionary.get("endName1") else APIHelper.SKIP
        receiver_contry_code = dictionary.get("receiverContryCode") if dictionary.get("receiverContryCode") else APIHelper.SKIP
        receiver_zip = dictionary.get("receiverZip") if dictionary.get("receiverZip") else APIHelper.SKIP
        receiver_city = dictionary.get("receiverCity") if dictionary.get("receiverCity") else APIHelper.SKIP
        receiver_street = dictionary.get("receiverStreet") if dictionary.get("receiverStreet") else APIHelper.SKIP
        cash_on_delivery_currency = dictionary.get("cashOnDeliveryCurrency") if dictionary.get("cashOnDeliveryCurrency") else APIHelper.SKIP
        carriage_forward_currency = dictionary.get("carriageForwardCurrency") if dictionary.get("carriageForwardCurrency") else APIHelper.SKIP
        border_file_id = dictionary.get("borderFileId") if dictionary.get("borderFileId") else APIHelper.SKIP
        distance_till_border = dictionary.get("distanceTillBorder") if dictionary.get("distanceTillBorder") else APIHelper.SKIP
        km_after_border = dictionary.get("kmAfterBorder") if dictionary.get("kmAfterBorder") else APIHelper.SKIP
        goods_currency = dictionary.get("goodsCurrency") if dictionary.get("goodsCurrency") else APIHelper.SKIP
        intra_stat_customer_id = dictionary.get("intraStatCustomerId") if dictionary.get("intraStatCustomerId") else APIHelper.SKIP
        are_labels_printed = dictionary.get("areLabelsPrinted") if "areLabelsPrinted" in dictionary.keys() else APIHelper.SKIP
        division_id = dictionary.get("divisionId") if dictionary.get("divisionId") else APIHelper.SKIP
        harbour = dictionary.get("harbour") if dictionary.get("harbour") else APIHelper.SKIP
        dsi_number = dictionary.get("dsiNumber") if dictionary.get("dsiNumber") else APIHelper.SKIP
        pieces = dictionary.get("pieces") if dictionary.get("pieces") else APIHelper.SKIP
        dossier_id = dictionary.get("dossierId") if dictionary.get("dossierId") else APIHelper.SKIP
        dossier_no_short = dictionary.get("dossierNoShort") if dictionary.get("dossierNoShort") else APIHelper.SKIP
        load_dev_booking = dictionary.get("loadDevBooking") if "loadDevBooking" in dictionary.keys() else APIHelper.SKIP
        declared_value = dictionary.get("declaredValue") if dictionary.get("declaredValue") else APIHelper.SKIP
        pri_ezb = dictionary.get("priEZB") if "priEZB" in dictionary.keys() else APIHelper.SKIP
        cubic_decimeter = dictionary.get("cubicDecimeter") if dictionary.get("cubicDecimeter") else APIHelper.SKIP
        loading_meter = dictionary.get("loadingMeter") if dictionary.get("loadingMeter") else APIHelper.SKIP
        square_meter = dictionary.get("squareMeter") if dictionary.get("squareMeter") else APIHelper.SKIP
        cost_unit = dictionary.get("costUnit") if dictionary.get("costUnit") else APIHelper.SKIP
        original_sender_relation = dictionary.get("originalSenderRelation") if dictionary.get("originalSenderRelation") else APIHelper.SKIP
        loading_area_id = dictionary.get("loadingAreaId") if dictionary.get("loadingAreaId") else APIHelper.SKIP
        unloading_area_id = dictionary.get("unloadingAreaId") if dictionary.get("unloadingAreaId") else APIHelper.SKIP
        is_company_paper_printed = dictionary.get("isCompanyPaperPrinted") if "isCompanyPaperPrinted" in dictionary.keys() else APIHelper.SKIP
        order_group = dictionary.get("orderGroup") if dictionary.get("orderGroup") else APIHelper.SKIP
        dispo_info_1 = dictionary.get("dispoInfo1") if dictionary.get("dispoInfo1") else APIHelper.SKIP
        dispo_info_2 = dictionary.get("dispoInfo2") if dictionary.get("dispoInfo2") else APIHelper.SKIP
        dispo_info_3 = dictionary.get("dispoInfo3") if dictionary.get("dispoInfo3") else APIHelper.SKIP
        dispatch_information = dictionary.get("dispatchInformation") if dictionary.get("dispatchInformation") else APIHelper.SKIP
        order_category = dictionary.get("orderCategory") if dictionary.get("orderCategory") else APIHelper.SKIP
        is_loading_list_printed = dictionary.get("isLoadingListPrinted") if "isLoadingListPrinted" in dictionary.keys() else APIHelper.SKIP
        bord_int_ext = dictionary.get("bordIntExt") if dictionary.get("bordIntExt") else APIHelper.SKIP
        outra_stat_customer_id = dictionary.get("outraStatCustomerId") if dictionary.get("outraStatCustomerId") else APIHelper.SKIP
        unloading_date_fix_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingDateFixFrom")).datetime if dictionary.get("unloadingDateFixFrom") else APIHelper.SKIP
        invoice_division_id = dictionary.get("invoiceDivisionId") if dictionary.get("invoiceDivisionId") else APIHelper.SKIP
        short_telematic_message = dictionary.get("shortTelematicMessage") if dictionary.get("shortTelematicMessage") else APIHelper.SKIP
        is_freight_payer_invoicing_blocked = dictionary.get("isFreightPayerInvoicingBlocked") if "isFreightPayerInvoicingBlocked" in dictionary.keys() else APIHelper.SKIP
        d_good_id = dictionary.get("dGoodId") if dictionary.get("dGoodId") else APIHelper.SKIP
        distance_load = dictionary.get("distanceLoad") if dictionary.get("distanceLoad") else APIHelper.SKIP
        distance_toll = dictionary.get("distanceToll") if dictionary.get("distanceToll") else APIHelper.SKIP
        distance_empty = dictionary.get("distanceEmpty") if dictionary.get("distanceEmpty") else APIHelper.SKIP
        distance_toll_empty = dictionary.get("distanceTollEmpty") if dictionary.get("distanceTollEmpty") else APIHelper.SKIP
        container_id = dictionary.get("containerId") if dictionary.get("containerId") else APIHelper.SKIP
        unloading_list_id = dictionary.get("unloadingListId") if dictionary.get("unloadingListId") else APIHelper.SKIP
        cargo_insurance = dictionary.get("cargoInsurance") if dictionary.get("cargoInsurance") else APIHelper.SKIP
        bonus_lump_sum = dictionary.get("bonusLumpSum") if dictionary.get("bonusLumpSum") else APIHelper.SKIP
        distance_state = dictionary.get("distanceState") if dictionary.get("distanceState") else APIHelper.SKIP
        sv_mode = dictionary.get("svMode") if dictionary.get("svMode") else APIHelper.SKIP
        palletts = dictionary.get("palletts") if dictionary.get("palletts") else APIHelper.SKIP
        storage_places_sum = dictionary.get("storagePlacesSum") if dictionary.get("storagePlacesSum") else APIHelper.SKIP
        pieces_sum = dictionary.get("piecesSum") if dictionary.get("piecesSum") else APIHelper.SKIP
        shipping_units = dictionary.get("shippingUnits") if dictionary.get("shippingUnits") else APIHelper.SKIP
        lis_exit = dictionary.get("lisExit") if dictionary.get("lisExit") else APIHelper.SKIP
        base_order_no = dictionary.get("baseOrderNo") if dictionary.get("baseOrderNo") else APIHelper.SKIP
        base_order_id = dictionary.get("baseOrderId") if dictionary.get("baseOrderId") else APIHelper.SKIP
        invoice_department_id = dictionary.get("invoiceDepartmentId") if dictionary.get("invoiceDepartmentId") else APIHelper.SKIP
        department_id = dictionary.get("departmentId") if dictionary.get("departmentId") else APIHelper.SKIP
        sub_department_id = dictionary.get("subDepartmentId") if dictionary.get("subDepartmentId") else APIHelper.SKIP
        internal_cost_allocation_mode = dictionary.get("internalCostAllocationMode") if dictionary.get("internalCostAllocationMode") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        debit_form_type = dictionary.get("debitFormType") if dictionary.get("debitFormType") else APIHelper.SKIP
        own_form_type = dictionary.get("ownFormType") if dictionary.get("ownFormType") else APIHelper.SKIP
        currency_print = dictionary.get("currencyPrint") if dictionary.get("currencyPrint") else APIHelper.SKIP
        unloading_date_till_planned = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingDateTillPlanned")).datetime if dictionary.get("unloadingDateTillPlanned") else APIHelper.SKIP
        transportation_route_id = dictionary.get("transportationRouteId") if dictionary.get("transportationRouteId") else APIHelper.SKIP
        logistic_provider_service_id = dictionary.get("logisticProviderServiceId") if dictionary.get("logisticProviderServiceId") else APIHelper.SKIP
        order_id_bord = dictionary.get("orderIdBord") if dictionary.get("orderIdBord") else APIHelper.SKIP
        bord_int_sub = dictionary.get("bordIntSub") if dictionary.get("bordIntSub") else APIHelper.SKIP
        order_int_sub = dictionary.get("orderIntSub") if dictionary.get("orderIntSub") else APIHelper.SKIP
        calculated_amount = dictionary.get("calculatedAmount") if dictionary.get("calculatedAmount") else APIHelper.SKIP
        cont_int_nr = dictionary.get("contIntNr") if dictionary.get("contIntNr") else APIHelper.SKIP
        cancellation_state = dictionary.get("cancellationState") if dictionary.get("cancellationState") else APIHelper.SKIP
        ilv_ori_nr = dictionary.get("ilvOriNr") if dictionary.get("ilvOriNr") else APIHelper.SKIP
        ilv_abg_nr = dictionary.get("ilvAbgNr") if dictionary.get("ilvAbgNr") else APIHelper.SKIP
        target_weight = dictionary.get("targetWeight") if dictionary.get("targetWeight") else APIHelper.SKIP
        exchange_rate_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("exchangeRateDate")).datetime if dictionary.get("exchangeRateDate") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        dispo_info_5 = dictionary.get("dispoInfo5") if dictionary.get("dispoInfo5") else APIHelper.SKIP
        dispo_info_6 = dictionary.get("dispoInfo6") if dictionary.get("dispoInfo6") else APIHelper.SKIP
        dispo_info_7 = dictionary.get("dispoInfo7") if dictionary.get("dispoInfo7") else APIHelper.SKIP
        dispo_info_8 = dictionary.get("dispoInfo8") if dictionary.get("dispoInfo8") else APIHelper.SKIP
        dispo_info_9 = dictionary.get("dispoInfo9") if dictionary.get("dispoInfo9") else APIHelper.SKIP
        dispo_inf_10 = dictionary.get("dispoInf10") if dictionary.get("dispoInf10") else APIHelper.SKIP
        route_id = dictionary.get("routeId") if dictionary.get("routeId") else APIHelper.SKIP
        km_methode = dictionary.get("kmMethode") if dictionary.get("kmMethode") else APIHelper.SKIP
        last_delivery_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastDeliveryDate")).datetime if dictionary.get("lastDeliveryDate") else APIHelper.SKIP
        departure_relation_id = dictionary.get("departureRelationId") if dictionary.get("departureRelationId") else APIHelper.SKIP
        final_recipient_relation_relation_id = dictionary.get("finalRecipientRelationRelationId") if dictionary.get("finalRecipientRelationRelationId") else APIHelper.SKIP
        given_packages = dictionary.get("givenPackages") if dictionary.get("givenPackages") else APIHelper.SKIP
        unloading_date_fix_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingDateFixTill")).datetime if dictionary.get("unloadingDateFixTill") else APIHelper.SKIP
        internal_order_no_debitor_3 = dictionary.get("internalOrderNoDebitor3") if dictionary.get("internalOrderNoDebitor3") else APIHelper.SKIP
        order_state = dictionary.get("orderState") if dictionary.get("orderState") else APIHelper.SKIP
        pre_order_planning_id = dictionary.get("preOrderPlanningId") if dictionary.get("preOrderPlanningId") else APIHelper.SKIP
        owner = dictionary.get("owner") if dictionary.get("owner") else APIHelper.SKIP
        dossier_no = dictionary.get("dossierNo") if dictionary.get("dossierNo") else APIHelper.SKIP
        logistic_provider_information = dictionary.get("logisticProviderInformation") if dictionary.get("logisticProviderInformation") else APIHelper.SKIP
        pre_order_planning_no = dictionary.get("preOrderPlanningNo") if dictionary.get("preOrderPlanningNo") else APIHelper.SKIP
        unloading_container = dictionary.get("unloadingContainer") if dictionary.get("unloadingContainer") else APIHelper.SKIP
        unloading_rf = dictionary.get("unloadingRF") if dictionary.get("unloadingRF") else APIHelper.SKIP
        contact_person_id = dictionary.get("contactPersonId") if dictionary.get("contactPersonId") else APIHelper.SKIP
        original_order_type = dictionary.get("originalOrderType") if dictionary.get("originalOrderType") else APIHelper.SKIP
        additional_charging_no = dictionary.get("additionalChargingNo") if dictionary.get("additionalChargingNo") else APIHelper.SKIP
        log_model_id = dictionary.get("logModelId") if dictionary.get("logModelId") else APIHelper.SKIP
        service_order_template_id = dictionary.get("serviceOrderTemplateId") if dictionary.get("serviceOrderTemplateId") else APIHelper.SKIP
        order_source_area = dictionary.get("orderSourceArea") if dictionary.get("orderSourceArea") else APIHelper.SKIP
        terms_of_payment = dictionary.get("termsOfPayment") if dictionary.get("termsOfPayment") else APIHelper.SKIP
        # Return an object of this model
        return cls(initial_cost,
                   is_fbf_printed,
                   is_sped_us_printed,
                   incoming_bordero_no,
                   sequence_no,
                   order_input_type,
                   is_cash_payment,
                   order_id_gs,
                   cash_on_delivery_vat_free,
                   shipment_id,
                   order_no,
                   order_sub_number,
                   company,
                   accounting_division,
                   division,
                   changed_on,
                   changed_by,
                   order_type,
                   order_text,
                   remark,
                   order_date,
                   customer_id,
                   delivery_number,
                   delivery_date,
                   picking_no,
                   charge_no,
                   bordero_id,
                   loading_customer_id,
                   loading_country_code,
                   loading_locality_id,
                   loading_zip,
                   loading_city,
                   loadingt_bsl,
                   degt,
                   community_code,
                   loading_from_date,
                   loading_from_time,
                   loading_till_date,
                   loading_till_time,
                   fix_loading_date_from,
                   loading_fee,
                   estimated_loading_date,
                   estimated_loading_till_date,
                   guaranteed_loading_date,
                   loading_rf,
                   bordero_no,
                   delivery_area_no,
                   first_tour_id,
                   first_tour_no,
                   tour_id,
                   tour_no,
                   tour_sequential_no,
                   internal_bordero_no,
                   sender_id,
                   departure_country_code,
                   departure_id,
                   departure_zip,
                   departure_city,
                   sender_bsl,
                   sender_degt,
                   sender_community_code,
                   departure_type,
                   direct_delivery,
                   collecting_vehicle,
                   consignee_id,
                   unloading_country_code,
                   unloading_locality_id,
                   unloading_zip,
                   unloading_city,
                   consignee_bsl,
                   consignee_degt,
                   consignee_community_code,
                   deliver_date_from,
                   delivery_time_from,
                   deliver_end_date,
                   delivery_end_time,
                   distance,
                   distance_section,
                   driving_time,
                   freight_payer_id,
                   freight_payer_condition_type,
                   freight_payer_optimizing_type,
                   freight_payer_optimizing_no,
                   freight_payer_main_carriage,
                   freight_payer_sales_tax_code,
                   carrier_id,
                   carrier_condition_type,
                   carrier_optimization_type,
                   carrier_optimization_no,
                   carrier_main_carriage_type,
                   carrier_sales_tax_code,
                   traffic_mode,
                   freight_terms,
                   lump_sum,
                   cash_on_delivery,
                   cash_on_delivery_sales_tax_code,
                   weight,
                   chargeable_weight,
                   packages,
                   pallets,
                   storage_places,
                   destination_forwarder_id,
                   lorry_id,
                   proceeds,
                   charges,
                   goods_cd,
                   permit_id,
                   co_driver_id,
                   driver_id,
                   trailer_id,
                   reference_number,
                   swap_body_id_1,
                   swap_body_2,
                   is_credit_invoiced,
                   hazardous_good_qualified,
                   cost_center,
                   account_table,
                   reefer_cargo,
                   load_dev_voucher_no,
                   is_invoice_invoiced,
                   is_pallet_note_printed,
                   original_sender_id,
                   print_retrieval,
                   planned_swap_body_construction,
                   freight_payer_common_rate,
                   print_nn,
                   internal_order_no_debitor,
                   invoicing_indicator,
                   rec_adv,
                   relation_kind,
                   is_transport_order_printed,
                   is_order_confirmation_printed,
                   final_recipient_id,
                   end_name_1,
                   receiver_contry_code,
                   receiver_zip,
                   receiver_city,
                   receiver_street,
                   cash_on_delivery_currency,
                   carriage_forward_currency,
                   border_file_id,
                   distance_till_border,
                   km_after_border,
                   goods_currency,
                   intra_stat_customer_id,
                   are_labels_printed,
                   division_id,
                   harbour,
                   dsi_number,
                   pieces,
                   dossier_id,
                   dossier_no_short,
                   load_dev_booking,
                   declared_value,
                   pri_ezb,
                   cubic_decimeter,
                   loading_meter,
                   square_meter,
                   cost_unit,
                   original_sender_relation,
                   loading_area_id,
                   unloading_area_id,
                   is_company_paper_printed,
                   order_group,
                   dispo_info_1,
                   dispo_info_2,
                   dispo_info_3,
                   dispatch_information,
                   order_category,
                   is_loading_list_printed,
                   bord_int_ext,
                   outra_stat_customer_id,
                   unloading_date_fix_from,
                   invoice_division_id,
                   short_telematic_message,
                   is_freight_payer_invoicing_blocked,
                   d_good_id,
                   distance_load,
                   distance_toll,
                   distance_empty,
                   distance_toll_empty,
                   container_id,
                   unloading_list_id,
                   cargo_insurance,
                   bonus_lump_sum,
                   distance_state,
                   sv_mode,
                   palletts,
                   storage_places_sum,
                   pieces_sum,
                   shipping_units,
                   lis_exit,
                   base_order_no,
                   base_order_id,
                   invoice_department_id,
                   department_id,
                   sub_department_id,
                   internal_cost_allocation_mode,
                   created_on,
                   debit_form_type,
                   own_form_type,
                   currency_print,
                   unloading_date_till_planned,
                   transportation_route_id,
                   logistic_provider_service_id,
                   order_id_bord,
                   bord_int_sub,
                   order_int_sub,
                   calculated_amount,
                   cont_int_nr,
                   cancellation_state,
                   ilv_ori_nr,
                   ilv_abg_nr,
                   target_weight,
                   exchange_rate_date,
                   created_by,
                   dispo_info_5,
                   dispo_info_6,
                   dispo_info_7,
                   dispo_info_8,
                   dispo_info_9,
                   dispo_inf_10,
                   route_id,
                   km_methode,
                   last_delivery_date,
                   departure_relation_id,
                   final_recipient_relation_relation_id,
                   given_packages,
                   unloading_date_fix_till,
                   internal_order_no_debitor_3,
                   order_state,
                   pre_order_planning_id,
                   owner,
                   dossier_no,
                   logistic_provider_information,
                   pre_order_planning_no,
                   unloading_container,
                   unloading_rf,
                   contact_person_id,
                   original_order_type,
                   additional_charging_no,
                   log_model_id,
                   service_order_template_id,
                   order_source_area,
                   terms_of_payment)
