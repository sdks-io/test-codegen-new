# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerInvoicingScope(object):

    """Implementation of the 'LISPublicCustomerInvoicingScope' model.

    The LISCustomerInvoicingScope data contract.

    Attributes:
        general_creditor (int): Gets or sets GeneralCreditor.
        credit_condition_code (CreditConditionCodeEnum): Gets or sets
            CreditConditionCode.
        general_debitor (int): Gets or sets GeneralDebitor.
        debit_condition_code (DebitConditionCodeEnum): Gets or sets
            DebitConditionCode.
        cargo_insurance (CargoInsuranceEnum): Gets or sets CargoInsurance.
        invoicing_indicator (InvoicingIndicatorEnum): Gets or sets
            InvoicingIndicator.
        differing_invoicing_address_for_system_traffic (int): Gets or sets the
            differing invoicing address for system traffic.
        debit_accounting_date (DebitAccountingDateEnum): Gets or sets
            DebitAccountingDate.
        credit_accounting_date (CreditAccountingDateEnum): Gets or sets
            CreditAccountingDate.
        in_advance_route_mode (InAdvanceRouteModeEnum): Gets or sets the in
            advance route mode.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "general_creditor": 'generalCreditor',
        "credit_condition_code": 'creditConditionCode',
        "general_debitor": 'generalDebitor',
        "debit_condition_code": 'debitConditionCode',
        "cargo_insurance": 'cargoInsurance',
        "invoicing_indicator": 'invoicingIndicator',
        "differing_invoicing_address_for_system_traffic": 'differingInvoicingAddressForSystemTraffic',
        "debit_accounting_date": 'debitAccountingDate',
        "credit_accounting_date": 'creditAccountingDate',
        "in_advance_route_mode": 'inAdvanceRouteMode'
    }

    _optionals = [
        'general_creditor',
        'credit_condition_code',
        'general_debitor',
        'debit_condition_code',
        'cargo_insurance',
        'invoicing_indicator',
        'differing_invoicing_address_for_system_traffic',
        'debit_accounting_date',
        'credit_accounting_date',
        'in_advance_route_mode',
    ]

    def __init__(self,
                 general_creditor=APIHelper.SKIP,
                 credit_condition_code=APIHelper.SKIP,
                 general_debitor=APIHelper.SKIP,
                 debit_condition_code=APIHelper.SKIP,
                 cargo_insurance=APIHelper.SKIP,
                 invoicing_indicator=APIHelper.SKIP,
                 differing_invoicing_address_for_system_traffic=APIHelper.SKIP,
                 debit_accounting_date=APIHelper.SKIP,
                 credit_accounting_date=APIHelper.SKIP,
                 in_advance_route_mode=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerInvoicingScope class"""

        # Initialize members of the class
        if general_creditor is not APIHelper.SKIP:
            self.general_creditor = general_creditor 
        if credit_condition_code is not APIHelper.SKIP:
            self.credit_condition_code = credit_condition_code 
        if general_debitor is not APIHelper.SKIP:
            self.general_debitor = general_debitor 
        if debit_condition_code is not APIHelper.SKIP:
            self.debit_condition_code = debit_condition_code 
        if cargo_insurance is not APIHelper.SKIP:
            self.cargo_insurance = cargo_insurance 
        if invoicing_indicator is not APIHelper.SKIP:
            self.invoicing_indicator = invoicing_indicator 
        if differing_invoicing_address_for_system_traffic is not APIHelper.SKIP:
            self.differing_invoicing_address_for_system_traffic = differing_invoicing_address_for_system_traffic 
        if debit_accounting_date is not APIHelper.SKIP:
            self.debit_accounting_date = debit_accounting_date 
        if credit_accounting_date is not APIHelper.SKIP:
            self.credit_accounting_date = credit_accounting_date 
        if in_advance_route_mode is not APIHelper.SKIP:
            self.in_advance_route_mode = in_advance_route_mode 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        general_creditor = dictionary.get("generalCreditor") if dictionary.get("generalCreditor") else APIHelper.SKIP
        credit_condition_code = dictionary.get("creditConditionCode") if dictionary.get("creditConditionCode") else APIHelper.SKIP
        general_debitor = dictionary.get("generalDebitor") if dictionary.get("generalDebitor") else APIHelper.SKIP
        debit_condition_code = dictionary.get("debitConditionCode") if dictionary.get("debitConditionCode") else APIHelper.SKIP
        cargo_insurance = dictionary.get("cargoInsurance") if dictionary.get("cargoInsurance") else APIHelper.SKIP
        invoicing_indicator = dictionary.get("invoicingIndicator") if dictionary.get("invoicingIndicator") else APIHelper.SKIP
        differing_invoicing_address_for_system_traffic = dictionary.get("differingInvoicingAddressForSystemTraffic") if dictionary.get("differingInvoicingAddressForSystemTraffic") else APIHelper.SKIP
        debit_accounting_date = dictionary.get("debitAccountingDate") if dictionary.get("debitAccountingDate") else APIHelper.SKIP
        credit_accounting_date = dictionary.get("creditAccountingDate") if dictionary.get("creditAccountingDate") else APIHelper.SKIP
        in_advance_route_mode = dictionary.get("inAdvanceRouteMode") if dictionary.get("inAdvanceRouteMode") else APIHelper.SKIP
        # Return an object of this model
        return cls(general_creditor,
                   credit_condition_code,
                   general_debitor,
                   debit_condition_code,
                   cargo_insurance,
                   invoicing_indicator,
                   differing_invoicing_address_for_system_traffic,
                   debit_accounting_date,
                   credit_accounting_date,
                   in_advance_route_mode)
