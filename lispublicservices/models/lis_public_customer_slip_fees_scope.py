# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_customer_slip_fee import LISPublicCustomerSlipFee


class LISPublicCustomerSlipFeesScope(object):

    """Implementation of the 'LISPublicCustomerSlipFeesScope' model.

    The LISCustomerSlipFeesScope data contract.

    Attributes:
        slip_fees (list of LISPublicCustomerSlipFee): Gets or sets
            CustomerPrints.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "slip_fees": 'slipFees'
    }

    _optionals = [
        'slip_fees',
    ]

    def __init__(self,
                 slip_fees=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerSlipFeesScope class"""

        # Initialize members of the class
        if slip_fees is not APIHelper.SKIP:
            self.slip_fees = slip_fees 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        slip_fees = None
        if dictionary.get('slipFees') is not None:
            slip_fees = [LISPublicCustomerSlipFee.from_dictionary(x) for x in dictionary.get('slipFees')]
        else:
            slip_fees = APIHelper.SKIP
        # Return an object of this model
        return cls(slip_fees)
