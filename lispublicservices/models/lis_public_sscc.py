# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicSSCC(object):

    """Implementation of the 'LISPublicSSCC' model.

    The LISSSCC data contract.

    Attributes:
        sscc_id (int): Gets or sets SSCCId.
        sscc (string): Gets or sets SSCC.
        sequence_no (int): Gets or sets SequenceNo.
        order_id (int): Gets or sets OrderId.
        order_detail_id (int): Gets or sets OrderDetailId.
        kind (KindEnum): Gets or sets Kind.
        mtype (Type1Enum): Gets or sets Type.
        sscc_status_text_id (int): Gets or sets SSCCStatusTextId.
        sscc_status_history_id (int): Gets or sets SSCCStatusHistoryId.
        changed_by (string): Gets or sets ChangedBy.
        changed_on (datetime): Gets or sets ChangedOn.
        damage_state (DamageStateEnum): Gets or sets DamageState.
        sscc_foreign (string): Gets or sets SSCCForeign.
        sscc_foreign_2 (string): Gets or sets SSCCForeign2.
        sscc_foreign_return (string): Gets or sets SSCCForeignReturn.
        service_provider_control (string): Gets or sets
            ServiceProviderControl.
        stock_location (string): Gets or sets StockLocation.
        inbound_carrier_id (int): Gets or sets InboundCarrierId.
        inbound_bordero_id (int): Gets or sets InboundBorderoId.
        picked_up (bool): Gets or sets PickedUp.
        delivered (bool): Gets or sets Delivered.
        inbound_scan (bool): Gets or sets InboundScan.
        outbound_scan (bool): Gets or sets OutboundScan.
        inbound_scan_odd (bool): Gets or sets InboundScanOdd.
        outbound_scan_odd (bool): Gets or sets OutboundScanOdd.
        date_of_hall_revision (datetime): Gets or sets DateOfHallRevision.
        real_height (float): Gets or sets RealHeight.
        real_width (float): Gets or sets RealWidth.
        real_length (float): Gets or sets RealLength.
        real_package (string): Gets or sets RealPackage.
        real_pallet_unit (string): Gets or sets RealPalletUnit.
        real_pallet_unit_count (int): Gets or sets RealPalletUnitCount.
        real_weight (float): Gets or sets RealWeight.
        hall_revision_state (HallRevisionStateEnum): Gets or sets
            HallRevisionState.
        quantity_unit (string): Gets or sets the quantity unit.
        quantity_count (int): Gets or sets the quantity count.
        relation (string): Gets or sets the quantity unit.
        additional_info (string): Gets or sets the additional information.
        text (string): Gets or sets the iln nummer.
        planned_unit (string): Gets or sets the needed pallet unit.
        chargen_no (string): Gets or sets the chargen nummer.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sscc_id": 'ssccId',
        "sscc": 'sscc',
        "sequence_no": 'sequenceNo',
        "order_id": 'orderId',
        "order_detail_id": 'orderDetailId',
        "kind": 'kind',
        "mtype": 'type',
        "sscc_status_text_id": 'ssccStatusTextId',
        "sscc_status_history_id": 'ssccStatusHistoryId',
        "changed_by": 'changedBy',
        "changed_on": 'changedOn',
        "damage_state": 'damageState',
        "sscc_foreign": 'ssccForeign',
        "sscc_foreign_2": 'ssccForeign2',
        "sscc_foreign_return": 'ssccForeignReturn',
        "service_provider_control": 'serviceProviderControl',
        "stock_location": 'stockLocation',
        "inbound_carrier_id": 'inboundCarrierId',
        "inbound_bordero_id": 'inboundBorderoId',
        "picked_up": 'pickedUp',
        "delivered": 'delivered',
        "inbound_scan": 'inboundScan',
        "outbound_scan": 'outboundScan',
        "inbound_scan_odd": 'inboundScanOdd',
        "outbound_scan_odd": 'outboundScanOdd',
        "date_of_hall_revision": 'dateOfHallRevision',
        "real_height": 'realHeight',
        "real_width": 'realWidth',
        "real_length": 'realLength',
        "real_package": 'realPackage',
        "real_pallet_unit": 'realPalletUnit',
        "real_pallet_unit_count": 'realPalletUnitCount',
        "real_weight": 'realWeight',
        "hall_revision_state": 'hallRevisionState',
        "quantity_unit": 'quantityUnit',
        "quantity_count": 'quantityCount',
        "relation": 'relation',
        "additional_info": 'additionalInfo',
        "text": 'text',
        "planned_unit": 'plannedUnit',
        "chargen_no": 'chargenNo'
    }

    _optionals = [
        'sscc_id',
        'sscc',
        'sequence_no',
        'order_id',
        'order_detail_id',
        'kind',
        'mtype',
        'sscc_status_text_id',
        'sscc_status_history_id',
        'changed_by',
        'changed_on',
        'damage_state',
        'sscc_foreign',
        'sscc_foreign_2',
        'sscc_foreign_return',
        'service_provider_control',
        'stock_location',
        'inbound_carrier_id',
        'inbound_bordero_id',
        'picked_up',
        'delivered',
        'inbound_scan',
        'outbound_scan',
        'inbound_scan_odd',
        'outbound_scan_odd',
        'date_of_hall_revision',
        'real_height',
        'real_width',
        'real_length',
        'real_package',
        'real_pallet_unit',
        'real_pallet_unit_count',
        'real_weight',
        'hall_revision_state',
        'quantity_unit',
        'quantity_count',
        'relation',
        'additional_info',
        'text',
        'planned_unit',
        'chargen_no',
    ]

    def __init__(self,
                 sscc_id=APIHelper.SKIP,
                 sscc=APIHelper.SKIP,
                 sequence_no=APIHelper.SKIP,
                 order_id=APIHelper.SKIP,
                 order_detail_id=APIHelper.SKIP,
                 kind=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 sscc_status_text_id=APIHelper.SKIP,
                 sscc_status_history_id=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 damage_state=APIHelper.SKIP,
                 sscc_foreign=APIHelper.SKIP,
                 sscc_foreign_2=APIHelper.SKIP,
                 sscc_foreign_return=APIHelper.SKIP,
                 service_provider_control=APIHelper.SKIP,
                 stock_location=APIHelper.SKIP,
                 inbound_carrier_id=APIHelper.SKIP,
                 inbound_bordero_id=APIHelper.SKIP,
                 picked_up=APIHelper.SKIP,
                 delivered=APIHelper.SKIP,
                 inbound_scan=APIHelper.SKIP,
                 outbound_scan=APIHelper.SKIP,
                 inbound_scan_odd=APIHelper.SKIP,
                 outbound_scan_odd=APIHelper.SKIP,
                 date_of_hall_revision=APIHelper.SKIP,
                 real_height=APIHelper.SKIP,
                 real_width=APIHelper.SKIP,
                 real_length=APIHelper.SKIP,
                 real_package=APIHelper.SKIP,
                 real_pallet_unit=APIHelper.SKIP,
                 real_pallet_unit_count=APIHelper.SKIP,
                 real_weight=APIHelper.SKIP,
                 hall_revision_state=APIHelper.SKIP,
                 quantity_unit=APIHelper.SKIP,
                 quantity_count=APIHelper.SKIP,
                 relation=APIHelper.SKIP,
                 additional_info=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 planned_unit=APIHelper.SKIP,
                 chargen_no=APIHelper.SKIP):
        """Constructor for the LISPublicSSCC class"""

        # Initialize members of the class
        if sscc_id is not APIHelper.SKIP:
            self.sscc_id = sscc_id 
        if sscc is not APIHelper.SKIP:
            self.sscc = sscc 
        if sequence_no is not APIHelper.SKIP:
            self.sequence_no = sequence_no 
        if order_id is not APIHelper.SKIP:
            self.order_id = order_id 
        if order_detail_id is not APIHelper.SKIP:
            self.order_detail_id = order_detail_id 
        if kind is not APIHelper.SKIP:
            self.kind = kind 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if sscc_status_text_id is not APIHelper.SKIP:
            self.sscc_status_text_id = sscc_status_text_id 
        if sscc_status_history_id is not APIHelper.SKIP:
            self.sscc_status_history_id = sscc_status_history_id 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if damage_state is not APIHelper.SKIP:
            self.damage_state = damage_state 
        if sscc_foreign is not APIHelper.SKIP:
            self.sscc_foreign = sscc_foreign 
        if sscc_foreign_2 is not APIHelper.SKIP:
            self.sscc_foreign_2 = sscc_foreign_2 
        if sscc_foreign_return is not APIHelper.SKIP:
            self.sscc_foreign_return = sscc_foreign_return 
        if service_provider_control is not APIHelper.SKIP:
            self.service_provider_control = service_provider_control 
        if stock_location is not APIHelper.SKIP:
            self.stock_location = stock_location 
        if inbound_carrier_id is not APIHelper.SKIP:
            self.inbound_carrier_id = inbound_carrier_id 
        if inbound_bordero_id is not APIHelper.SKIP:
            self.inbound_bordero_id = inbound_bordero_id 
        if picked_up is not APIHelper.SKIP:
            self.picked_up = picked_up 
        if delivered is not APIHelper.SKIP:
            self.delivered = delivered 
        if inbound_scan is not APIHelper.SKIP:
            self.inbound_scan = inbound_scan 
        if outbound_scan is not APIHelper.SKIP:
            self.outbound_scan = outbound_scan 
        if inbound_scan_odd is not APIHelper.SKIP:
            self.inbound_scan_odd = inbound_scan_odd 
        if outbound_scan_odd is not APIHelper.SKIP:
            self.outbound_scan_odd = outbound_scan_odd 
        if date_of_hall_revision is not APIHelper.SKIP:
            self.date_of_hall_revision = APIHelper.RFC3339DateTime(date_of_hall_revision) if date_of_hall_revision else None 
        if real_height is not APIHelper.SKIP:
            self.real_height = real_height 
        if real_width is not APIHelper.SKIP:
            self.real_width = real_width 
        if real_length is not APIHelper.SKIP:
            self.real_length = real_length 
        if real_package is not APIHelper.SKIP:
            self.real_package = real_package 
        if real_pallet_unit is not APIHelper.SKIP:
            self.real_pallet_unit = real_pallet_unit 
        if real_pallet_unit_count is not APIHelper.SKIP:
            self.real_pallet_unit_count = real_pallet_unit_count 
        if real_weight is not APIHelper.SKIP:
            self.real_weight = real_weight 
        if hall_revision_state is not APIHelper.SKIP:
            self.hall_revision_state = hall_revision_state 
        if quantity_unit is not APIHelper.SKIP:
            self.quantity_unit = quantity_unit 
        if quantity_count is not APIHelper.SKIP:
            self.quantity_count = quantity_count 
        if relation is not APIHelper.SKIP:
            self.relation = relation 
        if additional_info is not APIHelper.SKIP:
            self.additional_info = additional_info 
        if text is not APIHelper.SKIP:
            self.text = text 
        if planned_unit is not APIHelper.SKIP:
            self.planned_unit = planned_unit 
        if chargen_no is not APIHelper.SKIP:
            self.chargen_no = chargen_no 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        sscc_id = dictionary.get("ssccId") if dictionary.get("ssccId") else APIHelper.SKIP
        sscc = dictionary.get("sscc") if dictionary.get("sscc") else APIHelper.SKIP
        sequence_no = dictionary.get("sequenceNo") if dictionary.get("sequenceNo") else APIHelper.SKIP
        order_id = dictionary.get("orderId") if dictionary.get("orderId") else APIHelper.SKIP
        order_detail_id = dictionary.get("orderDetailId") if dictionary.get("orderDetailId") else APIHelper.SKIP
        kind = dictionary.get("kind") if dictionary.get("kind") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        sscc_status_text_id = dictionary.get("ssccStatusTextId") if dictionary.get("ssccStatusTextId") else APIHelper.SKIP
        sscc_status_history_id = dictionary.get("ssccStatusHistoryId") if dictionary.get("ssccStatusHistoryId") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        damage_state = dictionary.get("damageState") if dictionary.get("damageState") else APIHelper.SKIP
        sscc_foreign = dictionary.get("ssccForeign") if dictionary.get("ssccForeign") else APIHelper.SKIP
        sscc_foreign_2 = dictionary.get("ssccForeign2") if dictionary.get("ssccForeign2") else APIHelper.SKIP
        sscc_foreign_return = dictionary.get("ssccForeignReturn") if dictionary.get("ssccForeignReturn") else APIHelper.SKIP
        service_provider_control = dictionary.get("serviceProviderControl") if dictionary.get("serviceProviderControl") else APIHelper.SKIP
        stock_location = dictionary.get("stockLocation") if dictionary.get("stockLocation") else APIHelper.SKIP
        inbound_carrier_id = dictionary.get("inboundCarrierId") if dictionary.get("inboundCarrierId") else APIHelper.SKIP
        inbound_bordero_id = dictionary.get("inboundBorderoId") if dictionary.get("inboundBorderoId") else APIHelper.SKIP
        picked_up = dictionary.get("pickedUp") if "pickedUp" in dictionary.keys() else APIHelper.SKIP
        delivered = dictionary.get("delivered") if "delivered" in dictionary.keys() else APIHelper.SKIP
        inbound_scan = dictionary.get("inboundScan") if "inboundScan" in dictionary.keys() else APIHelper.SKIP
        outbound_scan = dictionary.get("outboundScan") if "outboundScan" in dictionary.keys() else APIHelper.SKIP
        inbound_scan_odd = dictionary.get("inboundScanOdd") if "inboundScanOdd" in dictionary.keys() else APIHelper.SKIP
        outbound_scan_odd = dictionary.get("outboundScanOdd") if "outboundScanOdd" in dictionary.keys() else APIHelper.SKIP
        date_of_hall_revision = APIHelper.RFC3339DateTime.from_value(dictionary.get("dateOfHallRevision")).datetime if dictionary.get("dateOfHallRevision") else APIHelper.SKIP
        real_height = dictionary.get("realHeight") if dictionary.get("realHeight") else APIHelper.SKIP
        real_width = dictionary.get("realWidth") if dictionary.get("realWidth") else APIHelper.SKIP
        real_length = dictionary.get("realLength") if dictionary.get("realLength") else APIHelper.SKIP
        real_package = dictionary.get("realPackage") if dictionary.get("realPackage") else APIHelper.SKIP
        real_pallet_unit = dictionary.get("realPalletUnit") if dictionary.get("realPalletUnit") else APIHelper.SKIP
        real_pallet_unit_count = dictionary.get("realPalletUnitCount") if dictionary.get("realPalletUnitCount") else APIHelper.SKIP
        real_weight = dictionary.get("realWeight") if dictionary.get("realWeight") else APIHelper.SKIP
        hall_revision_state = dictionary.get("hallRevisionState") if dictionary.get("hallRevisionState") else APIHelper.SKIP
        quantity_unit = dictionary.get("quantityUnit") if dictionary.get("quantityUnit") else APIHelper.SKIP
        quantity_count = dictionary.get("quantityCount") if dictionary.get("quantityCount") else APIHelper.SKIP
        relation = dictionary.get("relation") if dictionary.get("relation") else APIHelper.SKIP
        additional_info = dictionary.get("additionalInfo") if dictionary.get("additionalInfo") else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        planned_unit = dictionary.get("plannedUnit") if dictionary.get("plannedUnit") else APIHelper.SKIP
        chargen_no = dictionary.get("chargenNo") if dictionary.get("chargenNo") else APIHelper.SKIP
        # Return an object of this model
        return cls(sscc_id,
                   sscc,
                   sequence_no,
                   order_id,
                   order_detail_id,
                   kind,
                   mtype,
                   sscc_status_text_id,
                   sscc_status_history_id,
                   changed_by,
                   changed_on,
                   damage_state,
                   sscc_foreign,
                   sscc_foreign_2,
                   sscc_foreign_return,
                   service_provider_control,
                   stock_location,
                   inbound_carrier_id,
                   inbound_bordero_id,
                   picked_up,
                   delivered,
                   inbound_scan,
                   outbound_scan,
                   inbound_scan_odd,
                   outbound_scan_odd,
                   date_of_hall_revision,
                   real_height,
                   real_width,
                   real_length,
                   real_package,
                   real_pallet_unit,
                   real_pallet_unit_count,
                   real_weight,
                   hall_revision_state,
                   quantity_unit,
                   quantity_count,
                   relation,
                   additional_info,
                   text,
                   planned_unit,
                   chargen_no)
