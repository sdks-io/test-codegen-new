# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicPermission(object):

    """Implementation of the 'LISPublicPermission' model.

    TODO: type model description here.

    Attributes:
        account_name (string): Gets or sets the name of the account.
        object_name (string): Gets or sets the name of the object.
        granted_by_name (string): Gets or sets the name of the granted by.
        granted_by_type (GrantedByTypeEnum): Gets or sets the type of the
            granted by.
        is_default_right (bool): Gets or sets a value indicating whether this
            instance is default right.
        access_level (AccessLevelEnum): Gets or sets the access level.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "object_name": 'objectName',
        "granted_by_name": 'grantedByName',
        "granted_by_type": 'grantedByType',
        "is_default_right": 'isDefaultRight',
        "access_level": 'accessLevel'
    }

    _optionals = [
        'account_name',
        'object_name',
        'granted_by_name',
        'granted_by_type',
        'is_default_right',
        'access_level',
    ]

    def __init__(self,
                 account_name=APIHelper.SKIP,
                 object_name=APIHelper.SKIP,
                 granted_by_name=APIHelper.SKIP,
                 granted_by_type=APIHelper.SKIP,
                 is_default_right=APIHelper.SKIP,
                 access_level=APIHelper.SKIP):
        """Constructor for the LISPublicPermission class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if object_name is not APIHelper.SKIP:
            self.object_name = object_name 
        if granted_by_name is not APIHelper.SKIP:
            self.granted_by_name = granted_by_name 
        if granted_by_type is not APIHelper.SKIP:
            self.granted_by_type = granted_by_type 
        if is_default_right is not APIHelper.SKIP:
            self.is_default_right = is_default_right 
        if access_level is not APIHelper.SKIP:
            self.access_level = access_level 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        object_name = dictionary.get("objectName") if dictionary.get("objectName") else APIHelper.SKIP
        granted_by_name = dictionary.get("grantedByName") if dictionary.get("grantedByName") else APIHelper.SKIP
        granted_by_type = dictionary.get("grantedByType") if dictionary.get("grantedByType") else APIHelper.SKIP
        is_default_right = dictionary.get("isDefaultRight") if "isDefaultRight" in dictionary.keys() else APIHelper.SKIP
        access_level = dictionary.get("accessLevel") if dictionary.get("accessLevel") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   object_name,
                   granted_by_name,
                   granted_by_type,
                   is_default_right,
                   access_level)
