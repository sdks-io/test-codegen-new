# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerBusinessTime(object):

    """Implementation of the 'LISPublicCustomerBusinessTime' model.

    The LISCustomerBusinessTime data contract.

    Attributes:
        customer_id (int): Gets or sets CustomerId.
        day_of_week (DayOfWeekEnum): Gets or sets DayOfWeek.
        loading_from_1 (datetime): Gets or sets LoadingFrom1.
        loading_to_1 (datetime): Gets or sets LoadingTo1.
        loading_from_2 (datetime): Gets or sets LoadingFrom2.
        loading_to_2 (datetime): Gets or sets LoadingTo2.
        unloading_from_1 (datetime): Gets or sets UnloadingFrom1.
        unloading_to_1 (datetime): Gets or sets UnloadingTo1.
        unloading_from_2 (datetime): Gets or sets UnloadingFrom2.
        unloading_to_2 (datetime): Gets or sets UnloadingTo2.
        loading_duration (int): Gets or sets LoadingDuration.
        unloading_duration (int): Gets or sets UnloadingDuration.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "day_of_week": 'dayOfWeek',
        "loading_from_1": 'loadingFrom1',
        "loading_to_1": 'loadingTo1',
        "loading_from_2": 'loadingFrom2',
        "loading_to_2": 'loadingTo2',
        "unloading_from_1": 'unloadingFrom1',
        "unloading_to_1": 'unloadingTo1',
        "unloading_from_2": 'unloadingFrom2',
        "unloading_to_2": 'unloadingTo2',
        "loading_duration": 'loadingDuration',
        "unloading_duration": 'unloadingDuration',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy'
    }

    _optionals = [
        'customer_id',
        'day_of_week',
        'loading_from_1',
        'loading_to_1',
        'loading_from_2',
        'loading_to_2',
        'unloading_from_1',
        'unloading_to_1',
        'unloading_from_2',
        'unloading_to_2',
        'loading_duration',
        'unloading_duration',
        'changed_on',
        'changed_by',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 day_of_week=APIHelper.SKIP,
                 loading_from_1=APIHelper.SKIP,
                 loading_to_1=APIHelper.SKIP,
                 loading_from_2=APIHelper.SKIP,
                 loading_to_2=APIHelper.SKIP,
                 unloading_from_1=APIHelper.SKIP,
                 unloading_to_1=APIHelper.SKIP,
                 unloading_from_2=APIHelper.SKIP,
                 unloading_to_2=APIHelper.SKIP,
                 loading_duration=APIHelper.SKIP,
                 unloading_duration=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerBusinessTime class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if day_of_week is not APIHelper.SKIP:
            self.day_of_week = day_of_week 
        if loading_from_1 is not APIHelper.SKIP:
            self.loading_from_1 = APIHelper.RFC3339DateTime(loading_from_1) if loading_from_1 else None 
        if loading_to_1 is not APIHelper.SKIP:
            self.loading_to_1 = APIHelper.RFC3339DateTime(loading_to_1) if loading_to_1 else None 
        if loading_from_2 is not APIHelper.SKIP:
            self.loading_from_2 = APIHelper.RFC3339DateTime(loading_from_2) if loading_from_2 else None 
        if loading_to_2 is not APIHelper.SKIP:
            self.loading_to_2 = APIHelper.RFC3339DateTime(loading_to_2) if loading_to_2 else None 
        if unloading_from_1 is not APIHelper.SKIP:
            self.unloading_from_1 = APIHelper.RFC3339DateTime(unloading_from_1) if unloading_from_1 else None 
        if unloading_to_1 is not APIHelper.SKIP:
            self.unloading_to_1 = APIHelper.RFC3339DateTime(unloading_to_1) if unloading_to_1 else None 
        if unloading_from_2 is not APIHelper.SKIP:
            self.unloading_from_2 = APIHelper.RFC3339DateTime(unloading_from_2) if unloading_from_2 else None 
        if unloading_to_2 is not APIHelper.SKIP:
            self.unloading_to_2 = APIHelper.RFC3339DateTime(unloading_to_2) if unloading_to_2 else None 
        if loading_duration is not APIHelper.SKIP:
            self.loading_duration = loading_duration 
        if unloading_duration is not APIHelper.SKIP:
            self.unloading_duration = unloading_duration 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        day_of_week = dictionary.get("dayOfWeek") if dictionary.get("dayOfWeek") else APIHelper.SKIP
        loading_from_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingFrom1")).datetime if dictionary.get("loadingFrom1") else APIHelper.SKIP
        loading_to_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTo1")).datetime if dictionary.get("loadingTo1") else APIHelper.SKIP
        loading_from_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingFrom2")).datetime if dictionary.get("loadingFrom2") else APIHelper.SKIP
        loading_to_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("loadingTo2")).datetime if dictionary.get("loadingTo2") else APIHelper.SKIP
        unloading_from_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingFrom1")).datetime if dictionary.get("unloadingFrom1") else APIHelper.SKIP
        unloading_to_1 = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingTo1")).datetime if dictionary.get("unloadingTo1") else APIHelper.SKIP
        unloading_from_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingFrom2")).datetime if dictionary.get("unloadingFrom2") else APIHelper.SKIP
        unloading_to_2 = APIHelper.RFC3339DateTime.from_value(dictionary.get("unloadingTo2")).datetime if dictionary.get("unloadingTo2") else APIHelper.SKIP
        loading_duration = dictionary.get("loadingDuration") if dictionary.get("loadingDuration") else APIHelper.SKIP
        unloading_duration = dictionary.get("unloadingDuration") if dictionary.get("unloadingDuration") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   day_of_week,
                   loading_from_1,
                   loading_to_1,
                   loading_from_2,
                   loading_to_2,
                   unloading_from_1,
                   unloading_to_1,
                   unloading_from_2,
                   unloading_to_2,
                   loading_duration,
                   unloading_duration,
                   changed_on,
                   changed_by)
