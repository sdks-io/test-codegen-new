# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerAddressRole(object):

    """Implementation of the 'LISPublicCustomerAddressRole' model.

    AdressRole for customer

    Attributes:
        customer_address_role_id (int): Gets or sets CustomerAddressRoleId.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.
        customer_id (int): Gets or sets CustomerId.
        customer_sequence_no (int): Gets or sets CustomerSequenceNo.
        address_type_id (int): Gets or sets AddressTypeId.
        role_customer_id (int): Gets or sets RoleCustomerId.
        remarks (string): Gets or sets Remarks.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_address_role_id": 'customerAddressRoleId',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "customer_id": 'customerId',
        "customer_sequence_no": 'customerSequenceNo',
        "address_type_id": 'addressTypeId',
        "role_customer_id": 'roleCustomerId',
        "remarks": 'remarks'
    }

    _optionals = [
        'customer_address_role_id',
        'changed_on',
        'changed_by',
        'customer_id',
        'customer_sequence_no',
        'address_type_id',
        'role_customer_id',
        'remarks',
    ]

    def __init__(self,
                 customer_address_role_id=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 customer_sequence_no=APIHelper.SKIP,
                 address_type_id=APIHelper.SKIP,
                 role_customer_id=APIHelper.SKIP,
                 remarks=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerAddressRole class"""

        # Initialize members of the class
        if customer_address_role_id is not APIHelper.SKIP:
            self.customer_address_role_id = customer_address_role_id 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if customer_sequence_no is not APIHelper.SKIP:
            self.customer_sequence_no = customer_sequence_no 
        if address_type_id is not APIHelper.SKIP:
            self.address_type_id = address_type_id 
        if role_customer_id is not APIHelper.SKIP:
            self.role_customer_id = role_customer_id 
        if remarks is not APIHelper.SKIP:
            self.remarks = remarks 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_address_role_id = dictionary.get("customerAddressRoleId") if dictionary.get("customerAddressRoleId") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        customer_sequence_no = dictionary.get("customerSequenceNo") if dictionary.get("customerSequenceNo") else APIHelper.SKIP
        address_type_id = dictionary.get("addressTypeId") if dictionary.get("addressTypeId") else APIHelper.SKIP
        role_customer_id = dictionary.get("roleCustomerId") if dictionary.get("roleCustomerId") else APIHelper.SKIP
        remarks = dictionary.get("remarks") if dictionary.get("remarks") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_address_role_id,
                   changed_on,
                   changed_by,
                   customer_id,
                   customer_sequence_no,
                   address_type_id,
                   role_customer_id,
                   remarks)
