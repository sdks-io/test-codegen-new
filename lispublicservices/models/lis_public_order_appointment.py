# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicOrderAppointment(object):

    """Implementation of the 'LISPublicOrderAppointment' model.

    The order appointment data contract.

    Attributes:
        appointment_type (AppointmentTypeEnum): Gets or sets the type of the
            appointment.
        loading_type (LoadingTypeEnum): Gets or sets the type of the loading.
        date_from (datetime): Gets or sets the date from.
        time_from (datetime): Gets or sets the time from.
        date_till (datetime): Gets or sets the date till.
        time_till (datetime): Gets or sets the time till.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "appointment_type": 'appointmentType',
        "loading_type": 'loadingType',
        "date_from": 'dateFrom',
        "time_from": 'timeFrom',
        "date_till": 'dateTill',
        "time_till": 'timeTill'
    }

    _optionals = [
        'appointment_type',
        'loading_type',
        'date_from',
        'time_from',
        'date_till',
        'time_till',
    ]

    def __init__(self,
                 appointment_type=APIHelper.SKIP,
                 loading_type=APIHelper.SKIP,
                 date_from=APIHelper.SKIP,
                 time_from=APIHelper.SKIP,
                 date_till=APIHelper.SKIP,
                 time_till=APIHelper.SKIP):
        """Constructor for the LISPublicOrderAppointment class"""

        # Initialize members of the class
        if appointment_type is not APIHelper.SKIP:
            self.appointment_type = appointment_type 
        if loading_type is not APIHelper.SKIP:
            self.loading_type = loading_type 
        if date_from is not APIHelper.SKIP:
            self.date_from = APIHelper.RFC3339DateTime(date_from) if date_from else None 
        if time_from is not APIHelper.SKIP:
            self.time_from = APIHelper.RFC3339DateTime(time_from) if time_from else None 
        if date_till is not APIHelper.SKIP:
            self.date_till = APIHelper.RFC3339DateTime(date_till) if date_till else None 
        if time_till is not APIHelper.SKIP:
            self.time_till = APIHelper.RFC3339DateTime(time_till) if time_till else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        appointment_type = dictionary.get("appointmentType") if dictionary.get("appointmentType") else APIHelper.SKIP
        loading_type = dictionary.get("loadingType") if dictionary.get("loadingType") else APIHelper.SKIP
        date_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("dateFrom")).datetime if dictionary.get("dateFrom") else APIHelper.SKIP
        time_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("timeFrom")).datetime if dictionary.get("timeFrom") else APIHelper.SKIP
        date_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("dateTill")).datetime if dictionary.get("dateTill") else APIHelper.SKIP
        time_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("timeTill")).datetime if dictionary.get("timeTill") else APIHelper.SKIP
        # Return an object of this model
        return cls(appointment_type,
                   loading_type,
                   date_from,
                   time_from,
                   date_till,
                   time_till)
