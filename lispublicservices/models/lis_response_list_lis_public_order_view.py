# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_order_view import LISPublicOrderView


class LISResponseListLISPublicOrderView(object):

    """Implementation of the 'LISResponse[List[LISPublicOrderView]]' model.

    The api response class.

    Attributes:
        operation_result (list of LISPublicOrderView): The operation result.
        message (list of string): The message.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "operation_result": 'operationResult',
        "message": 'message'
    }

    _optionals = [
        'operation_result',
        'message',
    ]

    def __init__(self,
                 operation_result=APIHelper.SKIP,
                 message=APIHelper.SKIP):
        """Constructor for the LISResponseListLISPublicOrderView class"""

        # Initialize members of the class
        if operation_result is not APIHelper.SKIP:
            self.operation_result = operation_result 
        if message is not APIHelper.SKIP:
            self.message = message 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        operation_result = None
        if dictionary.get('operationResult') is not None:
            operation_result = [LISPublicOrderView.from_dictionary(x) for x in dictionary.get('operationResult')]
        else:
            operation_result = APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        # Return an object of this model
        return cls(operation_result,
                   message)
