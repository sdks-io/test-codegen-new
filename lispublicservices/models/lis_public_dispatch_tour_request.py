# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_cost_item import LISPublicCostItem


class LISPublicDispatchTourRequest(object):

    """Implementation of the 'LISPublicDispatchTourRequest' model.

    A request for a public dispatch tour.

    Attributes:
        tour_id (int): Gets or sets the carrier id.
        carrier_id (int): Gets or sets the carrier id.
        lorry_id (string): Gets or sets the lorry id.
        trailer_id (string): Gets or sets the trailer id.
        costs (list of LISPublicCostItem): Gets or sets the cost.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tour_id": 'tourId',
        "carrier_id": 'carrierId',
        "lorry_id": 'lorryId',
        "trailer_id": 'trailerId',
        "costs": 'costs'
    }

    _optionals = [
        'tour_id',
        'carrier_id',
        'lorry_id',
        'trailer_id',
        'costs',
    ]

    def __init__(self,
                 tour_id=APIHelper.SKIP,
                 carrier_id=APIHelper.SKIP,
                 lorry_id=APIHelper.SKIP,
                 trailer_id=APIHelper.SKIP,
                 costs=APIHelper.SKIP):
        """Constructor for the LISPublicDispatchTourRequest class"""

        # Initialize members of the class
        if tour_id is not APIHelper.SKIP:
            self.tour_id = tour_id 
        if carrier_id is not APIHelper.SKIP:
            self.carrier_id = carrier_id 
        if lorry_id is not APIHelper.SKIP:
            self.lorry_id = lorry_id 
        if trailer_id is not APIHelper.SKIP:
            self.trailer_id = trailer_id 
        if costs is not APIHelper.SKIP:
            self.costs = costs 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        tour_id = dictionary.get("tourId") if dictionary.get("tourId") else APIHelper.SKIP
        carrier_id = dictionary.get("carrierId") if dictionary.get("carrierId") else APIHelper.SKIP
        lorry_id = dictionary.get("lorryId") if dictionary.get("lorryId") else APIHelper.SKIP
        trailer_id = dictionary.get("trailerId") if dictionary.get("trailerId") else APIHelper.SKIP
        costs = None
        if dictionary.get('costs') is not None:
            costs = [LISPublicCostItem.from_dictionary(x) for x in dictionary.get('costs')]
        else:
            costs = APIHelper.SKIP
        # Return an object of this model
        return cls(tour_id,
                   carrier_id,
                   lorry_id,
                   trailer_id,
                   costs)
