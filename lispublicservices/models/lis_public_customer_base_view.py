# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_meta_info_collection import LISMetaInfoCollection


class LISPublicCustomerBaseView(object):

    """Implementation of the 'LISPublicCustomerBaseView' model.

    Represents an entity class. This class depends on the database table

    Attributes:
        customer_id (int): Gets or sets the CustomerId property. This property
            depends on the database field KundenNr.
        customer_short (string): Gets or sets the CustomerShort property. This
            property depends on the database field KunShort.
        name_1 (string): Gets or sets the Name1 property. This property
            depends on the database field Name1.
        name_2 (string): Gets or sets the Name2 property. This property
            depends on the database field Name2.
        name_3 (string): Gets or sets the Name3 property. This property
            depends on the database field Name3.
        street (string): Gets or sets the Street property. This property
            depends on the database field Strasse.
        country_code (string): Gets or sets the CountryCode property. This
            property depends on the database field LKZ.
        zip_code (string): Gets or sets the ZipCode property. This property
            depends on the database field PLZ.
        city_code (string): Gets or sets the LKZPLZ property. This property
            depends on the database field LKZPLZ.
        city (string): Gets or sets the City property. This property depends
            on the database field Ort.
        city_district (string): Gets or sets the CityDistrict property. This
            property depends on the database field Ortsteil.
        i_loc_nr (string): Gets or sets the iLocNr property. This property
            depends on the database field iLocNr.
        phone (string): Gets or sets the Phone property. This property depends
            on the database field Tel.
        vehicle_phone (string): Gets or sets the VehiclePhone property. This
            property depends on the database field TelAuto.
        fax (string): Gets or sets the Fax property. This property depends on
            the database field Fax.
        administrator (string): Gets or sets the Administrator property. This
            property depends on the database field Sachbearb.
        homepage (string): Gets or sets the Homepage property. This property
            depends on the database field Homepage.
        email (string): Gets or sets the email property. This property depends
            on the database field eMail.
        end_customer (int): Gets or sets the EndKunde property. This property
            depends on the database field EndKunde.
        ust_id (string): Gets or sets the UstId property. This property
            depends on the database field UstId.
        tax_id (string): Gets or sets the SteuerNr property. This property
            depends on the database field SteuerNr.
        l_st_name_1 (string): Gets or sets the LStName1 property. This
            property depends on the database field LstName1.
        l_st_name_2 (string): Gets or sets the LStName2 property. This
            property depends on the database field LstName2.
        l_st_name_3 (string): Gets or sets the LStName3 property. This
            property depends on the database field LstName3.
        lst_street (string): Gets or sets the LStStrasse property. This
            property depends on the database field LstStrasse.
        lst_country_code (string): Gets or sets the LstLKZ property. This
            property depends on the database field LstLKZ.
        lst_zip_code (string): Gets or sets the LstPLZ property. This property
            depends on the database field LstPLZ.
        lst_country_code_zip (string): Gets or sets the LstLKZPLZ property.
            This property depends on the database field LstLKZPLZ.
        lst_city (string): Gets or sets the LstOrt property. This property
            depends on the database field LstOrt.
        lst_city_district (string): Gets or sets the LstOrtsteil property.
            This property depends on the database field LstOrtsteil.
        account_table (int): Gets or sets the AccountTable property. This
            property depends on the database field KtoTab.
        cost_center (int): Gets or sets the CostCenter property. This property
            depends on the database field KStelle.
        cost_unit (int): Gets or sets the CostUnit property. This property
            depends on the database field KTraeger.
        sales_tax_code (string): Gets or sets the SalesTaxCode property. This
            property depends on the database field UC.
        is_invoicing_blocked_for_new_orders (string): Gets or sets the
            FakSperr property. This property depends on the database field
            FakSperr.
        blocked_until (datetime): Gets or sets the BlockedUntil property. This
            property depends on the database field SperrDat.
        invoice_division_id (int): Gets or sets the InvoiceDivisionId
            property. This property depends on the database field ReAbtID.
        invoice_department_id (int): Gets or sets the InvoiceDepartmentId
            property. This property depends on the database field ReBerID.
        km_methode (string): Gets or sets the KmMethode property. This
            property depends on the database field KmMethode.
        condition_type (string): Gets or sets the ReKond property. This
            property depends on the database field ReKond.
        credit_condition_type (string): Gets or sets the GsKond property. This
            property depends on the database field GSKond.
        optimization_type (string): Gets or sets the ReOptKz property. This
            property depends on the database field ReOptKz.
        credit_optimization_type (string): Gets or sets the GsOptKz property.
            This property depends on the database field GSOptKz.
        cargo_insurance (string): Gets or sets the ReKunVB property. This
            property depends on the database field ReKunVB.
        gs_customer_insurance (string): Gets or sets the GsKunVB property.
            This property depends on the database field GsKunVB.
        general_condition_customer_id (int): Gets or sets the ReAllgKond
            property. This property depends on the database field ReAllgKond.
        general_creditor (int): Gets or sets the GsAllgKond property. This
            property depends on the database field GsAllgKond.
        print_debit (string): Gets or sets the ReDruck property. This property
            depends on the database field ReDruck.
        print_credit (string): Gets or sets the GsDruck property. This
            property depends on the database field GSDruck.
        debit_form_type (int): Gets or sets the ReFormTyp property. This
            property depends on the database field ReFormTyp.
        credit_form_type (int): Gets or sets the GsFormTyp property. This
            property depends on the database field GsFormTyp.
        special_invoice_debit_form_type (int): Gets or sets the SFReFormTyp
            property. This property depends on the database field
            SFReFormTyp.
        special_invoice_credit_form_type (int): Gets or sets the SFGsFormTyp
            property. This property depends on the database field
            SFGsFormTyp.
        debit_print_currency (string): Gets or sets the ReWKurz property. This
            property depends on the database field ReWKurz.
        credit_print_currency (string): Gets or sets the GsWKurz property.
            This property depends on the database field GSWKurz.
        aggregated_print_debit (string): Gets or sets the ReSammel property.
            This property depends on the database field ReSammel.
        aggregated_print_credit (string): Gets or sets the GsSammel property.
            This property depends on the database field GSSammel.
        differing_voucher_recipient_debit (int): Gets or sets the ReFANr
            property. This property depends on the database field ReFANr.
        differing_voucher_recipient_credit (int): Gets or sets the GsFANr
            property. This property depends on the database field GSFANr.
        incoming_debit (string): Gets or sets the ReEinBeleg property. This
            property depends on the database field ReEinBeleg.
        incoming_credit (string): Gets or sets the GsEinBeleg property. This
            property depends on the database field GSEinBeleg.
        creditor_account_number (int): Gets or sets the KtoKre property. This
            property depends on the database field KtoKre.
        debitor_account_number (int): Gets or sets the KtoDeb property. This
            property depends on the database field KtoDeb.
        creditor_account (string): Gets or sets the KtoKreA property. This
            property depends on the database field KtoKreA.
        debitor_account (string): Gets or sets the KtoDebA property. This
            property depends on the database field KtoDebA.
        debit_booking (int): Gets or sets the ReVerbuchD property. This
            property depends on the database field ReVerbuchD.
        credit_booking (int): Gets or sets the GsVerbuchD property. This
            property depends on the database field GSVerbuchD.
        group (string): Gets or sets the Gruppe property. This property
            depends on the database field Gruppe.
        created_on (datetime): Gets or sets the CreatedOn property. This
            property depends on the database field ErstDat.
        created_by (string): Gets or sets the CreatedBy property. This
            property depends on the database field ErstUs.
        changed_on (datetime): Gets or sets the ChangedOn property. This
            property depends on the database field AendDat.
        changed_by (string): Gets or sets the ChangedBy property. This
            property depends on the database field AendUs.
        business (string): Gets or sets the Branche property. This property
            depends on the database field Branche.
        code (string): Gets or sets the Code property. This property depends
            on the database field Code.
        terms_of_payment (int): Gets or sets the TermsOfPayment property. This
            property depends on the database field ZahlBed.
        limit_debit (int): Gets or sets the KreditLimi property. This property
            depends on the database field KreditLimi.
        no_dunning (int): Gets or sets the NoMahn property. This property
            depends on the database field NoMahn.
        print_schedule (string): Gets or sets the LmKtoAnh property. This
            property depends on the database field LmKtoAnh.
        mprint (string): Gets or sets the LmKtoDruck property. This property
            depends on the database field LmKtoDruck.
        ledger_account (string): Gets or sets the LmGegenKto property. This
            property depends on the database field LmGegenKto.
        reminder (string): Gets or sets the LmAnmahn property. This property
            depends on the database field LmAnMahn.
        bank_code (string): Gets or sets the BvBLZ property. This property
            depends on the database field BvBLZ.
        bank_account_number (string): Gets or sets the BvKtoNr property. This
            property depends on the database field BvKtoNr.
        international_bank_account_number (string): Gets or sets the BvIBAN
            property. This property depends on the database field BvIBAN.
        swift_code (string): Gets or sets the BvSWIFT property. This property
            depends on the database field BvSWIFT.
        bank_name (string): Gets or sets the BvBankname property. This
            property depends on the database field BvBankname.
        print_co_2_emissions (int): Gets or sets the AntCO2Dru property. This
            property depends on the database field AntCO2Dru.
        average_emissions (float): Gets or sets the EmiCO2 property. This
            property depends on the database field EmiCO2.
        fuel_type (int): Gets or sets the FuelType property. This property
            depends on the database field FuelType.
        av_consumption (float): Gets or sets the AVConsumption property. This
            property depends on the database field AVConsumption.
        object_id (uuid|string): TODO: type description here.
        is_new (bool): TODO: type description here.
        original_hash_snapshot (string): TODO: type description here.
        original_snapshot (object): TODO: type description here.
        current_snapshot (object): TODO: type description here.
        meta_info (LISMetaInfoCollection): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "customer_short": 'customerShort',
        "name_1": 'name1',
        "name_2": 'name2',
        "name_3": 'name3',
        "street": 'street',
        "country_code": 'countryCode',
        "zip_code": 'zipCode',
        "city_code": 'cityCode',
        "city": 'city',
        "city_district": 'cityDistrict',
        "i_loc_nr": 'iLocNr',
        "phone": 'phone',
        "vehicle_phone": 'vehiclePhone',
        "fax": 'fax',
        "administrator": 'administrator',
        "homepage": 'homepage',
        "email": 'email',
        "end_customer": 'endCustomer',
        "ust_id": 'ustId',
        "tax_id": 'taxId',
        "l_st_name_1": 'lStName1',
        "l_st_name_2": 'lStName2',
        "l_st_name_3": 'lStName3',
        "lst_street": 'lstStreet',
        "lst_country_code": 'lstCountryCode',
        "lst_zip_code": 'lstZipCode',
        "lst_country_code_zip": 'lstCountryCodeZip',
        "lst_city": 'lstCity',
        "lst_city_district": 'lstCityDistrict',
        "account_table": 'accountTable',
        "cost_center": 'costCenter',
        "cost_unit": 'costUnit',
        "sales_tax_code": 'salesTaxCode',
        "is_invoicing_blocked_for_new_orders": 'isInvoicingBlockedForNewOrders',
        "blocked_until": 'blockedUntil',
        "invoice_division_id": 'invoiceDivisionId',
        "invoice_department_id": 'invoiceDepartmentId',
        "km_methode": 'kmMethode',
        "condition_type": 'conditionType',
        "credit_condition_type": 'creditConditionType',
        "optimization_type": 'optimizationType',
        "credit_optimization_type": 'creditOptimizationType',
        "cargo_insurance": 'cargoInsurance',
        "gs_customer_insurance": 'gsCustomerInsurance',
        "general_condition_customer_id": 'generalConditionCustomerId',
        "general_creditor": 'generalCreditor',
        "print_debit": 'printDebit',
        "print_credit": 'printCredit',
        "debit_form_type": 'debitFormType',
        "credit_form_type": 'creditFormType',
        "special_invoice_debit_form_type": 'specialInvoiceDebitFormType',
        "special_invoice_credit_form_type": 'specialInvoiceCreditFormType',
        "debit_print_currency": 'debitPrintCurrency',
        "credit_print_currency": 'creditPrintCurrency',
        "aggregated_print_debit": 'aggregatedPrintDebit',
        "aggregated_print_credit": 'aggregatedPrintCredit',
        "differing_voucher_recipient_debit": 'differingVoucherRecipientDebit',
        "differing_voucher_recipient_credit": 'differingVoucherRecipientCredit',
        "incoming_debit": 'incomingDebit',
        "incoming_credit": 'incomingCredit',
        "creditor_account_number": 'creditorAccountNumber',
        "debitor_account_number": 'debitorAccountNumber',
        "creditor_account": 'creditorAccount',
        "debitor_account": 'debitorAccount',
        "debit_booking": 'debitBooking',
        "credit_booking": 'creditBooking',
        "group": 'group',
        "created_on": 'createdOn',
        "created_by": 'createdBy',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "business": 'business',
        "code": 'code',
        "terms_of_payment": 'termsOfPayment',
        "limit_debit": 'limitDebit',
        "no_dunning": 'noDunning',
        "print_schedule": 'printSchedule',
        "mprint": 'print',
        "ledger_account": 'ledgerAccount',
        "reminder": 'reminder',
        "bank_code": 'bankCode',
        "bank_account_number": 'bankAccountNumber',
        "international_bank_account_number": 'internationalBankAccountNumber',
        "swift_code": 'swiftCode',
        "bank_name": 'bankName',
        "print_co_2_emissions": 'printCO2Emissions',
        "average_emissions": 'averageEmissions',
        "fuel_type": 'fuelType',
        "av_consumption": 'avConsumption',
        "object_id": 'objectId',
        "is_new": 'isNew',
        "original_hash_snapshot": 'originalHashSnapshot',
        "original_snapshot": 'originalSnapshot',
        "current_snapshot": 'currentSnapshot',
        "meta_info": 'metaInfo'
    }

    _optionals = [
        'customer_id',
        'customer_short',
        'name_1',
        'name_2',
        'name_3',
        'street',
        'country_code',
        'zip_code',
        'city_code',
        'city',
        'city_district',
        'i_loc_nr',
        'phone',
        'vehicle_phone',
        'fax',
        'administrator',
        'homepage',
        'email',
        'end_customer',
        'ust_id',
        'tax_id',
        'l_st_name_1',
        'l_st_name_2',
        'l_st_name_3',
        'lst_street',
        'lst_country_code',
        'lst_zip_code',
        'lst_country_code_zip',
        'lst_city',
        'lst_city_district',
        'account_table',
        'cost_center',
        'cost_unit',
        'sales_tax_code',
        'is_invoicing_blocked_for_new_orders',
        'blocked_until',
        'invoice_division_id',
        'invoice_department_id',
        'km_methode',
        'condition_type',
        'credit_condition_type',
        'optimization_type',
        'credit_optimization_type',
        'cargo_insurance',
        'gs_customer_insurance',
        'general_condition_customer_id',
        'general_creditor',
        'print_debit',
        'print_credit',
        'debit_form_type',
        'credit_form_type',
        'special_invoice_debit_form_type',
        'special_invoice_credit_form_type',
        'debit_print_currency',
        'credit_print_currency',
        'aggregated_print_debit',
        'aggregated_print_credit',
        'differing_voucher_recipient_debit',
        'differing_voucher_recipient_credit',
        'incoming_debit',
        'incoming_credit',
        'creditor_account_number',
        'debitor_account_number',
        'creditor_account',
        'debitor_account',
        'debit_booking',
        'credit_booking',
        'group',
        'created_on',
        'created_by',
        'changed_on',
        'changed_by',
        'business',
        'code',
        'terms_of_payment',
        'limit_debit',
        'no_dunning',
        'print_schedule',
        'mprint',
        'ledger_account',
        'reminder',
        'bank_code',
        'bank_account_number',
        'international_bank_account_number',
        'swift_code',
        'bank_name',
        'print_co_2_emissions',
        'average_emissions',
        'fuel_type',
        'av_consumption',
        'object_id',
        'is_new',
        'original_hash_snapshot',
        'original_snapshot',
        'current_snapshot',
        'meta_info',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 customer_short=APIHelper.SKIP,
                 name_1=APIHelper.SKIP,
                 name_2=APIHelper.SKIP,
                 name_3=APIHelper.SKIP,
                 street=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 zip_code=APIHelper.SKIP,
                 city_code=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 city_district=APIHelper.SKIP,
                 i_loc_nr=APIHelper.SKIP,
                 phone=APIHelper.SKIP,
                 vehicle_phone=APIHelper.SKIP,
                 fax=APIHelper.SKIP,
                 administrator=APIHelper.SKIP,
                 homepage=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 end_customer=APIHelper.SKIP,
                 ust_id=APIHelper.SKIP,
                 tax_id=APIHelper.SKIP,
                 l_st_name_1=APIHelper.SKIP,
                 l_st_name_2=APIHelper.SKIP,
                 l_st_name_3=APIHelper.SKIP,
                 lst_street=APIHelper.SKIP,
                 lst_country_code=APIHelper.SKIP,
                 lst_zip_code=APIHelper.SKIP,
                 lst_country_code_zip=APIHelper.SKIP,
                 lst_city=APIHelper.SKIP,
                 lst_city_district=APIHelper.SKIP,
                 account_table=APIHelper.SKIP,
                 cost_center=APIHelper.SKIP,
                 cost_unit=APIHelper.SKIP,
                 sales_tax_code=APIHelper.SKIP,
                 is_invoicing_blocked_for_new_orders=APIHelper.SKIP,
                 blocked_until=APIHelper.SKIP,
                 invoice_division_id=APIHelper.SKIP,
                 invoice_department_id=APIHelper.SKIP,
                 km_methode=APIHelper.SKIP,
                 condition_type=APIHelper.SKIP,
                 credit_condition_type=APIHelper.SKIP,
                 optimization_type=APIHelper.SKIP,
                 credit_optimization_type=APIHelper.SKIP,
                 cargo_insurance=APIHelper.SKIP,
                 gs_customer_insurance=APIHelper.SKIP,
                 general_condition_customer_id=APIHelper.SKIP,
                 general_creditor=APIHelper.SKIP,
                 print_debit=APIHelper.SKIP,
                 print_credit=APIHelper.SKIP,
                 debit_form_type=APIHelper.SKIP,
                 credit_form_type=APIHelper.SKIP,
                 special_invoice_debit_form_type=APIHelper.SKIP,
                 special_invoice_credit_form_type=APIHelper.SKIP,
                 debit_print_currency=APIHelper.SKIP,
                 credit_print_currency=APIHelper.SKIP,
                 aggregated_print_debit=APIHelper.SKIP,
                 aggregated_print_credit=APIHelper.SKIP,
                 differing_voucher_recipient_debit=APIHelper.SKIP,
                 differing_voucher_recipient_credit=APIHelper.SKIP,
                 incoming_debit=APIHelper.SKIP,
                 incoming_credit=APIHelper.SKIP,
                 creditor_account_number=APIHelper.SKIP,
                 debitor_account_number=APIHelper.SKIP,
                 creditor_account=APIHelper.SKIP,
                 debitor_account=APIHelper.SKIP,
                 debit_booking=APIHelper.SKIP,
                 credit_booking=APIHelper.SKIP,
                 group=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 business=APIHelper.SKIP,
                 code=APIHelper.SKIP,
                 terms_of_payment=APIHelper.SKIP,
                 limit_debit=APIHelper.SKIP,
                 no_dunning=APIHelper.SKIP,
                 print_schedule=APIHelper.SKIP,
                 mprint=APIHelper.SKIP,
                 ledger_account=APIHelper.SKIP,
                 reminder=APIHelper.SKIP,
                 bank_code=APIHelper.SKIP,
                 bank_account_number=APIHelper.SKIP,
                 international_bank_account_number=APIHelper.SKIP,
                 swift_code=APIHelper.SKIP,
                 bank_name=APIHelper.SKIP,
                 print_co_2_emissions=APIHelper.SKIP,
                 average_emissions=APIHelper.SKIP,
                 fuel_type=APIHelper.SKIP,
                 av_consumption=APIHelper.SKIP,
                 object_id=APIHelper.SKIP,
                 is_new=APIHelper.SKIP,
                 original_hash_snapshot=APIHelper.SKIP,
                 original_snapshot=APIHelper.SKIP,
                 current_snapshot=APIHelper.SKIP,
                 meta_info=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerBaseView class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if customer_short is not APIHelper.SKIP:
            self.customer_short = customer_short 
        if name_1 is not APIHelper.SKIP:
            self.name_1 = name_1 
        if name_2 is not APIHelper.SKIP:
            self.name_2 = name_2 
        if name_3 is not APIHelper.SKIP:
            self.name_3 = name_3 
        if street is not APIHelper.SKIP:
            self.street = street 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if zip_code is not APIHelper.SKIP:
            self.zip_code = zip_code 
        if city_code is not APIHelper.SKIP:
            self.city_code = city_code 
        if city is not APIHelper.SKIP:
            self.city = city 
        if city_district is not APIHelper.SKIP:
            self.city_district = city_district 
        if i_loc_nr is not APIHelper.SKIP:
            self.i_loc_nr = i_loc_nr 
        if phone is not APIHelper.SKIP:
            self.phone = phone 
        if vehicle_phone is not APIHelper.SKIP:
            self.vehicle_phone = vehicle_phone 
        if fax is not APIHelper.SKIP:
            self.fax = fax 
        if administrator is not APIHelper.SKIP:
            self.administrator = administrator 
        if homepage is not APIHelper.SKIP:
            self.homepage = homepage 
        if email is not APIHelper.SKIP:
            self.email = email 
        if end_customer is not APIHelper.SKIP:
            self.end_customer = end_customer 
        if ust_id is not APIHelper.SKIP:
            self.ust_id = ust_id 
        if tax_id is not APIHelper.SKIP:
            self.tax_id = tax_id 
        if l_st_name_1 is not APIHelper.SKIP:
            self.l_st_name_1 = l_st_name_1 
        if l_st_name_2 is not APIHelper.SKIP:
            self.l_st_name_2 = l_st_name_2 
        if l_st_name_3 is not APIHelper.SKIP:
            self.l_st_name_3 = l_st_name_3 
        if lst_street is not APIHelper.SKIP:
            self.lst_street = lst_street 
        if lst_country_code is not APIHelper.SKIP:
            self.lst_country_code = lst_country_code 
        if lst_zip_code is not APIHelper.SKIP:
            self.lst_zip_code = lst_zip_code 
        if lst_country_code_zip is not APIHelper.SKIP:
            self.lst_country_code_zip = lst_country_code_zip 
        if lst_city is not APIHelper.SKIP:
            self.lst_city = lst_city 
        if lst_city_district is not APIHelper.SKIP:
            self.lst_city_district = lst_city_district 
        if account_table is not APIHelper.SKIP:
            self.account_table = account_table 
        if cost_center is not APIHelper.SKIP:
            self.cost_center = cost_center 
        if cost_unit is not APIHelper.SKIP:
            self.cost_unit = cost_unit 
        if sales_tax_code is not APIHelper.SKIP:
            self.sales_tax_code = sales_tax_code 
        if is_invoicing_blocked_for_new_orders is not APIHelper.SKIP:
            self.is_invoicing_blocked_for_new_orders = is_invoicing_blocked_for_new_orders 
        if blocked_until is not APIHelper.SKIP:
            self.blocked_until = APIHelper.RFC3339DateTime(blocked_until) if blocked_until else None 
        if invoice_division_id is not APIHelper.SKIP:
            self.invoice_division_id = invoice_division_id 
        if invoice_department_id is not APIHelper.SKIP:
            self.invoice_department_id = invoice_department_id 
        if km_methode is not APIHelper.SKIP:
            self.km_methode = km_methode 
        if condition_type is not APIHelper.SKIP:
            self.condition_type = condition_type 
        if credit_condition_type is not APIHelper.SKIP:
            self.credit_condition_type = credit_condition_type 
        if optimization_type is not APIHelper.SKIP:
            self.optimization_type = optimization_type 
        if credit_optimization_type is not APIHelper.SKIP:
            self.credit_optimization_type = credit_optimization_type 
        if cargo_insurance is not APIHelper.SKIP:
            self.cargo_insurance = cargo_insurance 
        if gs_customer_insurance is not APIHelper.SKIP:
            self.gs_customer_insurance = gs_customer_insurance 
        if general_condition_customer_id is not APIHelper.SKIP:
            self.general_condition_customer_id = general_condition_customer_id 
        if general_creditor is not APIHelper.SKIP:
            self.general_creditor = general_creditor 
        if print_debit is not APIHelper.SKIP:
            self.print_debit = print_debit 
        if print_credit is not APIHelper.SKIP:
            self.print_credit = print_credit 
        if debit_form_type is not APIHelper.SKIP:
            self.debit_form_type = debit_form_type 
        if credit_form_type is not APIHelper.SKIP:
            self.credit_form_type = credit_form_type 
        if special_invoice_debit_form_type is not APIHelper.SKIP:
            self.special_invoice_debit_form_type = special_invoice_debit_form_type 
        if special_invoice_credit_form_type is not APIHelper.SKIP:
            self.special_invoice_credit_form_type = special_invoice_credit_form_type 
        if debit_print_currency is not APIHelper.SKIP:
            self.debit_print_currency = debit_print_currency 
        if credit_print_currency is not APIHelper.SKIP:
            self.credit_print_currency = credit_print_currency 
        if aggregated_print_debit is not APIHelper.SKIP:
            self.aggregated_print_debit = aggregated_print_debit 
        if aggregated_print_credit is not APIHelper.SKIP:
            self.aggregated_print_credit = aggregated_print_credit 
        if differing_voucher_recipient_debit is not APIHelper.SKIP:
            self.differing_voucher_recipient_debit = differing_voucher_recipient_debit 
        if differing_voucher_recipient_credit is not APIHelper.SKIP:
            self.differing_voucher_recipient_credit = differing_voucher_recipient_credit 
        if incoming_debit is not APIHelper.SKIP:
            self.incoming_debit = incoming_debit 
        if incoming_credit is not APIHelper.SKIP:
            self.incoming_credit = incoming_credit 
        if creditor_account_number is not APIHelper.SKIP:
            self.creditor_account_number = creditor_account_number 
        if debitor_account_number is not APIHelper.SKIP:
            self.debitor_account_number = debitor_account_number 
        if creditor_account is not APIHelper.SKIP:
            self.creditor_account = creditor_account 
        if debitor_account is not APIHelper.SKIP:
            self.debitor_account = debitor_account 
        if debit_booking is not APIHelper.SKIP:
            self.debit_booking = debit_booking 
        if credit_booking is not APIHelper.SKIP:
            self.credit_booking = credit_booking 
        if group is not APIHelper.SKIP:
            self.group = group 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if business is not APIHelper.SKIP:
            self.business = business 
        if code is not APIHelper.SKIP:
            self.code = code 
        if terms_of_payment is not APIHelper.SKIP:
            self.terms_of_payment = terms_of_payment 
        if limit_debit is not APIHelper.SKIP:
            self.limit_debit = limit_debit 
        if no_dunning is not APIHelper.SKIP:
            self.no_dunning = no_dunning 
        if print_schedule is not APIHelper.SKIP:
            self.print_schedule = print_schedule 
        if mprint is not APIHelper.SKIP:
            self.mprint = mprint 
        if ledger_account is not APIHelper.SKIP:
            self.ledger_account = ledger_account 
        if reminder is not APIHelper.SKIP:
            self.reminder = reminder 
        if bank_code is not APIHelper.SKIP:
            self.bank_code = bank_code 
        if bank_account_number is not APIHelper.SKIP:
            self.bank_account_number = bank_account_number 
        if international_bank_account_number is not APIHelper.SKIP:
            self.international_bank_account_number = international_bank_account_number 
        if swift_code is not APIHelper.SKIP:
            self.swift_code = swift_code 
        if bank_name is not APIHelper.SKIP:
            self.bank_name = bank_name 
        if print_co_2_emissions is not APIHelper.SKIP:
            self.print_co_2_emissions = print_co_2_emissions 
        if average_emissions is not APIHelper.SKIP:
            self.average_emissions = average_emissions 
        if fuel_type is not APIHelper.SKIP:
            self.fuel_type = fuel_type 
        if av_consumption is not APIHelper.SKIP:
            self.av_consumption = av_consumption 
        if object_id is not APIHelper.SKIP:
            self.object_id = object_id 
        if is_new is not APIHelper.SKIP:
            self.is_new = is_new 
        if original_hash_snapshot is not APIHelper.SKIP:
            self.original_hash_snapshot = original_hash_snapshot 
        if original_snapshot is not APIHelper.SKIP:
            self.original_snapshot = original_snapshot 
        if current_snapshot is not APIHelper.SKIP:
            self.current_snapshot = current_snapshot 
        if meta_info is not APIHelper.SKIP:
            self.meta_info = meta_info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        customer_short = dictionary.get("customerShort") if dictionary.get("customerShort") else APIHelper.SKIP
        name_1 = dictionary.get("name1") if dictionary.get("name1") else APIHelper.SKIP
        name_2 = dictionary.get("name2") if dictionary.get("name2") else APIHelper.SKIP
        name_3 = dictionary.get("name3") if dictionary.get("name3") else APIHelper.SKIP
        street = dictionary.get("street") if dictionary.get("street") else APIHelper.SKIP
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else APIHelper.SKIP
        zip_code = dictionary.get("zipCode") if dictionary.get("zipCode") else APIHelper.SKIP
        city_code = dictionary.get("cityCode") if dictionary.get("cityCode") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        city_district = dictionary.get("cityDistrict") if dictionary.get("cityDistrict") else APIHelper.SKIP
        i_loc_nr = dictionary.get("iLocNr") if dictionary.get("iLocNr") else APIHelper.SKIP
        phone = dictionary.get("phone") if dictionary.get("phone") else APIHelper.SKIP
        vehicle_phone = dictionary.get("vehiclePhone") if dictionary.get("vehiclePhone") else APIHelper.SKIP
        fax = dictionary.get("fax") if dictionary.get("fax") else APIHelper.SKIP
        administrator = dictionary.get("administrator") if dictionary.get("administrator") else APIHelper.SKIP
        homepage = dictionary.get("homepage") if dictionary.get("homepage") else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        end_customer = dictionary.get("endCustomer") if dictionary.get("endCustomer") else APIHelper.SKIP
        ust_id = dictionary.get("ustId") if dictionary.get("ustId") else APIHelper.SKIP
        tax_id = dictionary.get("taxId") if dictionary.get("taxId") else APIHelper.SKIP
        l_st_name_1 = dictionary.get("lStName1") if dictionary.get("lStName1") else APIHelper.SKIP
        l_st_name_2 = dictionary.get("lStName2") if dictionary.get("lStName2") else APIHelper.SKIP
        l_st_name_3 = dictionary.get("lStName3") if dictionary.get("lStName3") else APIHelper.SKIP
        lst_street = dictionary.get("lstStreet") if dictionary.get("lstStreet") else APIHelper.SKIP
        lst_country_code = dictionary.get("lstCountryCode") if dictionary.get("lstCountryCode") else APIHelper.SKIP
        lst_zip_code = dictionary.get("lstZipCode") if dictionary.get("lstZipCode") else APIHelper.SKIP
        lst_country_code_zip = dictionary.get("lstCountryCodeZip") if dictionary.get("lstCountryCodeZip") else APIHelper.SKIP
        lst_city = dictionary.get("lstCity") if dictionary.get("lstCity") else APIHelper.SKIP
        lst_city_district = dictionary.get("lstCityDistrict") if dictionary.get("lstCityDistrict") else APIHelper.SKIP
        account_table = dictionary.get("accountTable") if dictionary.get("accountTable") else APIHelper.SKIP
        cost_center = dictionary.get("costCenter") if dictionary.get("costCenter") else APIHelper.SKIP
        cost_unit = dictionary.get("costUnit") if dictionary.get("costUnit") else APIHelper.SKIP
        sales_tax_code = dictionary.get("salesTaxCode") if dictionary.get("salesTaxCode") else APIHelper.SKIP
        is_invoicing_blocked_for_new_orders = dictionary.get("isInvoicingBlockedForNewOrders") if dictionary.get("isInvoicingBlockedForNewOrders") else APIHelper.SKIP
        blocked_until = APIHelper.RFC3339DateTime.from_value(dictionary.get("blockedUntil")).datetime if dictionary.get("blockedUntil") else APIHelper.SKIP
        invoice_division_id = dictionary.get("invoiceDivisionId") if dictionary.get("invoiceDivisionId") else APIHelper.SKIP
        invoice_department_id = dictionary.get("invoiceDepartmentId") if dictionary.get("invoiceDepartmentId") else APIHelper.SKIP
        km_methode = dictionary.get("kmMethode") if dictionary.get("kmMethode") else APIHelper.SKIP
        condition_type = dictionary.get("conditionType") if dictionary.get("conditionType") else APIHelper.SKIP
        credit_condition_type = dictionary.get("creditConditionType") if dictionary.get("creditConditionType") else APIHelper.SKIP
        optimization_type = dictionary.get("optimizationType") if dictionary.get("optimizationType") else APIHelper.SKIP
        credit_optimization_type = dictionary.get("creditOptimizationType") if dictionary.get("creditOptimizationType") else APIHelper.SKIP
        cargo_insurance = dictionary.get("cargoInsurance") if dictionary.get("cargoInsurance") else APIHelper.SKIP
        gs_customer_insurance = dictionary.get("gsCustomerInsurance") if dictionary.get("gsCustomerInsurance") else APIHelper.SKIP
        general_condition_customer_id = dictionary.get("generalConditionCustomerId") if dictionary.get("generalConditionCustomerId") else APIHelper.SKIP
        general_creditor = dictionary.get("generalCreditor") if dictionary.get("generalCreditor") else APIHelper.SKIP
        print_debit = dictionary.get("printDebit") if dictionary.get("printDebit") else APIHelper.SKIP
        print_credit = dictionary.get("printCredit") if dictionary.get("printCredit") else APIHelper.SKIP
        debit_form_type = dictionary.get("debitFormType") if dictionary.get("debitFormType") else APIHelper.SKIP
        credit_form_type = dictionary.get("creditFormType") if dictionary.get("creditFormType") else APIHelper.SKIP
        special_invoice_debit_form_type = dictionary.get("specialInvoiceDebitFormType") if dictionary.get("specialInvoiceDebitFormType") else APIHelper.SKIP
        special_invoice_credit_form_type = dictionary.get("specialInvoiceCreditFormType") if dictionary.get("specialInvoiceCreditFormType") else APIHelper.SKIP
        debit_print_currency = dictionary.get("debitPrintCurrency") if dictionary.get("debitPrintCurrency") else APIHelper.SKIP
        credit_print_currency = dictionary.get("creditPrintCurrency") if dictionary.get("creditPrintCurrency") else APIHelper.SKIP
        aggregated_print_debit = dictionary.get("aggregatedPrintDebit") if dictionary.get("aggregatedPrintDebit") else APIHelper.SKIP
        aggregated_print_credit = dictionary.get("aggregatedPrintCredit") if dictionary.get("aggregatedPrintCredit") else APIHelper.SKIP
        differing_voucher_recipient_debit = dictionary.get("differingVoucherRecipientDebit") if dictionary.get("differingVoucherRecipientDebit") else APIHelper.SKIP
        differing_voucher_recipient_credit = dictionary.get("differingVoucherRecipientCredit") if dictionary.get("differingVoucherRecipientCredit") else APIHelper.SKIP
        incoming_debit = dictionary.get("incomingDebit") if dictionary.get("incomingDebit") else APIHelper.SKIP
        incoming_credit = dictionary.get("incomingCredit") if dictionary.get("incomingCredit") else APIHelper.SKIP
        creditor_account_number = dictionary.get("creditorAccountNumber") if dictionary.get("creditorAccountNumber") else APIHelper.SKIP
        debitor_account_number = dictionary.get("debitorAccountNumber") if dictionary.get("debitorAccountNumber") else APIHelper.SKIP
        creditor_account = dictionary.get("creditorAccount") if dictionary.get("creditorAccount") else APIHelper.SKIP
        debitor_account = dictionary.get("debitorAccount") if dictionary.get("debitorAccount") else APIHelper.SKIP
        debit_booking = dictionary.get("debitBooking") if dictionary.get("debitBooking") else APIHelper.SKIP
        credit_booking = dictionary.get("creditBooking") if dictionary.get("creditBooking") else APIHelper.SKIP
        group = dictionary.get("group") if dictionary.get("group") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        business = dictionary.get("business") if dictionary.get("business") else APIHelper.SKIP
        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        terms_of_payment = dictionary.get("termsOfPayment") if dictionary.get("termsOfPayment") else APIHelper.SKIP
        limit_debit = dictionary.get("limitDebit") if dictionary.get("limitDebit") else APIHelper.SKIP
        no_dunning = dictionary.get("noDunning") if dictionary.get("noDunning") else APIHelper.SKIP
        print_schedule = dictionary.get("printSchedule") if dictionary.get("printSchedule") else APIHelper.SKIP
        mprint = dictionary.get("print") if dictionary.get("print") else APIHelper.SKIP
        ledger_account = dictionary.get("ledgerAccount") if dictionary.get("ledgerAccount") else APIHelper.SKIP
        reminder = dictionary.get("reminder") if dictionary.get("reminder") else APIHelper.SKIP
        bank_code = dictionary.get("bankCode") if dictionary.get("bankCode") else APIHelper.SKIP
        bank_account_number = dictionary.get("bankAccountNumber") if dictionary.get("bankAccountNumber") else APIHelper.SKIP
        international_bank_account_number = dictionary.get("internationalBankAccountNumber") if dictionary.get("internationalBankAccountNumber") else APIHelper.SKIP
        swift_code = dictionary.get("swiftCode") if dictionary.get("swiftCode") else APIHelper.SKIP
        bank_name = dictionary.get("bankName") if dictionary.get("bankName") else APIHelper.SKIP
        print_co_2_emissions = dictionary.get("printCO2Emissions") if dictionary.get("printCO2Emissions") else APIHelper.SKIP
        average_emissions = dictionary.get("averageEmissions") if dictionary.get("averageEmissions") else APIHelper.SKIP
        fuel_type = dictionary.get("fuelType") if dictionary.get("fuelType") else APIHelper.SKIP
        av_consumption = dictionary.get("avConsumption") if dictionary.get("avConsumption") else APIHelper.SKIP
        object_id = dictionary.get("objectId") if dictionary.get("objectId") else APIHelper.SKIP
        is_new = dictionary.get("isNew") if "isNew" in dictionary.keys() else APIHelper.SKIP
        original_hash_snapshot = dictionary.get("originalHashSnapshot") if dictionary.get("originalHashSnapshot") else APIHelper.SKIP
        original_snapshot = dictionary.get("originalSnapshot") if dictionary.get("originalSnapshot") else APIHelper.SKIP
        current_snapshot = dictionary.get("currentSnapshot") if dictionary.get("currentSnapshot") else APIHelper.SKIP
        meta_info = LISMetaInfoCollection.from_dictionary(dictionary.get('metaInfo')) if 'metaInfo' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   customer_short,
                   name_1,
                   name_2,
                   name_3,
                   street,
                   country_code,
                   zip_code,
                   city_code,
                   city,
                   city_district,
                   i_loc_nr,
                   phone,
                   vehicle_phone,
                   fax,
                   administrator,
                   homepage,
                   email,
                   end_customer,
                   ust_id,
                   tax_id,
                   l_st_name_1,
                   l_st_name_2,
                   l_st_name_3,
                   lst_street,
                   lst_country_code,
                   lst_zip_code,
                   lst_country_code_zip,
                   lst_city,
                   lst_city_district,
                   account_table,
                   cost_center,
                   cost_unit,
                   sales_tax_code,
                   is_invoicing_blocked_for_new_orders,
                   blocked_until,
                   invoice_division_id,
                   invoice_department_id,
                   km_methode,
                   condition_type,
                   credit_condition_type,
                   optimization_type,
                   credit_optimization_type,
                   cargo_insurance,
                   gs_customer_insurance,
                   general_condition_customer_id,
                   general_creditor,
                   print_debit,
                   print_credit,
                   debit_form_type,
                   credit_form_type,
                   special_invoice_debit_form_type,
                   special_invoice_credit_form_type,
                   debit_print_currency,
                   credit_print_currency,
                   aggregated_print_debit,
                   aggregated_print_credit,
                   differing_voucher_recipient_debit,
                   differing_voucher_recipient_credit,
                   incoming_debit,
                   incoming_credit,
                   creditor_account_number,
                   debitor_account_number,
                   creditor_account,
                   debitor_account,
                   debit_booking,
                   credit_booking,
                   group,
                   created_on,
                   created_by,
                   changed_on,
                   changed_by,
                   business,
                   code,
                   terms_of_payment,
                   limit_debit,
                   no_dunning,
                   print_schedule,
                   mprint,
                   ledger_account,
                   reminder,
                   bank_code,
                   bank_account_number,
                   international_bank_account_number,
                   swift_code,
                   bank_name,
                   print_co_2_emissions,
                   average_emissions,
                   fuel_type,
                   av_consumption,
                   object_id,
                   is_new,
                   original_hash_snapshot,
                   original_snapshot,
                   current_snapshot,
                   meta_info)
