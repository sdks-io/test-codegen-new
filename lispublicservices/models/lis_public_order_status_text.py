# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_additional_status_text import LISPublicAdditionalStatusText
from lispublicservices.models.lis_public_extended_status_text_field import LISPublicExtendedStatusTextField


class LISPublicOrderStatusText(object):

    """Implementation of the 'LISPublicOrderStatusText' model.

    The LISOrderStatusText data contract.

    Attributes:
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.
        status_id (int): Gets or sets StatusId.
        text (string): Gets or sets Text.
        unloading_report (bool): Gets or sets UnloadingReport.
        manual (bool): Gets or sets Manual.
        automatic (bool): Gets or sets Automatic.
        status_event_id (StatusEventId1Enum): Gets or sets StatusEventId.
        send_message (bool): Gets or sets SendMessage.
        quality (bool): Gets or sets Quality.
        email (string): Gets or sets email.
        note_mandatory (int): Gets or sets NoteMandatory.
        unique (int): Gets or sets Unique.
        state (int): Gets or sets State.
        punctuality_of_delivery (int): Gets or sets PunctualityOfDelivery.
        event_location (int): Gets or sets EventLocation.
        order_information_no (int): Gets or sets OrderInformationNo.
        order_information_text_id (int): Gets or sets OrderInformationTextId.
        status_write_only (string): Gets or sets StatusWriteOnly.
        task_action (string): Gets or sets TaskAction.
        allow_deletion (AllowDeletionEnum): Gets or sets AllowDeletion.
        employee_group_id (string): Gets or sets EmployeeGroupId.
        additional_order_status_texts (list of LISPublicAdditionalStatusText):
            Gets or sets the additional order status texts.
        extended_status_text_fields (list of
            LISPublicExtendedStatusTextField): Gets or sets the additional
            order status texts.
        order_information_activity (OrderInformationActivityEnum): Gets or
            sets OrderInformationActivity.
        web_entry (int): Gets or sets WebEntry.
        raise_alarm (int): Gets or sets RaiseAlarm.
        shipping_unit_status_id (int): Gets or sets ShippingUnitStatusId.
        additional_dossier_status_id (int): Gets or sets the additional
            dossier status identifier.
        next_section (int): Gets or sets NextSection.
        tour_information_no (int): Gets or sets TourInformationNo.
        tour_information_text_id (int): Gets or sets TourInformationTextId.
        tour_information_activity (TourInformationActivityEnum): Gets or sets
            TourInformationActivity.
        status_category_id (string): Gets or sets the status category id.
        macro (string): Gets or sets the macro.
        execute_macro_or_script (bool): Gets or sets the execute macro.
        macro_edi_sequence (MacroEDISequenceEnum): Gets or sets the execute
            macro.
        no_date_time_proposel (bool): Gets or sets a value indicating whether
            [no date time proposel].
        script_id (string): Gets or sets the script identifier.
        trigger_on (TriggerOnEnum): Gets or sets the trigger on.
        service_order_template_id (int): TODO: type description here.
        transportation_unit_status_id (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "status_id": 'statusId',
        "text": 'text',
        "unloading_report": 'unloadingReport',
        "manual": 'manual',
        "automatic": 'automatic',
        "status_event_id": 'statusEventId',
        "send_message": 'sendMessage',
        "quality": 'quality',
        "email": 'email',
        "note_mandatory": 'noteMandatory',
        "unique": 'unique',
        "state": 'state',
        "punctuality_of_delivery": 'punctualityOfDelivery',
        "event_location": 'eventLocation',
        "order_information_no": 'orderInformationNo',
        "order_information_text_id": 'orderInformationTextId',
        "status_write_only": 'statusWriteOnly',
        "task_action": 'taskAction',
        "allow_deletion": 'allowDeletion',
        "employee_group_id": 'employeeGroupId',
        "additional_order_status_texts": 'additionalOrderStatusTexts',
        "extended_status_text_fields": 'extendedStatusTextFields',
        "order_information_activity": 'orderInformationActivity',
        "web_entry": 'webEntry',
        "raise_alarm": 'raiseAlarm',
        "shipping_unit_status_id": 'shippingUnitStatusId',
        "additional_dossier_status_id": 'additionalDossierStatusId',
        "next_section": 'nextSection',
        "tour_information_no": 'tourInformationNo',
        "tour_information_text_id": 'tourInformationTextId',
        "tour_information_activity": 'tourInformationActivity',
        "status_category_id": 'statusCategoryId',
        "macro": 'macro',
        "execute_macro_or_script": 'executeMacroOrScript',
        "macro_edi_sequence": 'macroEDISequence',
        "no_date_time_proposel": 'noDateTimeProposel',
        "script_id": 'scriptId',
        "trigger_on": 'triggerOn',
        "service_order_template_id": 'serviceOrderTemplateId',
        "transportation_unit_status_id": 'transportationUnitStatusId'
    }

    _optionals = [
        'changed_on',
        'changed_by',
        'status_id',
        'text',
        'unloading_report',
        'manual',
        'automatic',
        'status_event_id',
        'send_message',
        'quality',
        'email',
        'note_mandatory',
        'unique',
        'state',
        'punctuality_of_delivery',
        'event_location',
        'order_information_no',
        'order_information_text_id',
        'status_write_only',
        'task_action',
        'allow_deletion',
        'employee_group_id',
        'additional_order_status_texts',
        'extended_status_text_fields',
        'order_information_activity',
        'web_entry',
        'raise_alarm',
        'shipping_unit_status_id',
        'additional_dossier_status_id',
        'next_section',
        'tour_information_no',
        'tour_information_text_id',
        'tour_information_activity',
        'status_category_id',
        'macro',
        'execute_macro_or_script',
        'macro_edi_sequence',
        'no_date_time_proposel',
        'script_id',
        'trigger_on',
        'service_order_template_id',
        'transportation_unit_status_id',
    ]

    def __init__(self,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 status_id=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 unloading_report=APIHelper.SKIP,
                 manual=APIHelper.SKIP,
                 automatic=APIHelper.SKIP,
                 status_event_id=APIHelper.SKIP,
                 send_message=APIHelper.SKIP,
                 quality=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 note_mandatory=APIHelper.SKIP,
                 unique=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 punctuality_of_delivery=APIHelper.SKIP,
                 event_location=APIHelper.SKIP,
                 order_information_no=APIHelper.SKIP,
                 order_information_text_id=APIHelper.SKIP,
                 status_write_only=APIHelper.SKIP,
                 task_action=APIHelper.SKIP,
                 allow_deletion=APIHelper.SKIP,
                 employee_group_id=APIHelper.SKIP,
                 additional_order_status_texts=APIHelper.SKIP,
                 extended_status_text_fields=APIHelper.SKIP,
                 order_information_activity=APIHelper.SKIP,
                 web_entry=APIHelper.SKIP,
                 raise_alarm=APIHelper.SKIP,
                 shipping_unit_status_id=APIHelper.SKIP,
                 additional_dossier_status_id=APIHelper.SKIP,
                 next_section=APIHelper.SKIP,
                 tour_information_no=APIHelper.SKIP,
                 tour_information_text_id=APIHelper.SKIP,
                 tour_information_activity=APIHelper.SKIP,
                 status_category_id=APIHelper.SKIP,
                 macro=APIHelper.SKIP,
                 execute_macro_or_script=APIHelper.SKIP,
                 macro_edi_sequence=APIHelper.SKIP,
                 no_date_time_proposel=APIHelper.SKIP,
                 script_id=APIHelper.SKIP,
                 trigger_on=APIHelper.SKIP,
                 service_order_template_id=APIHelper.SKIP,
                 transportation_unit_status_id=APIHelper.SKIP):
        """Constructor for the LISPublicOrderStatusText class"""

        # Initialize members of the class
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if status_id is not APIHelper.SKIP:
            self.status_id = status_id 
        if text is not APIHelper.SKIP:
            self.text = text 
        if unloading_report is not APIHelper.SKIP:
            self.unloading_report = unloading_report 
        if manual is not APIHelper.SKIP:
            self.manual = manual 
        if automatic is not APIHelper.SKIP:
            self.automatic = automatic 
        if status_event_id is not APIHelper.SKIP:
            self.status_event_id = status_event_id 
        if send_message is not APIHelper.SKIP:
            self.send_message = send_message 
        if quality is not APIHelper.SKIP:
            self.quality = quality 
        if email is not APIHelper.SKIP:
            self.email = email 
        if note_mandatory is not APIHelper.SKIP:
            self.note_mandatory = note_mandatory 
        if unique is not APIHelper.SKIP:
            self.unique = unique 
        if state is not APIHelper.SKIP:
            self.state = state 
        if punctuality_of_delivery is not APIHelper.SKIP:
            self.punctuality_of_delivery = punctuality_of_delivery 
        if event_location is not APIHelper.SKIP:
            self.event_location = event_location 
        if order_information_no is not APIHelper.SKIP:
            self.order_information_no = order_information_no 
        if order_information_text_id is not APIHelper.SKIP:
            self.order_information_text_id = order_information_text_id 
        if status_write_only is not APIHelper.SKIP:
            self.status_write_only = status_write_only 
        if task_action is not APIHelper.SKIP:
            self.task_action = task_action 
        if allow_deletion is not APIHelper.SKIP:
            self.allow_deletion = allow_deletion 
        if employee_group_id is not APIHelper.SKIP:
            self.employee_group_id = employee_group_id 
        if additional_order_status_texts is not APIHelper.SKIP:
            self.additional_order_status_texts = additional_order_status_texts 
        if extended_status_text_fields is not APIHelper.SKIP:
            self.extended_status_text_fields = extended_status_text_fields 
        if order_information_activity is not APIHelper.SKIP:
            self.order_information_activity = order_information_activity 
        if web_entry is not APIHelper.SKIP:
            self.web_entry = web_entry 
        if raise_alarm is not APIHelper.SKIP:
            self.raise_alarm = raise_alarm 
        if shipping_unit_status_id is not APIHelper.SKIP:
            self.shipping_unit_status_id = shipping_unit_status_id 
        if additional_dossier_status_id is not APIHelper.SKIP:
            self.additional_dossier_status_id = additional_dossier_status_id 
        if next_section is not APIHelper.SKIP:
            self.next_section = next_section 
        if tour_information_no is not APIHelper.SKIP:
            self.tour_information_no = tour_information_no 
        if tour_information_text_id is not APIHelper.SKIP:
            self.tour_information_text_id = tour_information_text_id 
        if tour_information_activity is not APIHelper.SKIP:
            self.tour_information_activity = tour_information_activity 
        if status_category_id is not APIHelper.SKIP:
            self.status_category_id = status_category_id 
        if macro is not APIHelper.SKIP:
            self.macro = macro 
        if execute_macro_or_script is not APIHelper.SKIP:
            self.execute_macro_or_script = execute_macro_or_script 
        if macro_edi_sequence is not APIHelper.SKIP:
            self.macro_edi_sequence = macro_edi_sequence 
        if no_date_time_proposel is not APIHelper.SKIP:
            self.no_date_time_proposel = no_date_time_proposel 
        if script_id is not APIHelper.SKIP:
            self.script_id = script_id 
        if trigger_on is not APIHelper.SKIP:
            self.trigger_on = trigger_on 
        if service_order_template_id is not APIHelper.SKIP:
            self.service_order_template_id = service_order_template_id 
        if transportation_unit_status_id is not APIHelper.SKIP:
            self.transportation_unit_status_id = transportation_unit_status_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        status_id = dictionary.get("statusId") if dictionary.get("statusId") else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        unloading_report = dictionary.get("unloadingReport") if "unloadingReport" in dictionary.keys() else APIHelper.SKIP
        manual = dictionary.get("manual") if "manual" in dictionary.keys() else APIHelper.SKIP
        automatic = dictionary.get("automatic") if "automatic" in dictionary.keys() else APIHelper.SKIP
        status_event_id = dictionary.get("statusEventId") if dictionary.get("statusEventId") else APIHelper.SKIP
        send_message = dictionary.get("sendMessage") if "sendMessage" in dictionary.keys() else APIHelper.SKIP
        quality = dictionary.get("quality") if "quality" in dictionary.keys() else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        note_mandatory = dictionary.get("noteMandatory") if dictionary.get("noteMandatory") else APIHelper.SKIP
        unique = dictionary.get("unique") if dictionary.get("unique") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        punctuality_of_delivery = dictionary.get("punctualityOfDelivery") if dictionary.get("punctualityOfDelivery") else APIHelper.SKIP
        event_location = dictionary.get("eventLocation") if dictionary.get("eventLocation") else APIHelper.SKIP
        order_information_no = dictionary.get("orderInformationNo") if dictionary.get("orderInformationNo") else APIHelper.SKIP
        order_information_text_id = dictionary.get("orderInformationTextId") if dictionary.get("orderInformationTextId") else APIHelper.SKIP
        status_write_only = dictionary.get("statusWriteOnly") if dictionary.get("statusWriteOnly") else APIHelper.SKIP
        task_action = dictionary.get("taskAction") if dictionary.get("taskAction") else APIHelper.SKIP
        allow_deletion = dictionary.get("allowDeletion") if dictionary.get("allowDeletion") else APIHelper.SKIP
        employee_group_id = dictionary.get("employeeGroupId") if dictionary.get("employeeGroupId") else APIHelper.SKIP
        additional_order_status_texts = None
        if dictionary.get('additionalOrderStatusTexts') is not None:
            additional_order_status_texts = [LISPublicAdditionalStatusText.from_dictionary(x) for x in dictionary.get('additionalOrderStatusTexts')]
        else:
            additional_order_status_texts = APIHelper.SKIP
        extended_status_text_fields = None
        if dictionary.get('extendedStatusTextFields') is not None:
            extended_status_text_fields = [LISPublicExtendedStatusTextField.from_dictionary(x) for x in dictionary.get('extendedStatusTextFields')]
        else:
            extended_status_text_fields = APIHelper.SKIP
        order_information_activity = dictionary.get("orderInformationActivity") if dictionary.get("orderInformationActivity") else APIHelper.SKIP
        web_entry = dictionary.get("webEntry") if dictionary.get("webEntry") else APIHelper.SKIP
        raise_alarm = dictionary.get("raiseAlarm") if dictionary.get("raiseAlarm") else APIHelper.SKIP
        shipping_unit_status_id = dictionary.get("shippingUnitStatusId") if dictionary.get("shippingUnitStatusId") else APIHelper.SKIP
        additional_dossier_status_id = dictionary.get("additionalDossierStatusId") if dictionary.get("additionalDossierStatusId") else APIHelper.SKIP
        next_section = dictionary.get("nextSection") if dictionary.get("nextSection") else APIHelper.SKIP
        tour_information_no = dictionary.get("tourInformationNo") if dictionary.get("tourInformationNo") else APIHelper.SKIP
        tour_information_text_id = dictionary.get("tourInformationTextId") if dictionary.get("tourInformationTextId") else APIHelper.SKIP
        tour_information_activity = dictionary.get("tourInformationActivity") if dictionary.get("tourInformationActivity") else APIHelper.SKIP
        status_category_id = dictionary.get("statusCategoryId") if dictionary.get("statusCategoryId") else APIHelper.SKIP
        macro = dictionary.get("macro") if dictionary.get("macro") else APIHelper.SKIP
        execute_macro_or_script = dictionary.get("executeMacroOrScript") if "executeMacroOrScript" in dictionary.keys() else APIHelper.SKIP
        macro_edi_sequence = dictionary.get("macroEDISequence") if dictionary.get("macroEDISequence") else APIHelper.SKIP
        no_date_time_proposel = dictionary.get("noDateTimeProposel") if "noDateTimeProposel" in dictionary.keys() else APIHelper.SKIP
        script_id = dictionary.get("scriptId") if dictionary.get("scriptId") else APIHelper.SKIP
        trigger_on = dictionary.get("triggerOn") if dictionary.get("triggerOn") else APIHelper.SKIP
        service_order_template_id = dictionary.get("serviceOrderTemplateId") if dictionary.get("serviceOrderTemplateId") else APIHelper.SKIP
        transportation_unit_status_id = dictionary.get("transportationUnitStatusId") if dictionary.get("transportationUnitStatusId") else APIHelper.SKIP
        # Return an object of this model
        return cls(changed_on,
                   changed_by,
                   status_id,
                   text,
                   unloading_report,
                   manual,
                   automatic,
                   status_event_id,
                   send_message,
                   quality,
                   email,
                   note_mandatory,
                   unique,
                   state,
                   punctuality_of_delivery,
                   event_location,
                   order_information_no,
                   order_information_text_id,
                   status_write_only,
                   task_action,
                   allow_deletion,
                   employee_group_id,
                   additional_order_status_texts,
                   extended_status_text_fields,
                   order_information_activity,
                   web_entry,
                   raise_alarm,
                   shipping_unit_status_id,
                   additional_dossier_status_id,
                   next_section,
                   tour_information_no,
                   tour_information_text_id,
                   tour_information_activity,
                   status_category_id,
                   macro,
                   execute_macro_or_script,
                   macro_edi_sequence,
                   no_date_time_proposel,
                   script_id,
                   trigger_on,
                   service_order_template_id,
                   transportation_unit_status_id)
