# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_customer_account_number import LISCustomerAccountNumber


class LISPublicCustomerAccountingScope(object):

    """Implementation of the 'LISPublicCustomerAccountingScope' model.

    The LISCustomerAccountingScope data contract.

    Attributes:
        account_table_id (int): Gets or sets AccountTableId.
        cost_unit_id (int): Gets or sets PayerId.
        cost_center (int): Gets or sets CostCenter.
        final_consumer (bool): Gets or sets FinalConsumer.
        tax_id_number (string): Gets or sets TaxIdNumber.
        tax_number (string): Gets or sets TaxNumber.
        debitor_account (string): Gets or sets DebitorAccount.
        creditor_account (string): Gets or sets CreditorAccount.
        debit_booking (DebitBookingEnum): Gets or sets DebitBooking.
        credit_booking (CreditBookingEnum): Gets or sets CreditBooking.
        terms_of_payment (int): Gets or sets TermsOfPayment.
        is_simple_term_of_payment (bool): Gets or sets a value indicating
            whether this instance is simple term of payment.
        search_procedure (SearchProcedureEnum): Gets or sets SearchProcedure.
        sales_tax_number (string): Gets or sets SalesTaxNumber.
        no_dunning (bool): Gets or sets NoDunning.
        bank_code (string): Gets or sets BankCode.
        bank_name (string): Gets or sets the name of the bank.
        bank_account_number (string): Gets or sets BankAccountNumber.
        international_bank_account_number (string): Gets or sets
            InternationalBankAccountNumber.
        swift_code (string): Gets or sets SwiftCode.
        retain_amount (float): Gets or sets the retain amount.
        limit_debit (int): Gets or sets the credit limit.
        invoice_sum_debit (int): Gets or sets the invoice sum.
        voucher_sum_debit (int): Gets or sets the voucher sum.
        limit_credit (int): Gets or sets the credit limit.
        invoice_sum_credit (int): Gets or sets the invoice sum.
        voucher_sum_credit (int): Gets or sets the voucher sum.
        open_items_factor_debit (float): Gets or sets the open items factor
            debit.
        open_items_factor_credit (float): Gets or sets the open items factor
            credit.
        creditor_sequence_account_no (int): Gets or sets the creditor sequence
            account no.
        debitor_sequence_account_no (int): Gets or sets the debitor sequence
            account no.
        bank_city (string): Gets or sets the bank city.
        bank_country_code (string): Gets or sets the bank country code.
        minimum_wage_certificate_valid_till (datetime): Gets or sets the
            debitor sequence account no.
        secu_sped_whitelist_id (int): Gets or sets the secu sped whitelist
            identifier.
        is_secu_sped_whitelisted (bool): Gets or sets a value indicating
            whether this instance is secu sped whitelisted.
        debitor_account_numbers (list of LISCustomerAccountNumber): Gets or
            sets the debitor account numbers.
        creditor_account_numbers (list of LISCustomerAccountNumber): Gets or
            sets the creditor account numbers.
        rating (string): Gets or sets the rating.
        rating_limit (string): Gets or sets the rating limit.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_table_id": 'accountTableId',
        "cost_unit_id": 'costUnitId',
        "cost_center": 'costCenter',
        "final_consumer": 'finalConsumer',
        "tax_id_number": 'taxIdNumber',
        "tax_number": 'taxNumber',
        "debitor_account": 'debitorAccount',
        "creditor_account": 'creditorAccount',
        "debit_booking": 'debitBooking',
        "credit_booking": 'creditBooking',
        "terms_of_payment": 'termsOfPayment',
        "is_simple_term_of_payment": 'isSimpleTermOfPayment',
        "search_procedure": 'searchProcedure',
        "sales_tax_number": 'salesTaxNumber',
        "no_dunning": 'noDunning',
        "bank_code": 'bankCode',
        "bank_name": 'bankName',
        "bank_account_number": 'bankAccountNumber',
        "international_bank_account_number": 'internationalBankAccountNumber',
        "swift_code": 'swiftCode',
        "retain_amount": 'retainAmount',
        "limit_debit": 'limitDebit',
        "invoice_sum_debit": 'invoiceSumDebit',
        "voucher_sum_debit": 'voucherSumDebit',
        "limit_credit": 'limitCredit',
        "invoice_sum_credit": 'invoiceSumCredit',
        "voucher_sum_credit": 'voucherSumCredit',
        "open_items_factor_debit": 'openItemsFactorDebit',
        "open_items_factor_credit": 'openItemsFactorCredit',
        "creditor_sequence_account_no": 'creditorSequenceAccountNo',
        "debitor_sequence_account_no": 'debitorSequenceAccountNo',
        "bank_city": 'bankCity',
        "bank_country_code": 'bankCountryCode',
        "minimum_wage_certificate_valid_till": 'minimumWageCertificateValidTill',
        "secu_sped_whitelist_id": 'secuSpedWhitelistId',
        "is_secu_sped_whitelisted": 'isSecuSpedWhitelisted',
        "debitor_account_numbers": 'debitorAccountNumbers',
        "creditor_account_numbers": 'creditorAccountNumbers',
        "rating": 'rating',
        "rating_limit": 'ratingLimit'
    }

    _optionals = [
        'account_table_id',
        'cost_unit_id',
        'cost_center',
        'final_consumer',
        'tax_id_number',
        'tax_number',
        'debitor_account',
        'creditor_account',
        'debit_booking',
        'credit_booking',
        'terms_of_payment',
        'is_simple_term_of_payment',
        'search_procedure',
        'sales_tax_number',
        'no_dunning',
        'bank_code',
        'bank_name',
        'bank_account_number',
        'international_bank_account_number',
        'swift_code',
        'retain_amount',
        'limit_debit',
        'invoice_sum_debit',
        'voucher_sum_debit',
        'limit_credit',
        'invoice_sum_credit',
        'voucher_sum_credit',
        'open_items_factor_debit',
        'open_items_factor_credit',
        'creditor_sequence_account_no',
        'debitor_sequence_account_no',
        'bank_city',
        'bank_country_code',
        'minimum_wage_certificate_valid_till',
        'secu_sped_whitelist_id',
        'is_secu_sped_whitelisted',
        'debitor_account_numbers',
        'creditor_account_numbers',
        'rating',
        'rating_limit',
    ]

    def __init__(self,
                 account_table_id=APIHelper.SKIP,
                 cost_unit_id=APIHelper.SKIP,
                 cost_center=APIHelper.SKIP,
                 final_consumer=APIHelper.SKIP,
                 tax_id_number=APIHelper.SKIP,
                 tax_number=APIHelper.SKIP,
                 debitor_account=APIHelper.SKIP,
                 creditor_account=APIHelper.SKIP,
                 debit_booking=APIHelper.SKIP,
                 credit_booking=APIHelper.SKIP,
                 terms_of_payment=APIHelper.SKIP,
                 is_simple_term_of_payment=APIHelper.SKIP,
                 search_procedure=APIHelper.SKIP,
                 sales_tax_number=APIHelper.SKIP,
                 no_dunning=APIHelper.SKIP,
                 bank_code=APIHelper.SKIP,
                 bank_name=APIHelper.SKIP,
                 bank_account_number=APIHelper.SKIP,
                 international_bank_account_number=APIHelper.SKIP,
                 swift_code=APIHelper.SKIP,
                 retain_amount=APIHelper.SKIP,
                 limit_debit=APIHelper.SKIP,
                 invoice_sum_debit=APIHelper.SKIP,
                 voucher_sum_debit=APIHelper.SKIP,
                 limit_credit=APIHelper.SKIP,
                 invoice_sum_credit=APIHelper.SKIP,
                 voucher_sum_credit=APIHelper.SKIP,
                 open_items_factor_debit=APIHelper.SKIP,
                 open_items_factor_credit=APIHelper.SKIP,
                 creditor_sequence_account_no=APIHelper.SKIP,
                 debitor_sequence_account_no=APIHelper.SKIP,
                 bank_city=APIHelper.SKIP,
                 bank_country_code=APIHelper.SKIP,
                 minimum_wage_certificate_valid_till=APIHelper.SKIP,
                 secu_sped_whitelist_id=APIHelper.SKIP,
                 is_secu_sped_whitelisted=APIHelper.SKIP,
                 debitor_account_numbers=APIHelper.SKIP,
                 creditor_account_numbers=APIHelper.SKIP,
                 rating=APIHelper.SKIP,
                 rating_limit=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerAccountingScope class"""

        # Initialize members of the class
        if account_table_id is not APIHelper.SKIP:
            self.account_table_id = account_table_id 
        if cost_unit_id is not APIHelper.SKIP:
            self.cost_unit_id = cost_unit_id 
        if cost_center is not APIHelper.SKIP:
            self.cost_center = cost_center 
        if final_consumer is not APIHelper.SKIP:
            self.final_consumer = final_consumer 
        if tax_id_number is not APIHelper.SKIP:
            self.tax_id_number = tax_id_number 
        if tax_number is not APIHelper.SKIP:
            self.tax_number = tax_number 
        if debitor_account is not APIHelper.SKIP:
            self.debitor_account = debitor_account 
        if creditor_account is not APIHelper.SKIP:
            self.creditor_account = creditor_account 
        if debit_booking is not APIHelper.SKIP:
            self.debit_booking = debit_booking 
        if credit_booking is not APIHelper.SKIP:
            self.credit_booking = credit_booking 
        if terms_of_payment is not APIHelper.SKIP:
            self.terms_of_payment = terms_of_payment 
        if is_simple_term_of_payment is not APIHelper.SKIP:
            self.is_simple_term_of_payment = is_simple_term_of_payment 
        if search_procedure is not APIHelper.SKIP:
            self.search_procedure = search_procedure 
        if sales_tax_number is not APIHelper.SKIP:
            self.sales_tax_number = sales_tax_number 
        if no_dunning is not APIHelper.SKIP:
            self.no_dunning = no_dunning 
        if bank_code is not APIHelper.SKIP:
            self.bank_code = bank_code 
        if bank_name is not APIHelper.SKIP:
            self.bank_name = bank_name 
        if bank_account_number is not APIHelper.SKIP:
            self.bank_account_number = bank_account_number 
        if international_bank_account_number is not APIHelper.SKIP:
            self.international_bank_account_number = international_bank_account_number 
        if swift_code is not APIHelper.SKIP:
            self.swift_code = swift_code 
        if retain_amount is not APIHelper.SKIP:
            self.retain_amount = retain_amount 
        if limit_debit is not APIHelper.SKIP:
            self.limit_debit = limit_debit 
        if invoice_sum_debit is not APIHelper.SKIP:
            self.invoice_sum_debit = invoice_sum_debit 
        if voucher_sum_debit is not APIHelper.SKIP:
            self.voucher_sum_debit = voucher_sum_debit 
        if limit_credit is not APIHelper.SKIP:
            self.limit_credit = limit_credit 
        if invoice_sum_credit is not APIHelper.SKIP:
            self.invoice_sum_credit = invoice_sum_credit 
        if voucher_sum_credit is not APIHelper.SKIP:
            self.voucher_sum_credit = voucher_sum_credit 
        if open_items_factor_debit is not APIHelper.SKIP:
            self.open_items_factor_debit = open_items_factor_debit 
        if open_items_factor_credit is not APIHelper.SKIP:
            self.open_items_factor_credit = open_items_factor_credit 
        if creditor_sequence_account_no is not APIHelper.SKIP:
            self.creditor_sequence_account_no = creditor_sequence_account_no 
        if debitor_sequence_account_no is not APIHelper.SKIP:
            self.debitor_sequence_account_no = debitor_sequence_account_no 
        if bank_city is not APIHelper.SKIP:
            self.bank_city = bank_city 
        if bank_country_code is not APIHelper.SKIP:
            self.bank_country_code = bank_country_code 
        if minimum_wage_certificate_valid_till is not APIHelper.SKIP:
            self.minimum_wage_certificate_valid_till = APIHelper.RFC3339DateTime(minimum_wage_certificate_valid_till) if minimum_wage_certificate_valid_till else None 
        if secu_sped_whitelist_id is not APIHelper.SKIP:
            self.secu_sped_whitelist_id = secu_sped_whitelist_id 
        if is_secu_sped_whitelisted is not APIHelper.SKIP:
            self.is_secu_sped_whitelisted = is_secu_sped_whitelisted 
        if debitor_account_numbers is not APIHelper.SKIP:
            self.debitor_account_numbers = debitor_account_numbers 
        if creditor_account_numbers is not APIHelper.SKIP:
            self.creditor_account_numbers = creditor_account_numbers 
        if rating is not APIHelper.SKIP:
            self.rating = rating 
        if rating_limit is not APIHelper.SKIP:
            self.rating_limit = rating_limit 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        account_table_id = dictionary.get("accountTableId") if dictionary.get("accountTableId") else APIHelper.SKIP
        cost_unit_id = dictionary.get("costUnitId") if dictionary.get("costUnitId") else APIHelper.SKIP
        cost_center = dictionary.get("costCenter") if dictionary.get("costCenter") else APIHelper.SKIP
        final_consumer = dictionary.get("finalConsumer") if "finalConsumer" in dictionary.keys() else APIHelper.SKIP
        tax_id_number = dictionary.get("taxIdNumber") if dictionary.get("taxIdNumber") else APIHelper.SKIP
        tax_number = dictionary.get("taxNumber") if dictionary.get("taxNumber") else APIHelper.SKIP
        debitor_account = dictionary.get("debitorAccount") if dictionary.get("debitorAccount") else APIHelper.SKIP
        creditor_account = dictionary.get("creditorAccount") if dictionary.get("creditorAccount") else APIHelper.SKIP
        debit_booking = dictionary.get("debitBooking") if dictionary.get("debitBooking") else APIHelper.SKIP
        credit_booking = dictionary.get("creditBooking") if dictionary.get("creditBooking") else APIHelper.SKIP
        terms_of_payment = dictionary.get("termsOfPayment") if dictionary.get("termsOfPayment") else APIHelper.SKIP
        is_simple_term_of_payment = dictionary.get("isSimpleTermOfPayment") if "isSimpleTermOfPayment" in dictionary.keys() else APIHelper.SKIP
        search_procedure = dictionary.get("searchProcedure") if dictionary.get("searchProcedure") else APIHelper.SKIP
        sales_tax_number = dictionary.get("salesTaxNumber") if dictionary.get("salesTaxNumber") else APIHelper.SKIP
        no_dunning = dictionary.get("noDunning") if "noDunning" in dictionary.keys() else APIHelper.SKIP
        bank_code = dictionary.get("bankCode") if dictionary.get("bankCode") else APIHelper.SKIP
        bank_name = dictionary.get("bankName") if dictionary.get("bankName") else APIHelper.SKIP
        bank_account_number = dictionary.get("bankAccountNumber") if dictionary.get("bankAccountNumber") else APIHelper.SKIP
        international_bank_account_number = dictionary.get("internationalBankAccountNumber") if dictionary.get("internationalBankAccountNumber") else APIHelper.SKIP
        swift_code = dictionary.get("swiftCode") if dictionary.get("swiftCode") else APIHelper.SKIP
        retain_amount = dictionary.get("retainAmount") if dictionary.get("retainAmount") else APIHelper.SKIP
        limit_debit = dictionary.get("limitDebit") if dictionary.get("limitDebit") else APIHelper.SKIP
        invoice_sum_debit = dictionary.get("invoiceSumDebit") if dictionary.get("invoiceSumDebit") else APIHelper.SKIP
        voucher_sum_debit = dictionary.get("voucherSumDebit") if dictionary.get("voucherSumDebit") else APIHelper.SKIP
        limit_credit = dictionary.get("limitCredit") if dictionary.get("limitCredit") else APIHelper.SKIP
        invoice_sum_credit = dictionary.get("invoiceSumCredit") if dictionary.get("invoiceSumCredit") else APIHelper.SKIP
        voucher_sum_credit = dictionary.get("voucherSumCredit") if dictionary.get("voucherSumCredit") else APIHelper.SKIP
        open_items_factor_debit = dictionary.get("openItemsFactorDebit") if dictionary.get("openItemsFactorDebit") else APIHelper.SKIP
        open_items_factor_credit = dictionary.get("openItemsFactorCredit") if dictionary.get("openItemsFactorCredit") else APIHelper.SKIP
        creditor_sequence_account_no = dictionary.get("creditorSequenceAccountNo") if dictionary.get("creditorSequenceAccountNo") else APIHelper.SKIP
        debitor_sequence_account_no = dictionary.get("debitorSequenceAccountNo") if dictionary.get("debitorSequenceAccountNo") else APIHelper.SKIP
        bank_city = dictionary.get("bankCity") if dictionary.get("bankCity") else APIHelper.SKIP
        bank_country_code = dictionary.get("bankCountryCode") if dictionary.get("bankCountryCode") else APIHelper.SKIP
        minimum_wage_certificate_valid_till = APIHelper.RFC3339DateTime.from_value(dictionary.get("minimumWageCertificateValidTill")).datetime if dictionary.get("minimumWageCertificateValidTill") else APIHelper.SKIP
        secu_sped_whitelist_id = dictionary.get("secuSpedWhitelistId") if dictionary.get("secuSpedWhitelistId") else APIHelper.SKIP
        is_secu_sped_whitelisted = dictionary.get("isSecuSpedWhitelisted") if "isSecuSpedWhitelisted" in dictionary.keys() else APIHelper.SKIP
        debitor_account_numbers = None
        if dictionary.get('debitorAccountNumbers') is not None:
            debitor_account_numbers = [LISCustomerAccountNumber.from_dictionary(x) for x in dictionary.get('debitorAccountNumbers')]
        else:
            debitor_account_numbers = APIHelper.SKIP
        creditor_account_numbers = None
        if dictionary.get('creditorAccountNumbers') is not None:
            creditor_account_numbers = [LISCustomerAccountNumber.from_dictionary(x) for x in dictionary.get('creditorAccountNumbers')]
        else:
            creditor_account_numbers = APIHelper.SKIP
        rating = dictionary.get("rating") if dictionary.get("rating") else APIHelper.SKIP
        rating_limit = dictionary.get("ratingLimit") if dictionary.get("ratingLimit") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_table_id,
                   cost_unit_id,
                   cost_center,
                   final_consumer,
                   tax_id_number,
                   tax_number,
                   debitor_account,
                   creditor_account,
                   debit_booking,
                   credit_booking,
                   terms_of_payment,
                   is_simple_term_of_payment,
                   search_procedure,
                   sales_tax_number,
                   no_dunning,
                   bank_code,
                   bank_name,
                   bank_account_number,
                   international_bank_account_number,
                   swift_code,
                   retain_amount,
                   limit_debit,
                   invoice_sum_debit,
                   voucher_sum_debit,
                   limit_credit,
                   invoice_sum_credit,
                   voucher_sum_credit,
                   open_items_factor_debit,
                   open_items_factor_credit,
                   creditor_sequence_account_no,
                   debitor_sequence_account_no,
                   bank_city,
                   bank_country_code,
                   minimum_wage_certificate_valid_till,
                   secu_sped_whitelist_id,
                   is_secu_sped_whitelisted,
                   debitor_account_numbers,
                   creditor_account_numbers,
                   rating,
                   rating_limit)
