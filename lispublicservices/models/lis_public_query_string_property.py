# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicQueryStringProperty(object):

    """Implementation of the 'LISPublicQueryStringProperty' model.

    The QueryString property for query requests

    Attributes:
        property_name (string): TODO: type description here.
        property_value (string): Gets or sets the key item value from.
        operator (OperatorEnum): Gets or sets the key item value from.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "property_name": 'propertyName',
        "property_value": 'propertyValue',
        "operator": 'operator'
    }

    _optionals = [
        'property_name',
        'property_value',
        'operator',
    ]

    def __init__(self,
                 property_name=APIHelper.SKIP,
                 property_value=APIHelper.SKIP,
                 operator=APIHelper.SKIP):
        """Constructor for the LISPublicQueryStringProperty class"""

        # Initialize members of the class
        if property_name is not APIHelper.SKIP:
            self.property_name = property_name 
        if property_value is not APIHelper.SKIP:
            self.property_value = property_value 
        if operator is not APIHelper.SKIP:
            self.operator = operator 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        property_name = dictionary.get("propertyName") if dictionary.get("propertyName") else APIHelper.SKIP
        property_value = dictionary.get("propertyValue") if dictionary.get("propertyValue") else APIHelper.SKIP
        operator = dictionary.get("operator") if dictionary.get("operator") else APIHelper.SKIP
        # Return an object of this model
        return cls(property_name,
                   property_value,
                   operator)
