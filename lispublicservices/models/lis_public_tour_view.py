# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicTourView(object):

    """Implementation of the 'LISPublicTourView' model.

    Represents an entity class. This class depends on the database table
    #*V__Tour

    Attributes:
        cash_payment (string): Gets or sets the CashPayment property. This
            property depends on the database field Bar.
        is_credit_invoiced (int): Gets or sets the IsCreditInvoiced property.
            This property depends on the database field FakGs.
        is_invoice_invoiced (int): Gets or sets the IsInvoiceInvoiced
            property. This property depends on the database field FakRe.
        tour_id (int): Gets or sets the TourId property. This property depends
            on the database field TourIntNr.
        tour_no (int): Gets or sets the TourNo property. This property depends
            on the database field TourNr.
        company (int): Gets or sets the Company property. This property
            depends on the database field Firma.
        net_load (int): Gets or sets the NL property. This property depends on
            the database field NL.
        division (int): Gets or sets the Division property. This property
            depends on the database field Abt.
        invoice_credit_identifier (string): Gets or sets the
            InvoiceCreditIdentifier property. This property depends on the
            database field TourDK.
        changed_on (datetime): Gets or sets the ChangedOn property. This
            property depends on the database field AendDat.
        changed_by (string): Gets or sets the ChangedBy property. This
            property depends on the database field AendUs.
        carrier_id (int): Gets or sets the CarrierId property. This property
            depends on the database field FFNr.
        carrier_condition_type (CarrierConditionType1Enum): Gets or sets the
            CarrierConditionType property. This property depends on the
            database field FFKond.
        carrier_optimization_type (CarrierOptimizationTypeEnum): Gets or sets
            the CarrierOptimizationType property. This property depends on the
            database field FFOptKz.
        carrier_optimization_no (int): Gets or sets the CarrierOptimizationNo
            property. This property depends on the database field FFOptNr.
        carrier_main_carriage_type (CarrierMainCarriageTypeEnum): Gets or sets
            the CarrierMainCarriageType property. This property depends on the
            database field FFHLKz.
        carrier_sales_tax_code (string): Gets or sets the CarrierSalesTaxCode
            property. This property depends on the database field FFUC.
        tour_date_from (datetime): Gets or sets the DateFrom property. This
            property depends on the database field TourDatum.
        lorry_id (string): Gets or sets the LorryId property. This property
            depends on the database field KfzZugID.
        trailer_id (string): Gets or sets the TrailerId property. This
            property depends on the database field KfzAnhID.
        vehile_group (string): Gets or sets the VehileGroup property. This
            property depends on the database field KfzZugGrp.
        swap_body_id_1 (string): Gets or sets the SwapBodyId1 property. This
            property depends on the database field WBruecke1.
        swap_body_id_2 (string): Gets or sets the WBruecke2 property. This
            property depends on the database field WBruecke2.
        driver_id (int): Gets or sets the DriverId property. This property
            depends on the database field FahID.
        co_driver_id (int): Gets or sets the CoDriverId property. This
            property depends on the database field BFahID.
        weight (float): Gets or sets the Weight property. This property
            depends on the database field TatsGew.
        chargeable_weight (float): Gets or sets the ChargeableWeight property.
            This property depends on the database field FpflGew.
        packages (int): Gets or sets the Packages property. This property
            depends on the database field ColliAnz.
        pallets (int): Gets or sets the Pallets property. This property
            depends on the database field PalAnz.
        orders (int): Gets or sets the Orders property. This property depends
            on the database field AnzAuftr.
        storage_places (int): Gets or sets the StoragePlaces property. This
            property depends on the database field SPAnz.
        dispatch_branch_office (int): Gets or sets the DispatchBranchOffice
            property. This property depends on the database field AbgNL.
        state (int): Gets or sets the State property. This property depends on
            the database field Status.
        proceeds (float): Gets or sets the Proceeds property. This property
            depends on the database field Erloes.
        charges (float): Gets or sets the Charges property. This property
            depends on the database field Kosten.
        permit_id (string): Gets or sets the PermitId property. This property
            depends on the database field Gen.
        is_locked (string): Gets or sets the IsLocked property. This property
            depends on the database field fLocked.
        locked_by (string): Gets or sets the LockedBy property. This property
            depends on the database field LockUs.
        is_cargo_manifest_printed (string): Gets or sets the
            IsCargoManifestPrinted property. This property depends on the
            database field DruBord.
        is_cartage_note_printed (string): Gets or sets the
            IsCartageNotePrinted property. This property depends on the
            database field DruRollk.
        is_pallet_note_printed (string): Gets or sets the IsPalletNotePrinted
            property. This property depends on the database field DruPal.
        is_invoice_printed (int): Gets or sets the IsInvoicePrinted property.
            This property depends on the database field DruRe.
        is_credit_note_printed (int): Gets or sets the IsCreditNotePrinted
            property. This property depends on the database field DruGs.
        consignees (int): Gets or sets the Consignees property. This property
            depends on the database field AnzEmp.
        division_id (int): Gets or sets the DivisionId property. This property
            depends on the database field HAbtID.
        declared_value (float): Gets or sets the DeclaredValue property. This
            property depends on the database field Warenwert.
        main_carriage_country_code (string): Gets or sets the
            MainCarriageCountryCode property. This property depends on the
            database field HLLKZ.
        main_carriage_sequence (int): Gets or sets the MainCarriageSequence
            property. This property depends on the database field HLLfdNr.
        main_carriage_weight (float): Gets or sets the MainCarriageWeight
            property. This property depends on the database field HLGew.
        pieces (int): Gets or sets the Pieces property. This property depends
            on the database field MEAnz.
        cubic_decimeter (float): Gets or sets the CubicDecimeter property.
            This property depends on the database field CDMAnz.
        loading_meter (float): Gets or sets the LoadingMeter property. This
            property depends on the database field LMAnz.
        square_meter (float): Gets or sets the SquareMeter property. This
            property depends on the database field QMAnz.
        disposition_text (string): Gets or sets the DispositionText property.
            This property depends on the database field TxtDispo.
        remark_1 (string): Gets or sets the Remark1 property. This property
            depends on the database field TxtBemerk1.
        remark_2 (string): Gets or sets the Remark2 property. This property
            depends on the database field TxtBemerk2.
        tourd_delibery_date (datetime): Gets or sets the DateTill property.
            This property depends on the database field TourEntDat.
        tour_kind (int): Gets or sets the TourKind property. This property
            depends on the database field TourArt.
        dangerous_goods (string): Gets or sets the TourGefahr property. This
            property depends on the database field TourGefahr.
        reefer_cargo (string): Gets or sets the TourKuehl property. This
            property depends on the database field TourKuehl.
        start_time (datetime): Gets or sets the TimeFrom property. This
            property depends on the database field TourZeit.
        delivery_end_date (datetime): Gets or sets the EntBisDat property.
            This property depends on the database field EntBisDat.
        delivery_end_time (datetime): Gets or sets the TimeTill property. This
            property depends on the database field EntBisZeit.
        is_loading_list_printed (string): Gets or sets the
            IsLoadingListPrinted property. This property depends on the
            database field DruLadeL.
        tour_sections (int): Gets or sets the TourSections property. This
            property depends on the database field AnzDis.
        first_loading_order_id (int): Gets or sets the FirstLoadingOrderId
            property. This property depends on the database field BAufIntNr.
        last_unloading_order_id (int): Gets or sets the LastUnloadingOrderId
            property. This property depends on the database field EAufIntNr.
        loading_customer_id (int): Gets or sets the LoadingCustomerId
            property. This property depends on the database field BelNr.
        loading_country_code (string): Gets or sets the LoadingCountryCode
            property. This property depends on the database field BelLKZ.
        loading_locality_id (int): Gets or sets the LoadingLocalityId
            property. This property depends on the database field BelID.
        loading_zip (string): Gets or sets the LoadingZip property. This
            property depends on the database field BelPLZ.
        loading_city (string): Gets or sets the LoadingCity property. This
            property depends on the database field BelOrt.
        consignee_id (int): Gets or sets the ConsigneeId property. This
            property depends on the database field EmpNr.
        unloading_country_code (string): Gets or sets the UnloadingCountryCode
            property. This property depends on the database field EmgLKZ.
        unloading_locality_id (int): Gets or sets the UnloadingLocalityId
            property. This property depends on the database field EmgID.
        unloading_zip (string): Gets or sets the UnloadingZip property. This
            property depends on the database field EmgPLZ.
        unloading_city (string): Gets or sets the UnloadingCity property. This
            property depends on the database field EmgOrt.
        dispatch_information (int): Gets or sets the DispatchInformation
            property. This property depends on the database field DispoInfo4.
        driving_time (int): Gets or sets the DrivingTime property. This
            property depends on the database field Fahrtzeit.
        calculated_charges (float): Gets or sets the CalculatedCharges
            property. This property depends on the database field KalkKosten.
        distance (float): Gets or sets the Distance property. This property
            depends on the database field KMLast.
        distance_toll (float): Gets or sets the DistanceToll property. This
            property depends on the database field KMMaut.
        distance_empty (float): Gets or sets the DistanceEmpty property. This
            property depends on the database field KMLeer.
        distance_toll_empty (float): Gets or sets the DistanceTollEmpty
            property. This property depends on the database field KMLeerMaut.
        proportional_credit_net_amount (float): Gets or sets the
            ProportionalCreditNetAmount property. This property depends on the
            database field GsNettoAnt.
        proportional_calculated_invoice_amount (float): Gets or sets the
            ProportionalCalculatedInvoiceAmount property. This property
            depends on the database field ReKalkAnt.
        tour_description (string): Gets or sets the TourBez property. This
            property depends on the database field TourBez.
        tour_type (TourTypeEnum): Gets or sets the TourAufArt property. This
            property depends on the database field TourAufArt.
        distance_state (DistanceStateEnum): Gets or sets the DistanceState
            property. This property depends on the database field KMStatus.
        are_locations_fixed (string): Gets or sets the AreLocationsFixed
            property. This property depends on the database field OrteFix.
        calender_job_series_group_id (int): Gets or sets the CJSGrpID
            property. This property depends on the database field CJSGrpID.
        packages_sum (float): Gets or sets the ColliAnzSu property. This
            property depends on the database field ColliAnzSu.
        paletts_sum (float): Gets or sets the PalAnzSum property. This
            property depends on the database field PalAnzSum.
        pallett_spaces_count (float): Gets or sets the PallettSpacesCount
            property. This property depends on the database field SpAnzSum.
        pieces_sum (float): Gets or sets the MeAnzSum property. This property
            depends on the database field MeAnzSum.
        shipping_units (float): Gets or sets the ShippingUnits property. This
            property depends on the database field NVEAnzSum.
        data_exchange_state (int): Gets or sets the DataExchangeState
            property. This property depends on the database field DFUStatus.
        data_exchange_state_date (datetime): Gets or sets the
            DataExchangeStateDate property. This property depends on the
            database field DFUStatDat.
        utilised_storage_places (string): Gets or sets the
            UtilisedStoragePlaces property. This property depends on the
            database field ALSPKz.
        utilised_storage_places_percentage (float): Gets or sets the
            UtilisedStoragePlacesPercentage property. This property depends on
            the database field ALSPPrz.
        utilised_load_capacity (string): Gets or sets the UtilisedLoadCapacity
            property. This property depends on the database field ALNLKz.
        utilised_load_capacity_percentage (float): Gets or sets the
            UtilisedLoadCapacityPercentage property. This property depends on
            the database field ALNLPrz.
        department_id (int): Gets or sets the DepartmentId property. This
            property depends on the database field HBerID.
        carrier_maximum_loading_places (float): Gets or sets the
            CarrierMaximumLoadingPlaces property. This property depends on the
            database field FFMaxSP.
        carrier_maximum_weight (float): Gets or sets the CarrierMaximumWeight
            property. This property depends on the database field FFMaxTGew.
        carrier_group_id (string): Gets or sets the CarrierGroupId property.
            This property depends on the database field FFGruppe.
        traffic_mode (string): Gets or sets the TrafficMode property. This
            property depends on the database field VerkArt.
        requested_storage_places (float): Gets or sets the
            RequestedStoragePlaces property. This property depends on the
            database field SpAnzFrei.
        requested_weight (float): Gets or sets the RequestedWeight property.
            This property depends on the database field TatGewFrei.
        internal_cost_allocation_mode (InternalCostAllocationModeEnum): Gets
            or sets the InternalCostAllocationMode property. This property
            depends on the database field ILVModus.
        internal_cost_allocation_state (InternalCostAllocationStateEnum): Gets
            or sets the InternalCostAllocationState property. This property
            depends on the database field ILVZust.
        cancellation_state (CancellationStateEnum): Gets or sets the
            CancellationState property. This property depends on the database
            field DelKz.
        short_telematic_message (string): Gets or sets the
            ShortTelematicMessage property. This property depends on the
            database field TMMsgMC.
        target_weight (float): Gets or sets the TargetWeight property. This
            property depends on the database field SolTGewSum.
        calculated_wheel_time (int): Gets or sets the CalculatedWheelTime
            property. This property depends on the database field CalcLenkZ.
        invoicing_result (int): Gets or sets the InvoicingResult property.
            This property depends on the database field FakResult.
        fencing (int): Gets or sets the Fencing property. This property
            depends on the database field Fencing.
        route_id (int): Gets or sets the RouteId property. This property
            depends on the database field RoutIntNr.
        provider_string (string): Gets or sets the KmMethode property. This
            property depends on the database field KmMethode.
        actual_distance (float): Gets or sets the ActualDistance property.
            This property depends on the database field KMIstLast.
        actual_distance_empty (float): Gets or sets the ActualDistanceEmpty
            property. This property depends on the database field KMIstLeer.
        route_state (RouteStateEnum): Gets or sets the RouteState property.
            This property depends on the database field RouStatus.
        working_days_on_weekdays (float): Gets or sets the
            WorkingDaysOnWeekdays property. This property depends on the
            database field ETWerk.
        working_days_on_holidays (float): Gets or sets the
            WorkingDaysOnHolidays property. This property depends on the
            database field ETFeier.
        requested_loading_meter (float): Gets or sets the
            RequestedLoadingMeter property. This property depends on the
            database field LMAnzFrei.
        planned_by (string): Gets or sets the PlannedBy property. This
            property depends on the database field DispoUS.
        created_on (datetime): Gets or sets the CreatedOn property. This
            property depends on the database field ErstDat.
        created_by (string): Gets or sets the CreatedBy property. This
            property depends on the database field ErstUS.
        position_number (string): Gets or sets the PositionNumber property.
            This property depends on the database field LPosNr.
        locking_history_id (int): Gets or sets the LockingHistoryId property.
            This property depends on the database field TLockHiNr.
        tour_information_1 (int): Gets or sets the TourInformation1 property.
            This property depends on the database field TourInfo1.
        tour_information_2 (int): Gets or sets the TourInformation2 property.
            This property depends on the database field TourInfo2.
        tour_information_3 (int): Gets or sets the TourInformation3 property.
            This property depends on the database field TourInfo3.
        tour_information_4 (int): Gets or sets the TourInformation4 property.
            This property depends on the database field TourInfo4.
        tour_information_5 (int): Gets or sets the TourInformation5 property.
            This property depends on the database field TourInfo5.
        tour_information_6 (int): Gets or sets the TourInformation6 property.
            This property depends on the database field TourInfo6.
        tour_information_7 (int): Gets or sets the TourInformation7 property.
            This property depends on the database field TourInfo7.
        tour_information_8 (int): Gets or sets the TourInformation8 property.
            This property depends on the database field TourInfo8.
        tour_information_9 (int): Gets or sets the TourInformation9 property.
            This property depends on the database field TourInfo9.
        tour_information_10 (int): Gets or sets the TourInformation10
            property. This property depends on the database field TourInfo10.
        pre_order_planning_no (string): Gets or sets the PreOrderPlanningNo
            property. This property depends on the database field VDisNrExt.
        pre_order_planning_id (int): Gets or sets the PreOrderPlanningId
            property. This property depends on the database field VDisIntNr.
        dispatch_stop (int): Gets or sets the DispatchStop property. This
            property depends on the database field AbfStopp.
        security_tag_1 (string): Gets or sets the SecurityTag1 property. This
            property depends on the database field Plombe1.
        security_tag_2 (string): Gets or sets the SecurityTag2 property. This
            property depends on the database field Plombe2.
        lorry_license_plate (string): Gets or sets the LorryLicensePlate
            property. This property depends on the database field KfzPolKz.
        trailer_license_plate (string): Gets or sets the TrailerLicensePlate
            property. This property depends on the database field AnhPolKz.
        lorry_telephone (string): Gets or sets the LorryTelephone property.
            This property depends on the database field KfzTel.
        freight_net_portion (float): Gets or sets the FrachtNettoAnt property.
            This property depends on the database field FrachtNettoAnt.
        terms_of_payment (string): Gets or sets the TermsOfPayment property.
            This property depends on the database field ZahlBed.
        od_workday_trailer (float): Gets or sets the ETWerkAnh property. This
            property depends on the database field ETWerkAnh.
        od_holiday_trailer (float): Gets or sets the ETFeierAnh property. This
            property depends on the database field ETFeierAnh.
        fill_type (FillTypeEnum): Gets or sets the TFuellTyp property. This
            property depends on the database field TFuellTyp.
        additional_date (datetime): Gets or sets the AdditionalDate property.
            This property depends on the database field dtmHilf1.
        dispatch_lock_clearance (int): Gets or sets the AbfFreigabe property.
            This property depends on the database field AbfFreigabe.
        source_area (int): Gets or sets the SourceArea property. This property
            depends on the database field SourceArea.
        time_table_item_id (int): Gets or sets the TimeTableItemId property.
            This property depends on the database field TimeTableItemId.
        calculated_ca_amount (float): Gets or sets the SumAntReLV property.
            This property depends on the database field SumAntReLV.
        time_table_item_type (TimeTableItemTypeEnum): Gets or sets the
            TimeTableItemType property. This property depends on the database
            field TimeTableItemType.
        utc_code (int): Gets or sets the UTCCode property. This property
            depends on the database field UTCCode.
        process_state (ProcessStateEnum): Gets or sets the ProcessState
            property. This property depends on the database field
            ProcessState.
        tour_inf_sym_tour_id (int): Gets or sets the TourInfSymTourIntNr
            property. This property depends on the database field
            TourInfSymTourIntNr.
        t_info_symbol_1 (int): Gets or sets the TInfoSymbol1 property. This
            property depends on the database field TInfoSymbol1.
        t_info_symbol_2 (int): Gets or sets the TInfoSymbol2 property. This
            property depends on the database field TInfoSymbol2.
        t_info_symbol_3 (int): Gets or sets the TInfoSymbol3 property. This
            property depends on the database field TInfoSymbol3.
        t_info_symbol_4 (int): Gets or sets the TInfoSymbol4 property. This
            property depends on the database field TInfoSymbol4.
        t_info_symbol_5 (int): Gets or sets the TInfoSymbol5 property. This
            property depends on the database field TInfoSymbol5.
        t_info_symbol_6 (int): Gets or sets the TInfoSymbol6 property. This
            property depends on the database field TInfoSymbol6.
        t_info_symbol_7 (int): Gets or sets the TInfoSymbol7 property. This
            property depends on the database field TInfoSymbol7.
        t_info_symbol_8 (int): Gets or sets the TInfoSymbol8 property. This
            property depends on the database field TInfoSymbol8.
        t_info_symbol_9 (int): Gets or sets the TInfoSymbol9 property. This
            property depends on the database field TInfoSymbol9.
        t_info_symbol_10 (int): Gets or sets the TInfoSymbol10 property. This
            property depends on the database field TInfoSymbol10.
        t_info_symbol_11 (int): Gets or sets the TInfoSymbol11 property. This
            property depends on the database field TInfoSymbol11.
        t_info_symbol_12 (int): Gets or sets the TInfoSymbol12 property. This
            property depends on the database field TInfoSymbol12.
        t_info_symbol_13 (int): Gets or sets the TInfoSymbol13 property. This
            property depends on the database field TInfoSymbol13.
        t_info_symbol_14 (int): Gets or sets the TInfoSymbol14 property. This
            property depends on the database field TInfoSymbol14.
        t_info_symbol_15 (int): Gets or sets the TInfoSymbol15 property. This
            property depends on the database field TInfoSymbol15.
        t_info_symbol_16 (int): Gets or sets the TInfoSymbol16 property. This
            property depends on the database field TInfoSymbol16.
        t_info_symbol_17 (int): Gets or sets the TInfoSymbol17 property. This
            property depends on the database field TInfoSymbol17.
        t_info_symbol_18 (int): Gets or sets the TInfoSymbol18 property. This
            property depends on the database field TInfoSymbol18.
        t_info_symbol_19 (int): Gets or sets the TInfoSymbol19 property. This
            property depends on the database field TInfoSymbol19.
        t_info_symbol_20 (int): Gets or sets the TInfoSymbol20 property. This
            property depends on the database field TInfoSymbol20.
        t_info_symbol_21 (int): Gets or sets the TInfoSymbol21 property. This
            property depends on the database field TInfoSymbol21.
        t_info_symbol_22 (int): Gets or sets the TInfoSymbol22 property. This
            property depends on the database field TInfoSymbol22.
        t_info_symbol_23 (int): Gets or sets the TInfoSymbol23 property. This
            property depends on the database field TInfoSymbol23.
        t_info_symbol_24 (int): Gets or sets the TInfoSymbol24 property. This
            property depends on the database field TInfoSymbol24.
        t_info_symbol_25 (int): Gets or sets the TInfoSymbol25 property. This
            property depends on the database field TInfoSymbol25.
        t_info_symbol_26 (int): Gets or sets the TInfoSymbol26 property. This
            property depends on the database field TInfoSymbol26.
        t_info_symbol_27 (int): Gets or sets the TInfoSymbol27 property. This
            property depends on the database field TInfoSymbol27.
        t_info_symbol_28 (int): Gets or sets the TInfoSymbol28 property. This
            property depends on the database field TInfoSymbol28.
        t_info_symbol_29 (int): Gets or sets the TInfoSymbol29 property. This
            property depends on the database field TInfoSymbol29.
        t_info_symbol_30 (int): Gets or sets the TInfoSymbol30 property. This
            property depends on the database field TInfoSymbol30.
        t_info_symbol_31 (int): Gets or sets the TInfoSymbol31 property. This
            property depends on the database field TInfoSymbol31.
        t_info_symbol_32 (int): Gets or sets the TInfoSymbol32 property. This
            property depends on the database field TInfoSymbol32.
        t_info_symbol_33 (int): Gets or sets the TInfoSymbol33 property. This
            property depends on the database field TInfoSymbol33.
        t_info_symbol_34 (int): Gets or sets the TInfoSymbol34 property. This
            property depends on the database field TInfoSymbol34.
        t_info_symbol_35 (int): Gets or sets the TInfoSymbol35 property. This
            property depends on the database field TInfoSymbol35.
        t_info_symbol_36 (int): Gets or sets the TInfoSymbol36 property. This
            property depends on the database field TInfoSymbol36.
        t_info_symbol_37 (int): Gets or sets the TInfoSymbol37 property. This
            property depends on the database field TInfoSymbol37.
        t_info_symbol_38 (int): Gets or sets the TInfoSymbol38 property. This
            property depends on the database field TInfoSymbol38.
        t_info_symbol_39 (int): Gets or sets the TInfoSymbol39 property. This
            property depends on the database field TInfoSymbol39.
        t_info_symbol_40 (int): Gets or sets the TInfoSymbol40 property. This
            property depends on the database field TInfoSymbol40.
        t_info_symbol_41 (int): Gets or sets the TInfoSymbol41 property. This
            property depends on the database field TInfoSymbol41.
        t_info_symbol_42 (int): Gets or sets the TInfoSymbol42 property. This
            property depends on the database field TInfoSymbol42.
        t_info_symbol_43 (int): Gets or sets the TInfoSymbol43 property. This
            property depends on the database field TInfoSymbol43.
        t_info_symbol_44 (int): Gets or sets the TInfoSymbol44 property. This
            property depends on the database field TInfoSymbol44.
        t_info_symbol_45 (int): Gets or sets the TInfoSymbol45 property. This
            property depends on the database field TInfoSymbol45.
        t_info_symbol_46 (int): Gets or sets the TInfoSymbol46 property. This
            property depends on the database field TInfoSymbol46.
        t_info_symbol_47 (int): Gets or sets the TInfoSymbol47 property. This
            property depends on the database field TInfoSymbol47.
        t_info_symbol_48 (int): Gets or sets the TInfoSymbol48 property. This
            property depends on the database field TInfoSymbol48.
        t_info_symbol_49 (int): Gets or sets the TInfoSymbol49 property. This
            property depends on the database field TInfoSymbol49.
        t_info_symbol_50 (int): Gets or sets the TInfoSymbol50 property. This
            property depends on the database field TInfoSymbol50.
        t_info_symbol_51 (int): Gets or sets the TInfoSymbol51 property. This
            property depends on the database field TInfoSymbol51.
        t_info_symbol_52 (int): Gets or sets the TInfoSymbol52 property. This
            property depends on the database field TInfoSymbol52.
        t_info_symbol_53 (int): Gets or sets the TInfoSymbol53 property. This
            property depends on the database field TInfoSymbol53.
        t_info_symbol_54 (int): Gets or sets the TInfoSymbol54 property. This
            property depends on the database field TInfoSymbol54.
        t_info_symbol_55 (int): Gets or sets the TInfoSymbol55 property. This
            property depends on the database field TInfoSymbol55.
        t_info_symbol_56 (int): Gets or sets the TInfoSymbol56 property. This
            property depends on the database field TInfoSymbol56.
        t_info_symbol_57 (int): Gets or sets the TInfoSymbol57 property. This
            property depends on the database field TInfoSymbol57.
        t_info_symbol_58 (int): Gets or sets the TInfoSymbol58 property. This
            property depends on the database field TInfoSymbol58.
        t_info_symbol_59 (int): Gets or sets the TInfoSymbol59 property. This
            property depends on the database field TInfoSymbol59.
        t_info_symbol_60 (int): Gets or sets the TInfoSymbol60 property. This
            property depends on the database field TInfoSymbol60.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cash_payment": 'cashPayment',
        "is_credit_invoiced": 'isCreditInvoiced',
        "is_invoice_invoiced": 'isInvoiceInvoiced',
        "tour_id": 'tourId',
        "tour_no": 'tourNo',
        "company": 'company',
        "net_load": 'netLoad',
        "division": 'division',
        "invoice_credit_identifier": 'invoiceCreditIdentifier',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "carrier_id": 'carrierId',
        "carrier_condition_type": 'carrierConditionType',
        "carrier_optimization_type": 'carrierOptimizationType',
        "carrier_optimization_no": 'carrierOptimizationNo',
        "carrier_main_carriage_type": 'carrierMainCarriageType',
        "carrier_sales_tax_code": 'carrierSalesTaxCode',
        "tour_date_from": 'tourDateFrom',
        "lorry_id": 'lorryId',
        "trailer_id": 'trailerId',
        "vehile_group": 'vehileGroup',
        "swap_body_id_1": 'swapBodyId1',
        "swap_body_id_2": 'swapBodyId2',
        "driver_id": 'driverId',
        "co_driver_id": 'coDriverId',
        "weight": 'weight',
        "chargeable_weight": 'chargeableWeight',
        "packages": 'packages',
        "pallets": 'pallets',
        "orders": 'orders',
        "storage_places": 'storagePlaces',
        "dispatch_branch_office": 'dispatchBranchOffice',
        "state": 'state',
        "proceeds": 'proceeds',
        "charges": 'charges',
        "permit_id": 'permitId',
        "is_locked": 'isLocked',
        "locked_by": 'lockedBy',
        "is_cargo_manifest_printed": 'isCargoManifestPrinted',
        "is_cartage_note_printed": 'isCartageNotePrinted',
        "is_pallet_note_printed": 'isPalletNotePrinted',
        "is_invoice_printed": 'isInvoicePrinted',
        "is_credit_note_printed": 'isCreditNotePrinted',
        "consignees": 'consignees',
        "division_id": 'divisionId',
        "declared_value": 'declaredValue',
        "main_carriage_country_code": 'mainCarriageCountryCode',
        "main_carriage_sequence": 'mainCarriageSequence',
        "main_carriage_weight": 'mainCarriageWeight',
        "pieces": 'pieces',
        "cubic_decimeter": 'cubicDecimeter',
        "loading_meter": 'loadingMeter',
        "square_meter": 'squareMeter',
        "disposition_text": 'dispositionText',
        "remark_1": 'remark1',
        "remark_2": 'remark2',
        "tourd_delibery_date": 'tourdDeliberyDate',
        "tour_kind": 'tourKind',
        "dangerous_goods": 'dangerousGoods',
        "reefer_cargo": 'reeferCargo',
        "start_time": 'startTime',
        "delivery_end_date": 'deliveryEndDate',
        "delivery_end_time": 'deliveryEndTime',
        "is_loading_list_printed": 'isLoadingListPrinted',
        "tour_sections": 'tourSections',
        "first_loading_order_id": 'firstLoadingOrderId',
        "last_unloading_order_id": 'lastUnloadingOrderId',
        "loading_customer_id": 'loadingCustomerId',
        "loading_country_code": 'loadingCountryCode',
        "loading_locality_id": 'loadingLocalityId',
        "loading_zip": 'loadingZip',
        "loading_city": 'loadingCity',
        "consignee_id": 'consigneeId',
        "unloading_country_code": 'unloadingCountryCode',
        "unloading_locality_id": 'unloadingLocalityId',
        "unloading_zip": 'unloadingZip',
        "unloading_city": 'unloadingCity',
        "dispatch_information": 'dispatchInformation',
        "driving_time": 'drivingTime',
        "calculated_charges": 'calculatedCharges',
        "distance": 'distance',
        "distance_toll": 'distanceToll',
        "distance_empty": 'distanceEmpty',
        "distance_toll_empty": 'distanceTollEmpty',
        "proportional_credit_net_amount": 'proportionalCreditNetAmount',
        "proportional_calculated_invoice_amount": 'proportionalCalculatedInvoiceAmount',
        "tour_description": 'tourDescription',
        "tour_type": 'tourType',
        "distance_state": 'distanceState',
        "are_locations_fixed": 'areLocationsFixed',
        "calender_job_series_group_id": 'calenderJobSeriesGroupId',
        "packages_sum": 'packagesSum',
        "paletts_sum": 'palettsSum',
        "pallett_spaces_count": 'pallettSpacesCount',
        "pieces_sum": 'piecesSum',
        "shipping_units": 'shippingUnits',
        "data_exchange_state": 'dataExchangeState',
        "data_exchange_state_date": 'dataExchangeStateDate',
        "utilised_storage_places": 'utilisedStoragePlaces',
        "utilised_storage_places_percentage": 'utilisedStoragePlacesPercentage',
        "utilised_load_capacity": 'utilisedLoadCapacity',
        "utilised_load_capacity_percentage": 'utilisedLoadCapacityPercentage',
        "department_id": 'departmentId',
        "carrier_maximum_loading_places": 'carrierMaximumLoadingPlaces',
        "carrier_maximum_weight": 'carrierMaximumWeight',
        "carrier_group_id": 'carrierGroupId',
        "traffic_mode": 'trafficMode',
        "requested_storage_places": 'requestedStoragePlaces',
        "requested_weight": 'requestedWeight',
        "internal_cost_allocation_mode": 'internalCostAllocationMode',
        "internal_cost_allocation_state": 'internalCostAllocationState',
        "cancellation_state": 'cancellationState',
        "short_telematic_message": 'shortTelematicMessage',
        "target_weight": 'targetWeight',
        "calculated_wheel_time": 'calculatedWheelTime',
        "invoicing_result": 'invoicingResult',
        "fencing": 'fencing',
        "route_id": 'routeId',
        "provider_string": 'providerString',
        "actual_distance": 'actualDistance',
        "actual_distance_empty": 'actualDistanceEmpty',
        "route_state": 'routeState',
        "working_days_on_weekdays": 'workingDaysOnWeekdays',
        "working_days_on_holidays": 'workingDaysOnHolidays',
        "requested_loading_meter": 'requestedLoadingMeter',
        "planned_by": 'plannedBy',
        "created_on": 'createdOn',
        "created_by": 'createdBy',
        "position_number": 'positionNumber',
        "locking_history_id": 'lockingHistoryId',
        "tour_information_1": 'tourInformation1',
        "tour_information_2": 'tourInformation2',
        "tour_information_3": 'tourInformation3',
        "tour_information_4": 'tourInformation4',
        "tour_information_5": 'tourInformation5',
        "tour_information_6": 'tourInformation6',
        "tour_information_7": 'tourInformation7',
        "tour_information_8": 'tourInformation8',
        "tour_information_9": 'tourInformation9',
        "tour_information_10": 'tourInformation10',
        "pre_order_planning_no": 'preOrderPlanningNo',
        "pre_order_planning_id": 'preOrderPlanningId',
        "dispatch_stop": 'dispatchStop',
        "security_tag_1": 'securityTag1',
        "security_tag_2": 'securityTag2',
        "lorry_license_plate": 'lorryLicensePlate',
        "trailer_license_plate": 'trailerLicensePlate',
        "lorry_telephone": 'lorryTelephone',
        "freight_net_portion": 'freightNetPortion',
        "terms_of_payment": 'termsOfPayment',
        "od_workday_trailer": 'odWorkdayTrailer',
        "od_holiday_trailer": 'odHolidayTrailer',
        "fill_type": 'fillType',
        "additional_date": 'additionalDate',
        "dispatch_lock_clearance": 'dispatchLockClearance',
        "source_area": 'sourceArea',
        "time_table_item_id": 'timeTableItemId',
        "calculated_ca_amount": 'calculatedCAAmount',
        "time_table_item_type": 'timeTableItemType',
        "utc_code": 'utcCode',
        "process_state": 'processState',
        "tour_inf_sym_tour_id": 'tourInfSymTourId',
        "t_info_symbol_1": 'tInfoSymbol1',
        "t_info_symbol_2": 'tInfoSymbol2',
        "t_info_symbol_3": 'tInfoSymbol3',
        "t_info_symbol_4": 'tInfoSymbol4',
        "t_info_symbol_5": 'tInfoSymbol5',
        "t_info_symbol_6": 'tInfoSymbol6',
        "t_info_symbol_7": 'tInfoSymbol7',
        "t_info_symbol_8": 'tInfoSymbol8',
        "t_info_symbol_9": 'tInfoSymbol9',
        "t_info_symbol_10": 'tInfoSymbol10',
        "t_info_symbol_11": 'tInfoSymbol11',
        "t_info_symbol_12": 'tInfoSymbol12',
        "t_info_symbol_13": 'tInfoSymbol13',
        "t_info_symbol_14": 'tInfoSymbol14',
        "t_info_symbol_15": 'tInfoSymbol15',
        "t_info_symbol_16": 'tInfoSymbol16',
        "t_info_symbol_17": 'tInfoSymbol17',
        "t_info_symbol_18": 'tInfoSymbol18',
        "t_info_symbol_19": 'tInfoSymbol19',
        "t_info_symbol_20": 'tInfoSymbol20',
        "t_info_symbol_21": 'tInfoSymbol21',
        "t_info_symbol_22": 'tInfoSymbol22',
        "t_info_symbol_23": 'tInfoSymbol23',
        "t_info_symbol_24": 'tInfoSymbol24',
        "t_info_symbol_25": 'tInfoSymbol25',
        "t_info_symbol_26": 'tInfoSymbol26',
        "t_info_symbol_27": 'tInfoSymbol27',
        "t_info_symbol_28": 'tInfoSymbol28',
        "t_info_symbol_29": 'tInfoSymbol29',
        "t_info_symbol_30": 'tInfoSymbol30',
        "t_info_symbol_31": 'tInfoSymbol31',
        "t_info_symbol_32": 'tInfoSymbol32',
        "t_info_symbol_33": 'tInfoSymbol33',
        "t_info_symbol_34": 'tInfoSymbol34',
        "t_info_symbol_35": 'tInfoSymbol35',
        "t_info_symbol_36": 'tInfoSymbol36',
        "t_info_symbol_37": 'tInfoSymbol37',
        "t_info_symbol_38": 'tInfoSymbol38',
        "t_info_symbol_39": 'tInfoSymbol39',
        "t_info_symbol_40": 'tInfoSymbol40',
        "t_info_symbol_41": 'tInfoSymbol41',
        "t_info_symbol_42": 'tInfoSymbol42',
        "t_info_symbol_43": 'tInfoSymbol43',
        "t_info_symbol_44": 'tInfoSymbol44',
        "t_info_symbol_45": 'tInfoSymbol45',
        "t_info_symbol_46": 'tInfoSymbol46',
        "t_info_symbol_47": 'tInfoSymbol47',
        "t_info_symbol_48": 'tInfoSymbol48',
        "t_info_symbol_49": 'tInfoSymbol49',
        "t_info_symbol_50": 'tInfoSymbol50',
        "t_info_symbol_51": 'tInfoSymbol51',
        "t_info_symbol_52": 'tInfoSymbol52',
        "t_info_symbol_53": 'tInfoSymbol53',
        "t_info_symbol_54": 'tInfoSymbol54',
        "t_info_symbol_55": 'tInfoSymbol55',
        "t_info_symbol_56": 'tInfoSymbol56',
        "t_info_symbol_57": 'tInfoSymbol57',
        "t_info_symbol_58": 'tInfoSymbol58',
        "t_info_symbol_59": 'tInfoSymbol59',
        "t_info_symbol_60": 'tInfoSymbol60'
    }

    _optionals = [
        'cash_payment',
        'is_credit_invoiced',
        'is_invoice_invoiced',
        'tour_id',
        'tour_no',
        'company',
        'net_load',
        'division',
        'invoice_credit_identifier',
        'changed_on',
        'changed_by',
        'carrier_id',
        'carrier_condition_type',
        'carrier_optimization_type',
        'carrier_optimization_no',
        'carrier_main_carriage_type',
        'carrier_sales_tax_code',
        'tour_date_from',
        'lorry_id',
        'trailer_id',
        'vehile_group',
        'swap_body_id_1',
        'swap_body_id_2',
        'driver_id',
        'co_driver_id',
        'weight',
        'chargeable_weight',
        'packages',
        'pallets',
        'orders',
        'storage_places',
        'dispatch_branch_office',
        'state',
        'proceeds',
        'charges',
        'permit_id',
        'is_locked',
        'locked_by',
        'is_cargo_manifest_printed',
        'is_cartage_note_printed',
        'is_pallet_note_printed',
        'is_invoice_printed',
        'is_credit_note_printed',
        'consignees',
        'division_id',
        'declared_value',
        'main_carriage_country_code',
        'main_carriage_sequence',
        'main_carriage_weight',
        'pieces',
        'cubic_decimeter',
        'loading_meter',
        'square_meter',
        'disposition_text',
        'remark_1',
        'remark_2',
        'tourd_delibery_date',
        'tour_kind',
        'dangerous_goods',
        'reefer_cargo',
        'start_time',
        'delivery_end_date',
        'delivery_end_time',
        'is_loading_list_printed',
        'tour_sections',
        'first_loading_order_id',
        'last_unloading_order_id',
        'loading_customer_id',
        'loading_country_code',
        'loading_locality_id',
        'loading_zip',
        'loading_city',
        'consignee_id',
        'unloading_country_code',
        'unloading_locality_id',
        'unloading_zip',
        'unloading_city',
        'dispatch_information',
        'driving_time',
        'calculated_charges',
        'distance',
        'distance_toll',
        'distance_empty',
        'distance_toll_empty',
        'proportional_credit_net_amount',
        'proportional_calculated_invoice_amount',
        'tour_description',
        'tour_type',
        'distance_state',
        'are_locations_fixed',
        'calender_job_series_group_id',
        'packages_sum',
        'paletts_sum',
        'pallett_spaces_count',
        'pieces_sum',
        'shipping_units',
        'data_exchange_state',
        'data_exchange_state_date',
        'utilised_storage_places',
        'utilised_storage_places_percentage',
        'utilised_load_capacity',
        'utilised_load_capacity_percentage',
        'department_id',
        'carrier_maximum_loading_places',
        'carrier_maximum_weight',
        'carrier_group_id',
        'traffic_mode',
        'requested_storage_places',
        'requested_weight',
        'internal_cost_allocation_mode',
        'internal_cost_allocation_state',
        'cancellation_state',
        'short_telematic_message',
        'target_weight',
        'calculated_wheel_time',
        'invoicing_result',
        'fencing',
        'route_id',
        'provider_string',
        'actual_distance',
        'actual_distance_empty',
        'route_state',
        'working_days_on_weekdays',
        'working_days_on_holidays',
        'requested_loading_meter',
        'planned_by',
        'created_on',
        'created_by',
        'position_number',
        'locking_history_id',
        'tour_information_1',
        'tour_information_2',
        'tour_information_3',
        'tour_information_4',
        'tour_information_5',
        'tour_information_6',
        'tour_information_7',
        'tour_information_8',
        'tour_information_9',
        'tour_information_10',
        'pre_order_planning_no',
        'pre_order_planning_id',
        'dispatch_stop',
        'security_tag_1',
        'security_tag_2',
        'lorry_license_plate',
        'trailer_license_plate',
        'lorry_telephone',
        'freight_net_portion',
        'terms_of_payment',
        'od_workday_trailer',
        'od_holiday_trailer',
        'fill_type',
        'additional_date',
        'dispatch_lock_clearance',
        'source_area',
        'time_table_item_id',
        'calculated_ca_amount',
        'time_table_item_type',
        'utc_code',
        'process_state',
        'tour_inf_sym_tour_id',
        't_info_symbol_1',
        't_info_symbol_2',
        't_info_symbol_3',
        't_info_symbol_4',
        't_info_symbol_5',
        't_info_symbol_6',
        't_info_symbol_7',
        't_info_symbol_8',
        't_info_symbol_9',
        't_info_symbol_10',
        't_info_symbol_11',
        't_info_symbol_12',
        't_info_symbol_13',
        't_info_symbol_14',
        't_info_symbol_15',
        't_info_symbol_16',
        't_info_symbol_17',
        't_info_symbol_18',
        't_info_symbol_19',
        't_info_symbol_20',
        't_info_symbol_21',
        't_info_symbol_22',
        't_info_symbol_23',
        't_info_symbol_24',
        't_info_symbol_25',
        't_info_symbol_26',
        't_info_symbol_27',
        't_info_symbol_28',
        't_info_symbol_29',
        't_info_symbol_30',
        't_info_symbol_31',
        't_info_symbol_32',
        't_info_symbol_33',
        't_info_symbol_34',
        't_info_symbol_35',
        't_info_symbol_36',
        't_info_symbol_37',
        't_info_symbol_38',
        't_info_symbol_39',
        't_info_symbol_40',
        't_info_symbol_41',
        't_info_symbol_42',
        't_info_symbol_43',
        't_info_symbol_44',
        't_info_symbol_45',
        't_info_symbol_46',
        't_info_symbol_47',
        't_info_symbol_48',
        't_info_symbol_49',
        't_info_symbol_50',
        't_info_symbol_51',
        't_info_symbol_52',
        't_info_symbol_53',
        't_info_symbol_54',
        't_info_symbol_55',
        't_info_symbol_56',
        't_info_symbol_57',
        't_info_symbol_58',
        't_info_symbol_59',
        't_info_symbol_60',
    ]

    def __init__(self,
                 cash_payment=APIHelper.SKIP,
                 is_credit_invoiced=APIHelper.SKIP,
                 is_invoice_invoiced=APIHelper.SKIP,
                 tour_id=APIHelper.SKIP,
                 tour_no=APIHelper.SKIP,
                 company=APIHelper.SKIP,
                 net_load=APIHelper.SKIP,
                 division=APIHelper.SKIP,
                 invoice_credit_identifier=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 carrier_id=APIHelper.SKIP,
                 carrier_condition_type=APIHelper.SKIP,
                 carrier_optimization_type=APIHelper.SKIP,
                 carrier_optimization_no=APIHelper.SKIP,
                 carrier_main_carriage_type=APIHelper.SKIP,
                 carrier_sales_tax_code=APIHelper.SKIP,
                 tour_date_from=APIHelper.SKIP,
                 lorry_id=APIHelper.SKIP,
                 trailer_id=APIHelper.SKIP,
                 vehile_group=APIHelper.SKIP,
                 swap_body_id_1=APIHelper.SKIP,
                 swap_body_id_2=APIHelper.SKIP,
                 driver_id=APIHelper.SKIP,
                 co_driver_id=APIHelper.SKIP,
                 weight=APIHelper.SKIP,
                 chargeable_weight=APIHelper.SKIP,
                 packages=APIHelper.SKIP,
                 pallets=APIHelper.SKIP,
                 orders=APIHelper.SKIP,
                 storage_places=APIHelper.SKIP,
                 dispatch_branch_office=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 proceeds=APIHelper.SKIP,
                 charges=APIHelper.SKIP,
                 permit_id=APIHelper.SKIP,
                 is_locked=APIHelper.SKIP,
                 locked_by=APIHelper.SKIP,
                 is_cargo_manifest_printed=APIHelper.SKIP,
                 is_cartage_note_printed=APIHelper.SKIP,
                 is_pallet_note_printed=APIHelper.SKIP,
                 is_invoice_printed=APIHelper.SKIP,
                 is_credit_note_printed=APIHelper.SKIP,
                 consignees=APIHelper.SKIP,
                 division_id=APIHelper.SKIP,
                 declared_value=APIHelper.SKIP,
                 main_carriage_country_code=APIHelper.SKIP,
                 main_carriage_sequence=APIHelper.SKIP,
                 main_carriage_weight=APIHelper.SKIP,
                 pieces=APIHelper.SKIP,
                 cubic_decimeter=APIHelper.SKIP,
                 loading_meter=APIHelper.SKIP,
                 square_meter=APIHelper.SKIP,
                 disposition_text=APIHelper.SKIP,
                 remark_1=APIHelper.SKIP,
                 remark_2=APIHelper.SKIP,
                 tourd_delibery_date=APIHelper.SKIP,
                 tour_kind=APIHelper.SKIP,
                 dangerous_goods=APIHelper.SKIP,
                 reefer_cargo=APIHelper.SKIP,
                 start_time=APIHelper.SKIP,
                 delivery_end_date=APIHelper.SKIP,
                 delivery_end_time=APIHelper.SKIP,
                 is_loading_list_printed=APIHelper.SKIP,
                 tour_sections=APIHelper.SKIP,
                 first_loading_order_id=APIHelper.SKIP,
                 last_unloading_order_id=APIHelper.SKIP,
                 loading_customer_id=APIHelper.SKIP,
                 loading_country_code=APIHelper.SKIP,
                 loading_locality_id=APIHelper.SKIP,
                 loading_zip=APIHelper.SKIP,
                 loading_city=APIHelper.SKIP,
                 consignee_id=APIHelper.SKIP,
                 unloading_country_code=APIHelper.SKIP,
                 unloading_locality_id=APIHelper.SKIP,
                 unloading_zip=APIHelper.SKIP,
                 unloading_city=APIHelper.SKIP,
                 dispatch_information=APIHelper.SKIP,
                 driving_time=APIHelper.SKIP,
                 calculated_charges=APIHelper.SKIP,
                 distance=APIHelper.SKIP,
                 distance_toll=APIHelper.SKIP,
                 distance_empty=APIHelper.SKIP,
                 distance_toll_empty=APIHelper.SKIP,
                 proportional_credit_net_amount=APIHelper.SKIP,
                 proportional_calculated_invoice_amount=APIHelper.SKIP,
                 tour_description=APIHelper.SKIP,
                 tour_type=APIHelper.SKIP,
                 distance_state=APIHelper.SKIP,
                 are_locations_fixed=APIHelper.SKIP,
                 calender_job_series_group_id=APIHelper.SKIP,
                 packages_sum=APIHelper.SKIP,
                 paletts_sum=APIHelper.SKIP,
                 pallett_spaces_count=APIHelper.SKIP,
                 pieces_sum=APIHelper.SKIP,
                 shipping_units=APIHelper.SKIP,
                 data_exchange_state=APIHelper.SKIP,
                 data_exchange_state_date=APIHelper.SKIP,
                 utilised_storage_places=APIHelper.SKIP,
                 utilised_storage_places_percentage=APIHelper.SKIP,
                 utilised_load_capacity=APIHelper.SKIP,
                 utilised_load_capacity_percentage=APIHelper.SKIP,
                 department_id=APIHelper.SKIP,
                 carrier_maximum_loading_places=APIHelper.SKIP,
                 carrier_maximum_weight=APIHelper.SKIP,
                 carrier_group_id=APIHelper.SKIP,
                 traffic_mode=APIHelper.SKIP,
                 requested_storage_places=APIHelper.SKIP,
                 requested_weight=APIHelper.SKIP,
                 internal_cost_allocation_mode=APIHelper.SKIP,
                 internal_cost_allocation_state=APIHelper.SKIP,
                 cancellation_state=APIHelper.SKIP,
                 short_telematic_message=APIHelper.SKIP,
                 target_weight=APIHelper.SKIP,
                 calculated_wheel_time=APIHelper.SKIP,
                 invoicing_result=APIHelper.SKIP,
                 fencing=APIHelper.SKIP,
                 route_id=APIHelper.SKIP,
                 provider_string=APIHelper.SKIP,
                 actual_distance=APIHelper.SKIP,
                 actual_distance_empty=APIHelper.SKIP,
                 route_state=APIHelper.SKIP,
                 working_days_on_weekdays=APIHelper.SKIP,
                 working_days_on_holidays=APIHelper.SKIP,
                 requested_loading_meter=APIHelper.SKIP,
                 planned_by=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 position_number=APIHelper.SKIP,
                 locking_history_id=APIHelper.SKIP,
                 tour_information_1=APIHelper.SKIP,
                 tour_information_2=APIHelper.SKIP,
                 tour_information_3=APIHelper.SKIP,
                 tour_information_4=APIHelper.SKIP,
                 tour_information_5=APIHelper.SKIP,
                 tour_information_6=APIHelper.SKIP,
                 tour_information_7=APIHelper.SKIP,
                 tour_information_8=APIHelper.SKIP,
                 tour_information_9=APIHelper.SKIP,
                 tour_information_10=APIHelper.SKIP,
                 pre_order_planning_no=APIHelper.SKIP,
                 pre_order_planning_id=APIHelper.SKIP,
                 dispatch_stop=APIHelper.SKIP,
                 security_tag_1=APIHelper.SKIP,
                 security_tag_2=APIHelper.SKIP,
                 lorry_license_plate=APIHelper.SKIP,
                 trailer_license_plate=APIHelper.SKIP,
                 lorry_telephone=APIHelper.SKIP,
                 freight_net_portion=APIHelper.SKIP,
                 terms_of_payment=APIHelper.SKIP,
                 od_workday_trailer=APIHelper.SKIP,
                 od_holiday_trailer=APIHelper.SKIP,
                 fill_type=APIHelper.SKIP,
                 additional_date=APIHelper.SKIP,
                 dispatch_lock_clearance=APIHelper.SKIP,
                 source_area=APIHelper.SKIP,
                 time_table_item_id=APIHelper.SKIP,
                 calculated_ca_amount=APIHelper.SKIP,
                 time_table_item_type=APIHelper.SKIP,
                 utc_code=APIHelper.SKIP,
                 process_state=APIHelper.SKIP,
                 tour_inf_sym_tour_id=APIHelper.SKIP,
                 t_info_symbol_1=APIHelper.SKIP,
                 t_info_symbol_2=APIHelper.SKIP,
                 t_info_symbol_3=APIHelper.SKIP,
                 t_info_symbol_4=APIHelper.SKIP,
                 t_info_symbol_5=APIHelper.SKIP,
                 t_info_symbol_6=APIHelper.SKIP,
                 t_info_symbol_7=APIHelper.SKIP,
                 t_info_symbol_8=APIHelper.SKIP,
                 t_info_symbol_9=APIHelper.SKIP,
                 t_info_symbol_10=APIHelper.SKIP,
                 t_info_symbol_11=APIHelper.SKIP,
                 t_info_symbol_12=APIHelper.SKIP,
                 t_info_symbol_13=APIHelper.SKIP,
                 t_info_symbol_14=APIHelper.SKIP,
                 t_info_symbol_15=APIHelper.SKIP,
                 t_info_symbol_16=APIHelper.SKIP,
                 t_info_symbol_17=APIHelper.SKIP,
                 t_info_symbol_18=APIHelper.SKIP,
                 t_info_symbol_19=APIHelper.SKIP,
                 t_info_symbol_20=APIHelper.SKIP,
                 t_info_symbol_21=APIHelper.SKIP,
                 t_info_symbol_22=APIHelper.SKIP,
                 t_info_symbol_23=APIHelper.SKIP,
                 t_info_symbol_24=APIHelper.SKIP,
                 t_info_symbol_25=APIHelper.SKIP,
                 t_info_symbol_26=APIHelper.SKIP,
                 t_info_symbol_27=APIHelper.SKIP,
                 t_info_symbol_28=APIHelper.SKIP,
                 t_info_symbol_29=APIHelper.SKIP,
                 t_info_symbol_30=APIHelper.SKIP,
                 t_info_symbol_31=APIHelper.SKIP,
                 t_info_symbol_32=APIHelper.SKIP,
                 t_info_symbol_33=APIHelper.SKIP,
                 t_info_symbol_34=APIHelper.SKIP,
                 t_info_symbol_35=APIHelper.SKIP,
                 t_info_symbol_36=APIHelper.SKIP,
                 t_info_symbol_37=APIHelper.SKIP,
                 t_info_symbol_38=APIHelper.SKIP,
                 t_info_symbol_39=APIHelper.SKIP,
                 t_info_symbol_40=APIHelper.SKIP,
                 t_info_symbol_41=APIHelper.SKIP,
                 t_info_symbol_42=APIHelper.SKIP,
                 t_info_symbol_43=APIHelper.SKIP,
                 t_info_symbol_44=APIHelper.SKIP,
                 t_info_symbol_45=APIHelper.SKIP,
                 t_info_symbol_46=APIHelper.SKIP,
                 t_info_symbol_47=APIHelper.SKIP,
                 t_info_symbol_48=APIHelper.SKIP,
                 t_info_symbol_49=APIHelper.SKIP,
                 t_info_symbol_50=APIHelper.SKIP,
                 t_info_symbol_51=APIHelper.SKIP,
                 t_info_symbol_52=APIHelper.SKIP,
                 t_info_symbol_53=APIHelper.SKIP,
                 t_info_symbol_54=APIHelper.SKIP,
                 t_info_symbol_55=APIHelper.SKIP,
                 t_info_symbol_56=APIHelper.SKIP,
                 t_info_symbol_57=APIHelper.SKIP,
                 t_info_symbol_58=APIHelper.SKIP,
                 t_info_symbol_59=APIHelper.SKIP,
                 t_info_symbol_60=APIHelper.SKIP):
        """Constructor for the LISPublicTourView class"""

        # Initialize members of the class
        if cash_payment is not APIHelper.SKIP:
            self.cash_payment = cash_payment 
        if is_credit_invoiced is not APIHelper.SKIP:
            self.is_credit_invoiced = is_credit_invoiced 
        if is_invoice_invoiced is not APIHelper.SKIP:
            self.is_invoice_invoiced = is_invoice_invoiced 
        if tour_id is not APIHelper.SKIP:
            self.tour_id = tour_id 
        if tour_no is not APIHelper.SKIP:
            self.tour_no = tour_no 
        if company is not APIHelper.SKIP:
            self.company = company 
        if net_load is not APIHelper.SKIP:
            self.net_load = net_load 
        if division is not APIHelper.SKIP:
            self.division = division 
        if invoice_credit_identifier is not APIHelper.SKIP:
            self.invoice_credit_identifier = invoice_credit_identifier 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if carrier_id is not APIHelper.SKIP:
            self.carrier_id = carrier_id 
        if carrier_condition_type is not APIHelper.SKIP:
            self.carrier_condition_type = carrier_condition_type 
        if carrier_optimization_type is not APIHelper.SKIP:
            self.carrier_optimization_type = carrier_optimization_type 
        if carrier_optimization_no is not APIHelper.SKIP:
            self.carrier_optimization_no = carrier_optimization_no 
        if carrier_main_carriage_type is not APIHelper.SKIP:
            self.carrier_main_carriage_type = carrier_main_carriage_type 
        if carrier_sales_tax_code is not APIHelper.SKIP:
            self.carrier_sales_tax_code = carrier_sales_tax_code 
        if tour_date_from is not APIHelper.SKIP:
            self.tour_date_from = APIHelper.RFC3339DateTime(tour_date_from) if tour_date_from else None 
        if lorry_id is not APIHelper.SKIP:
            self.lorry_id = lorry_id 
        if trailer_id is not APIHelper.SKIP:
            self.trailer_id = trailer_id 
        if vehile_group is not APIHelper.SKIP:
            self.vehile_group = vehile_group 
        if swap_body_id_1 is not APIHelper.SKIP:
            self.swap_body_id_1 = swap_body_id_1 
        if swap_body_id_2 is not APIHelper.SKIP:
            self.swap_body_id_2 = swap_body_id_2 
        if driver_id is not APIHelper.SKIP:
            self.driver_id = driver_id 
        if co_driver_id is not APIHelper.SKIP:
            self.co_driver_id = co_driver_id 
        if weight is not APIHelper.SKIP:
            self.weight = weight 
        if chargeable_weight is not APIHelper.SKIP:
            self.chargeable_weight = chargeable_weight 
        if packages is not APIHelper.SKIP:
            self.packages = packages 
        if pallets is not APIHelper.SKIP:
            self.pallets = pallets 
        if orders is not APIHelper.SKIP:
            self.orders = orders 
        if storage_places is not APIHelper.SKIP:
            self.storage_places = storage_places 
        if dispatch_branch_office is not APIHelper.SKIP:
            self.dispatch_branch_office = dispatch_branch_office 
        if state is not APIHelper.SKIP:
            self.state = state 
        if proceeds is not APIHelper.SKIP:
            self.proceeds = proceeds 
        if charges is not APIHelper.SKIP:
            self.charges = charges 
        if permit_id is not APIHelper.SKIP:
            self.permit_id = permit_id 
        if is_locked is not APIHelper.SKIP:
            self.is_locked = is_locked 
        if locked_by is not APIHelper.SKIP:
            self.locked_by = locked_by 
        if is_cargo_manifest_printed is not APIHelper.SKIP:
            self.is_cargo_manifest_printed = is_cargo_manifest_printed 
        if is_cartage_note_printed is not APIHelper.SKIP:
            self.is_cartage_note_printed = is_cartage_note_printed 
        if is_pallet_note_printed is not APIHelper.SKIP:
            self.is_pallet_note_printed = is_pallet_note_printed 
        if is_invoice_printed is not APIHelper.SKIP:
            self.is_invoice_printed = is_invoice_printed 
        if is_credit_note_printed is not APIHelper.SKIP:
            self.is_credit_note_printed = is_credit_note_printed 
        if consignees is not APIHelper.SKIP:
            self.consignees = consignees 
        if division_id is not APIHelper.SKIP:
            self.division_id = division_id 
        if declared_value is not APIHelper.SKIP:
            self.declared_value = declared_value 
        if main_carriage_country_code is not APIHelper.SKIP:
            self.main_carriage_country_code = main_carriage_country_code 
        if main_carriage_sequence is not APIHelper.SKIP:
            self.main_carriage_sequence = main_carriage_sequence 
        if main_carriage_weight is not APIHelper.SKIP:
            self.main_carriage_weight = main_carriage_weight 
        if pieces is not APIHelper.SKIP:
            self.pieces = pieces 
        if cubic_decimeter is not APIHelper.SKIP:
            self.cubic_decimeter = cubic_decimeter 
        if loading_meter is not APIHelper.SKIP:
            self.loading_meter = loading_meter 
        if square_meter is not APIHelper.SKIP:
            self.square_meter = square_meter 
        if disposition_text is not APIHelper.SKIP:
            self.disposition_text = disposition_text 
        if remark_1 is not APIHelper.SKIP:
            self.remark_1 = remark_1 
        if remark_2 is not APIHelper.SKIP:
            self.remark_2 = remark_2 
        if tourd_delibery_date is not APIHelper.SKIP:
            self.tourd_delibery_date = APIHelper.RFC3339DateTime(tourd_delibery_date) if tourd_delibery_date else None 
        if tour_kind is not APIHelper.SKIP:
            self.tour_kind = tour_kind 
        if dangerous_goods is not APIHelper.SKIP:
            self.dangerous_goods = dangerous_goods 
        if reefer_cargo is not APIHelper.SKIP:
            self.reefer_cargo = reefer_cargo 
        if start_time is not APIHelper.SKIP:
            self.start_time = APIHelper.RFC3339DateTime(start_time) if start_time else None 
        if delivery_end_date is not APIHelper.SKIP:
            self.delivery_end_date = APIHelper.RFC3339DateTime(delivery_end_date) if delivery_end_date else None 
        if delivery_end_time is not APIHelper.SKIP:
            self.delivery_end_time = APIHelper.RFC3339DateTime(delivery_end_time) if delivery_end_time else None 
        if is_loading_list_printed is not APIHelper.SKIP:
            self.is_loading_list_printed = is_loading_list_printed 
        if tour_sections is not APIHelper.SKIP:
            self.tour_sections = tour_sections 
        if first_loading_order_id is not APIHelper.SKIP:
            self.first_loading_order_id = first_loading_order_id 
        if last_unloading_order_id is not APIHelper.SKIP:
            self.last_unloading_order_id = last_unloading_order_id 
        if loading_customer_id is not APIHelper.SKIP:
            self.loading_customer_id = loading_customer_id 
        if loading_country_code is not APIHelper.SKIP:
            self.loading_country_code = loading_country_code 
        if loading_locality_id is not APIHelper.SKIP:
            self.loading_locality_id = loading_locality_id 
        if loading_zip is not APIHelper.SKIP:
            self.loading_zip = loading_zip 
        if loading_city is not APIHelper.SKIP:
            self.loading_city = loading_city 
        if consignee_id is not APIHelper.SKIP:
            self.consignee_id = consignee_id 
        if unloading_country_code is not APIHelper.SKIP:
            self.unloading_country_code = unloading_country_code 
        if unloading_locality_id is not APIHelper.SKIP:
            self.unloading_locality_id = unloading_locality_id 
        if unloading_zip is not APIHelper.SKIP:
            self.unloading_zip = unloading_zip 
        if unloading_city is not APIHelper.SKIP:
            self.unloading_city = unloading_city 
        if dispatch_information is not APIHelper.SKIP:
            self.dispatch_information = dispatch_information 
        if driving_time is not APIHelper.SKIP:
            self.driving_time = driving_time 
        if calculated_charges is not APIHelper.SKIP:
            self.calculated_charges = calculated_charges 
        if distance is not APIHelper.SKIP:
            self.distance = distance 
        if distance_toll is not APIHelper.SKIP:
            self.distance_toll = distance_toll 
        if distance_empty is not APIHelper.SKIP:
            self.distance_empty = distance_empty 
        if distance_toll_empty is not APIHelper.SKIP:
            self.distance_toll_empty = distance_toll_empty 
        if proportional_credit_net_amount is not APIHelper.SKIP:
            self.proportional_credit_net_amount = proportional_credit_net_amount 
        if proportional_calculated_invoice_amount is not APIHelper.SKIP:
            self.proportional_calculated_invoice_amount = proportional_calculated_invoice_amount 
        if tour_description is not APIHelper.SKIP:
            self.tour_description = tour_description 
        if tour_type is not APIHelper.SKIP:
            self.tour_type = tour_type 
        if distance_state is not APIHelper.SKIP:
            self.distance_state = distance_state 
        if are_locations_fixed is not APIHelper.SKIP:
            self.are_locations_fixed = are_locations_fixed 
        if calender_job_series_group_id is not APIHelper.SKIP:
            self.calender_job_series_group_id = calender_job_series_group_id 
        if packages_sum is not APIHelper.SKIP:
            self.packages_sum = packages_sum 
        if paletts_sum is not APIHelper.SKIP:
            self.paletts_sum = paletts_sum 
        if pallett_spaces_count is not APIHelper.SKIP:
            self.pallett_spaces_count = pallett_spaces_count 
        if pieces_sum is not APIHelper.SKIP:
            self.pieces_sum = pieces_sum 
        if shipping_units is not APIHelper.SKIP:
            self.shipping_units = shipping_units 
        if data_exchange_state is not APIHelper.SKIP:
            self.data_exchange_state = data_exchange_state 
        if data_exchange_state_date is not APIHelper.SKIP:
            self.data_exchange_state_date = APIHelper.RFC3339DateTime(data_exchange_state_date) if data_exchange_state_date else None 
        if utilised_storage_places is not APIHelper.SKIP:
            self.utilised_storage_places = utilised_storage_places 
        if utilised_storage_places_percentage is not APIHelper.SKIP:
            self.utilised_storage_places_percentage = utilised_storage_places_percentage 
        if utilised_load_capacity is not APIHelper.SKIP:
            self.utilised_load_capacity = utilised_load_capacity 
        if utilised_load_capacity_percentage is not APIHelper.SKIP:
            self.utilised_load_capacity_percentage = utilised_load_capacity_percentage 
        if department_id is not APIHelper.SKIP:
            self.department_id = department_id 
        if carrier_maximum_loading_places is not APIHelper.SKIP:
            self.carrier_maximum_loading_places = carrier_maximum_loading_places 
        if carrier_maximum_weight is not APIHelper.SKIP:
            self.carrier_maximum_weight = carrier_maximum_weight 
        if carrier_group_id is not APIHelper.SKIP:
            self.carrier_group_id = carrier_group_id 
        if traffic_mode is not APIHelper.SKIP:
            self.traffic_mode = traffic_mode 
        if requested_storage_places is not APIHelper.SKIP:
            self.requested_storage_places = requested_storage_places 
        if requested_weight is not APIHelper.SKIP:
            self.requested_weight = requested_weight 
        if internal_cost_allocation_mode is not APIHelper.SKIP:
            self.internal_cost_allocation_mode = internal_cost_allocation_mode 
        if internal_cost_allocation_state is not APIHelper.SKIP:
            self.internal_cost_allocation_state = internal_cost_allocation_state 
        if cancellation_state is not APIHelper.SKIP:
            self.cancellation_state = cancellation_state 
        if short_telematic_message is not APIHelper.SKIP:
            self.short_telematic_message = short_telematic_message 
        if target_weight is not APIHelper.SKIP:
            self.target_weight = target_weight 
        if calculated_wheel_time is not APIHelper.SKIP:
            self.calculated_wheel_time = calculated_wheel_time 
        if invoicing_result is not APIHelper.SKIP:
            self.invoicing_result = invoicing_result 
        if fencing is not APIHelper.SKIP:
            self.fencing = fencing 
        if route_id is not APIHelper.SKIP:
            self.route_id = route_id 
        if provider_string is not APIHelper.SKIP:
            self.provider_string = provider_string 
        if actual_distance is not APIHelper.SKIP:
            self.actual_distance = actual_distance 
        if actual_distance_empty is not APIHelper.SKIP:
            self.actual_distance_empty = actual_distance_empty 
        if route_state is not APIHelper.SKIP:
            self.route_state = route_state 
        if working_days_on_weekdays is not APIHelper.SKIP:
            self.working_days_on_weekdays = working_days_on_weekdays 
        if working_days_on_holidays is not APIHelper.SKIP:
            self.working_days_on_holidays = working_days_on_holidays 
        if requested_loading_meter is not APIHelper.SKIP:
            self.requested_loading_meter = requested_loading_meter 
        if planned_by is not APIHelper.SKIP:
            self.planned_by = planned_by 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if position_number is not APIHelper.SKIP:
            self.position_number = position_number 
        if locking_history_id is not APIHelper.SKIP:
            self.locking_history_id = locking_history_id 
        if tour_information_1 is not APIHelper.SKIP:
            self.tour_information_1 = tour_information_1 
        if tour_information_2 is not APIHelper.SKIP:
            self.tour_information_2 = tour_information_2 
        if tour_information_3 is not APIHelper.SKIP:
            self.tour_information_3 = tour_information_3 
        if tour_information_4 is not APIHelper.SKIP:
            self.tour_information_4 = tour_information_4 
        if tour_information_5 is not APIHelper.SKIP:
            self.tour_information_5 = tour_information_5 
        if tour_information_6 is not APIHelper.SKIP:
            self.tour_information_6 = tour_information_6 
        if tour_information_7 is not APIHelper.SKIP:
            self.tour_information_7 = tour_information_7 
        if tour_information_8 is not APIHelper.SKIP:
            self.tour_information_8 = tour_information_8 
        if tour_information_9 is not APIHelper.SKIP:
            self.tour_information_9 = tour_information_9 
        if tour_information_10 is not APIHelper.SKIP:
            self.tour_information_10 = tour_information_10 
        if pre_order_planning_no is not APIHelper.SKIP:
            self.pre_order_planning_no = pre_order_planning_no 
        if pre_order_planning_id is not APIHelper.SKIP:
            self.pre_order_planning_id = pre_order_planning_id 
        if dispatch_stop is not APIHelper.SKIP:
            self.dispatch_stop = dispatch_stop 
        if security_tag_1 is not APIHelper.SKIP:
            self.security_tag_1 = security_tag_1 
        if security_tag_2 is not APIHelper.SKIP:
            self.security_tag_2 = security_tag_2 
        if lorry_license_plate is not APIHelper.SKIP:
            self.lorry_license_plate = lorry_license_plate 
        if trailer_license_plate is not APIHelper.SKIP:
            self.trailer_license_plate = trailer_license_plate 
        if lorry_telephone is not APIHelper.SKIP:
            self.lorry_telephone = lorry_telephone 
        if freight_net_portion is not APIHelper.SKIP:
            self.freight_net_portion = freight_net_portion 
        if terms_of_payment is not APIHelper.SKIP:
            self.terms_of_payment = terms_of_payment 
        if od_workday_trailer is not APIHelper.SKIP:
            self.od_workday_trailer = od_workday_trailer 
        if od_holiday_trailer is not APIHelper.SKIP:
            self.od_holiday_trailer = od_holiday_trailer 
        if fill_type is not APIHelper.SKIP:
            self.fill_type = fill_type 
        if additional_date is not APIHelper.SKIP:
            self.additional_date = APIHelper.RFC3339DateTime(additional_date) if additional_date else None 
        if dispatch_lock_clearance is not APIHelper.SKIP:
            self.dispatch_lock_clearance = dispatch_lock_clearance 
        if source_area is not APIHelper.SKIP:
            self.source_area = source_area 
        if time_table_item_id is not APIHelper.SKIP:
            self.time_table_item_id = time_table_item_id 
        if calculated_ca_amount is not APIHelper.SKIP:
            self.calculated_ca_amount = calculated_ca_amount 
        if time_table_item_type is not APIHelper.SKIP:
            self.time_table_item_type = time_table_item_type 
        if utc_code is not APIHelper.SKIP:
            self.utc_code = utc_code 
        if process_state is not APIHelper.SKIP:
            self.process_state = process_state 
        if tour_inf_sym_tour_id is not APIHelper.SKIP:
            self.tour_inf_sym_tour_id = tour_inf_sym_tour_id 
        if t_info_symbol_1 is not APIHelper.SKIP:
            self.t_info_symbol_1 = t_info_symbol_1 
        if t_info_symbol_2 is not APIHelper.SKIP:
            self.t_info_symbol_2 = t_info_symbol_2 
        if t_info_symbol_3 is not APIHelper.SKIP:
            self.t_info_symbol_3 = t_info_symbol_3 
        if t_info_symbol_4 is not APIHelper.SKIP:
            self.t_info_symbol_4 = t_info_symbol_4 
        if t_info_symbol_5 is not APIHelper.SKIP:
            self.t_info_symbol_5 = t_info_symbol_5 
        if t_info_symbol_6 is not APIHelper.SKIP:
            self.t_info_symbol_6 = t_info_symbol_6 
        if t_info_symbol_7 is not APIHelper.SKIP:
            self.t_info_symbol_7 = t_info_symbol_7 
        if t_info_symbol_8 is not APIHelper.SKIP:
            self.t_info_symbol_8 = t_info_symbol_8 
        if t_info_symbol_9 is not APIHelper.SKIP:
            self.t_info_symbol_9 = t_info_symbol_9 
        if t_info_symbol_10 is not APIHelper.SKIP:
            self.t_info_symbol_10 = t_info_symbol_10 
        if t_info_symbol_11 is not APIHelper.SKIP:
            self.t_info_symbol_11 = t_info_symbol_11 
        if t_info_symbol_12 is not APIHelper.SKIP:
            self.t_info_symbol_12 = t_info_symbol_12 
        if t_info_symbol_13 is not APIHelper.SKIP:
            self.t_info_symbol_13 = t_info_symbol_13 
        if t_info_symbol_14 is not APIHelper.SKIP:
            self.t_info_symbol_14 = t_info_symbol_14 
        if t_info_symbol_15 is not APIHelper.SKIP:
            self.t_info_symbol_15 = t_info_symbol_15 
        if t_info_symbol_16 is not APIHelper.SKIP:
            self.t_info_symbol_16 = t_info_symbol_16 
        if t_info_symbol_17 is not APIHelper.SKIP:
            self.t_info_symbol_17 = t_info_symbol_17 
        if t_info_symbol_18 is not APIHelper.SKIP:
            self.t_info_symbol_18 = t_info_symbol_18 
        if t_info_symbol_19 is not APIHelper.SKIP:
            self.t_info_symbol_19 = t_info_symbol_19 
        if t_info_symbol_20 is not APIHelper.SKIP:
            self.t_info_symbol_20 = t_info_symbol_20 
        if t_info_symbol_21 is not APIHelper.SKIP:
            self.t_info_symbol_21 = t_info_symbol_21 
        if t_info_symbol_22 is not APIHelper.SKIP:
            self.t_info_symbol_22 = t_info_symbol_22 
        if t_info_symbol_23 is not APIHelper.SKIP:
            self.t_info_symbol_23 = t_info_symbol_23 
        if t_info_symbol_24 is not APIHelper.SKIP:
            self.t_info_symbol_24 = t_info_symbol_24 
        if t_info_symbol_25 is not APIHelper.SKIP:
            self.t_info_symbol_25 = t_info_symbol_25 
        if t_info_symbol_26 is not APIHelper.SKIP:
            self.t_info_symbol_26 = t_info_symbol_26 
        if t_info_symbol_27 is not APIHelper.SKIP:
            self.t_info_symbol_27 = t_info_symbol_27 
        if t_info_symbol_28 is not APIHelper.SKIP:
            self.t_info_symbol_28 = t_info_symbol_28 
        if t_info_symbol_29 is not APIHelper.SKIP:
            self.t_info_symbol_29 = t_info_symbol_29 
        if t_info_symbol_30 is not APIHelper.SKIP:
            self.t_info_symbol_30 = t_info_symbol_30 
        if t_info_symbol_31 is not APIHelper.SKIP:
            self.t_info_symbol_31 = t_info_symbol_31 
        if t_info_symbol_32 is not APIHelper.SKIP:
            self.t_info_symbol_32 = t_info_symbol_32 
        if t_info_symbol_33 is not APIHelper.SKIP:
            self.t_info_symbol_33 = t_info_symbol_33 
        if t_info_symbol_34 is not APIHelper.SKIP:
            self.t_info_symbol_34 = t_info_symbol_34 
        if t_info_symbol_35 is not APIHelper.SKIP:
            self.t_info_symbol_35 = t_info_symbol_35 
        if t_info_symbol_36 is not APIHelper.SKIP:
            self.t_info_symbol_36 = t_info_symbol_36 
        if t_info_symbol_37 is not APIHelper.SKIP:
            self.t_info_symbol_37 = t_info_symbol_37 
        if t_info_symbol_38 is not APIHelper.SKIP:
            self.t_info_symbol_38 = t_info_symbol_38 
        if t_info_symbol_39 is not APIHelper.SKIP:
            self.t_info_symbol_39 = t_info_symbol_39 
        if t_info_symbol_40 is not APIHelper.SKIP:
            self.t_info_symbol_40 = t_info_symbol_40 
        if t_info_symbol_41 is not APIHelper.SKIP:
            self.t_info_symbol_41 = t_info_symbol_41 
        if t_info_symbol_42 is not APIHelper.SKIP:
            self.t_info_symbol_42 = t_info_symbol_42 
        if t_info_symbol_43 is not APIHelper.SKIP:
            self.t_info_symbol_43 = t_info_symbol_43 
        if t_info_symbol_44 is not APIHelper.SKIP:
            self.t_info_symbol_44 = t_info_symbol_44 
        if t_info_symbol_45 is not APIHelper.SKIP:
            self.t_info_symbol_45 = t_info_symbol_45 
        if t_info_symbol_46 is not APIHelper.SKIP:
            self.t_info_symbol_46 = t_info_symbol_46 
        if t_info_symbol_47 is not APIHelper.SKIP:
            self.t_info_symbol_47 = t_info_symbol_47 
        if t_info_symbol_48 is not APIHelper.SKIP:
            self.t_info_symbol_48 = t_info_symbol_48 
        if t_info_symbol_49 is not APIHelper.SKIP:
            self.t_info_symbol_49 = t_info_symbol_49 
        if t_info_symbol_50 is not APIHelper.SKIP:
            self.t_info_symbol_50 = t_info_symbol_50 
        if t_info_symbol_51 is not APIHelper.SKIP:
            self.t_info_symbol_51 = t_info_symbol_51 
        if t_info_symbol_52 is not APIHelper.SKIP:
            self.t_info_symbol_52 = t_info_symbol_52 
        if t_info_symbol_53 is not APIHelper.SKIP:
            self.t_info_symbol_53 = t_info_symbol_53 
        if t_info_symbol_54 is not APIHelper.SKIP:
            self.t_info_symbol_54 = t_info_symbol_54 
        if t_info_symbol_55 is not APIHelper.SKIP:
            self.t_info_symbol_55 = t_info_symbol_55 
        if t_info_symbol_56 is not APIHelper.SKIP:
            self.t_info_symbol_56 = t_info_symbol_56 
        if t_info_symbol_57 is not APIHelper.SKIP:
            self.t_info_symbol_57 = t_info_symbol_57 
        if t_info_symbol_58 is not APIHelper.SKIP:
            self.t_info_symbol_58 = t_info_symbol_58 
        if t_info_symbol_59 is not APIHelper.SKIP:
            self.t_info_symbol_59 = t_info_symbol_59 
        if t_info_symbol_60 is not APIHelper.SKIP:
            self.t_info_symbol_60 = t_info_symbol_60 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        cash_payment = dictionary.get("cashPayment") if dictionary.get("cashPayment") else APIHelper.SKIP
        is_credit_invoiced = dictionary.get("isCreditInvoiced") if dictionary.get("isCreditInvoiced") else APIHelper.SKIP
        is_invoice_invoiced = dictionary.get("isInvoiceInvoiced") if dictionary.get("isInvoiceInvoiced") else APIHelper.SKIP
        tour_id = dictionary.get("tourId") if dictionary.get("tourId") else APIHelper.SKIP
        tour_no = dictionary.get("tourNo") if dictionary.get("tourNo") else APIHelper.SKIP
        company = dictionary.get("company") if dictionary.get("company") else APIHelper.SKIP
        net_load = dictionary.get("netLoad") if dictionary.get("netLoad") else APIHelper.SKIP
        division = dictionary.get("division") if dictionary.get("division") else APIHelper.SKIP
        invoice_credit_identifier = dictionary.get("invoiceCreditIdentifier") if dictionary.get("invoiceCreditIdentifier") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        carrier_id = dictionary.get("carrierId") if dictionary.get("carrierId") else APIHelper.SKIP
        carrier_condition_type = dictionary.get("carrierConditionType") if dictionary.get("carrierConditionType") else APIHelper.SKIP
        carrier_optimization_type = dictionary.get("carrierOptimizationType") if dictionary.get("carrierOptimizationType") else APIHelper.SKIP
        carrier_optimization_no = dictionary.get("carrierOptimizationNo") if dictionary.get("carrierOptimizationNo") else APIHelper.SKIP
        carrier_main_carriage_type = dictionary.get("carrierMainCarriageType") if dictionary.get("carrierMainCarriageType") else APIHelper.SKIP
        carrier_sales_tax_code = dictionary.get("carrierSalesTaxCode") if dictionary.get("carrierSalesTaxCode") else APIHelper.SKIP
        tour_date_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("tourDateFrom")).datetime if dictionary.get("tourDateFrom") else APIHelper.SKIP
        lorry_id = dictionary.get("lorryId") if dictionary.get("lorryId") else APIHelper.SKIP
        trailer_id = dictionary.get("trailerId") if dictionary.get("trailerId") else APIHelper.SKIP
        vehile_group = dictionary.get("vehileGroup") if dictionary.get("vehileGroup") else APIHelper.SKIP
        swap_body_id_1 = dictionary.get("swapBodyId1") if dictionary.get("swapBodyId1") else APIHelper.SKIP
        swap_body_id_2 = dictionary.get("swapBodyId2") if dictionary.get("swapBodyId2") else APIHelper.SKIP
        driver_id = dictionary.get("driverId") if dictionary.get("driverId") else APIHelper.SKIP
        co_driver_id = dictionary.get("coDriverId") if dictionary.get("coDriverId") else APIHelper.SKIP
        weight = dictionary.get("weight") if dictionary.get("weight") else APIHelper.SKIP
        chargeable_weight = dictionary.get("chargeableWeight") if dictionary.get("chargeableWeight") else APIHelper.SKIP
        packages = dictionary.get("packages") if dictionary.get("packages") else APIHelper.SKIP
        pallets = dictionary.get("pallets") if dictionary.get("pallets") else APIHelper.SKIP
        orders = dictionary.get("orders") if dictionary.get("orders") else APIHelper.SKIP
        storage_places = dictionary.get("storagePlaces") if dictionary.get("storagePlaces") else APIHelper.SKIP
        dispatch_branch_office = dictionary.get("dispatchBranchOffice") if dictionary.get("dispatchBranchOffice") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        proceeds = dictionary.get("proceeds") if dictionary.get("proceeds") else APIHelper.SKIP
        charges = dictionary.get("charges") if dictionary.get("charges") else APIHelper.SKIP
        permit_id = dictionary.get("permitId") if dictionary.get("permitId") else APIHelper.SKIP
        is_locked = dictionary.get("isLocked") if dictionary.get("isLocked") else APIHelper.SKIP
        locked_by = dictionary.get("lockedBy") if dictionary.get("lockedBy") else APIHelper.SKIP
        is_cargo_manifest_printed = dictionary.get("isCargoManifestPrinted") if dictionary.get("isCargoManifestPrinted") else APIHelper.SKIP
        is_cartage_note_printed = dictionary.get("isCartageNotePrinted") if dictionary.get("isCartageNotePrinted") else APIHelper.SKIP
        is_pallet_note_printed = dictionary.get("isPalletNotePrinted") if dictionary.get("isPalletNotePrinted") else APIHelper.SKIP
        is_invoice_printed = dictionary.get("isInvoicePrinted") if dictionary.get("isInvoicePrinted") else APIHelper.SKIP
        is_credit_note_printed = dictionary.get("isCreditNotePrinted") if dictionary.get("isCreditNotePrinted") else APIHelper.SKIP
        consignees = dictionary.get("consignees") if dictionary.get("consignees") else APIHelper.SKIP
        division_id = dictionary.get("divisionId") if dictionary.get("divisionId") else APIHelper.SKIP
        declared_value = dictionary.get("declaredValue") if dictionary.get("declaredValue") else APIHelper.SKIP
        main_carriage_country_code = dictionary.get("mainCarriageCountryCode") if dictionary.get("mainCarriageCountryCode") else APIHelper.SKIP
        main_carriage_sequence = dictionary.get("mainCarriageSequence") if dictionary.get("mainCarriageSequence") else APIHelper.SKIP
        main_carriage_weight = dictionary.get("mainCarriageWeight") if dictionary.get("mainCarriageWeight") else APIHelper.SKIP
        pieces = dictionary.get("pieces") if dictionary.get("pieces") else APIHelper.SKIP
        cubic_decimeter = dictionary.get("cubicDecimeter") if dictionary.get("cubicDecimeter") else APIHelper.SKIP
        loading_meter = dictionary.get("loadingMeter") if dictionary.get("loadingMeter") else APIHelper.SKIP
        square_meter = dictionary.get("squareMeter") if dictionary.get("squareMeter") else APIHelper.SKIP
        disposition_text = dictionary.get("dispositionText") if dictionary.get("dispositionText") else APIHelper.SKIP
        remark_1 = dictionary.get("remark1") if dictionary.get("remark1") else APIHelper.SKIP
        remark_2 = dictionary.get("remark2") if dictionary.get("remark2") else APIHelper.SKIP
        tourd_delibery_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("tourdDeliberyDate")).datetime if dictionary.get("tourdDeliberyDate") else APIHelper.SKIP
        tour_kind = dictionary.get("tourKind") if dictionary.get("tourKind") else APIHelper.SKIP
        dangerous_goods = dictionary.get("dangerousGoods") if dictionary.get("dangerousGoods") else APIHelper.SKIP
        reefer_cargo = dictionary.get("reeferCargo") if dictionary.get("reeferCargo") else APIHelper.SKIP
        start_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("startTime")).datetime if dictionary.get("startTime") else APIHelper.SKIP
        delivery_end_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryEndDate")).datetime if dictionary.get("deliveryEndDate") else APIHelper.SKIP
        delivery_end_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryEndTime")).datetime if dictionary.get("deliveryEndTime") else APIHelper.SKIP
        is_loading_list_printed = dictionary.get("isLoadingListPrinted") if dictionary.get("isLoadingListPrinted") else APIHelper.SKIP
        tour_sections = dictionary.get("tourSections") if dictionary.get("tourSections") else APIHelper.SKIP
        first_loading_order_id = dictionary.get("firstLoadingOrderId") if dictionary.get("firstLoadingOrderId") else APIHelper.SKIP
        last_unloading_order_id = dictionary.get("lastUnloadingOrderId") if dictionary.get("lastUnloadingOrderId") else APIHelper.SKIP
        loading_customer_id = dictionary.get("loadingCustomerId") if dictionary.get("loadingCustomerId") else APIHelper.SKIP
        loading_country_code = dictionary.get("loadingCountryCode") if dictionary.get("loadingCountryCode") else APIHelper.SKIP
        loading_locality_id = dictionary.get("loadingLocalityId") if dictionary.get("loadingLocalityId") else APIHelper.SKIP
        loading_zip = dictionary.get("loadingZip") if dictionary.get("loadingZip") else APIHelper.SKIP
        loading_city = dictionary.get("loadingCity") if dictionary.get("loadingCity") else APIHelper.SKIP
        consignee_id = dictionary.get("consigneeId") if dictionary.get("consigneeId") else APIHelper.SKIP
        unloading_country_code = dictionary.get("unloadingCountryCode") if dictionary.get("unloadingCountryCode") else APIHelper.SKIP
        unloading_locality_id = dictionary.get("unloadingLocalityId") if dictionary.get("unloadingLocalityId") else APIHelper.SKIP
        unloading_zip = dictionary.get("unloadingZip") if dictionary.get("unloadingZip") else APIHelper.SKIP
        unloading_city = dictionary.get("unloadingCity") if dictionary.get("unloadingCity") else APIHelper.SKIP
        dispatch_information = dictionary.get("dispatchInformation") if dictionary.get("dispatchInformation") else APIHelper.SKIP
        driving_time = dictionary.get("drivingTime") if dictionary.get("drivingTime") else APIHelper.SKIP
        calculated_charges = dictionary.get("calculatedCharges") if dictionary.get("calculatedCharges") else APIHelper.SKIP
        distance = dictionary.get("distance") if dictionary.get("distance") else APIHelper.SKIP
        distance_toll = dictionary.get("distanceToll") if dictionary.get("distanceToll") else APIHelper.SKIP
        distance_empty = dictionary.get("distanceEmpty") if dictionary.get("distanceEmpty") else APIHelper.SKIP
        distance_toll_empty = dictionary.get("distanceTollEmpty") if dictionary.get("distanceTollEmpty") else APIHelper.SKIP
        proportional_credit_net_amount = dictionary.get("proportionalCreditNetAmount") if dictionary.get("proportionalCreditNetAmount") else APIHelper.SKIP
        proportional_calculated_invoice_amount = dictionary.get("proportionalCalculatedInvoiceAmount") if dictionary.get("proportionalCalculatedInvoiceAmount") else APIHelper.SKIP
        tour_description = dictionary.get("tourDescription") if dictionary.get("tourDescription") else APIHelper.SKIP
        tour_type = dictionary.get("tourType") if dictionary.get("tourType") else APIHelper.SKIP
        distance_state = dictionary.get("distanceState") if dictionary.get("distanceState") else APIHelper.SKIP
        are_locations_fixed = dictionary.get("areLocationsFixed") if dictionary.get("areLocationsFixed") else APIHelper.SKIP
        calender_job_series_group_id = dictionary.get("calenderJobSeriesGroupId") if dictionary.get("calenderJobSeriesGroupId") else APIHelper.SKIP
        packages_sum = dictionary.get("packagesSum") if dictionary.get("packagesSum") else APIHelper.SKIP
        paletts_sum = dictionary.get("palettsSum") if dictionary.get("palettsSum") else APIHelper.SKIP
        pallett_spaces_count = dictionary.get("pallettSpacesCount") if dictionary.get("pallettSpacesCount") else APIHelper.SKIP
        pieces_sum = dictionary.get("piecesSum") if dictionary.get("piecesSum") else APIHelper.SKIP
        shipping_units = dictionary.get("shippingUnits") if dictionary.get("shippingUnits") else APIHelper.SKIP
        data_exchange_state = dictionary.get("dataExchangeState") if dictionary.get("dataExchangeState") else APIHelper.SKIP
        data_exchange_state_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("dataExchangeStateDate")).datetime if dictionary.get("dataExchangeStateDate") else APIHelper.SKIP
        utilised_storage_places = dictionary.get("utilisedStoragePlaces") if dictionary.get("utilisedStoragePlaces") else APIHelper.SKIP
        utilised_storage_places_percentage = dictionary.get("utilisedStoragePlacesPercentage") if dictionary.get("utilisedStoragePlacesPercentage") else APIHelper.SKIP
        utilised_load_capacity = dictionary.get("utilisedLoadCapacity") if dictionary.get("utilisedLoadCapacity") else APIHelper.SKIP
        utilised_load_capacity_percentage = dictionary.get("utilisedLoadCapacityPercentage") if dictionary.get("utilisedLoadCapacityPercentage") else APIHelper.SKIP
        department_id = dictionary.get("departmentId") if dictionary.get("departmentId") else APIHelper.SKIP
        carrier_maximum_loading_places = dictionary.get("carrierMaximumLoadingPlaces") if dictionary.get("carrierMaximumLoadingPlaces") else APIHelper.SKIP
        carrier_maximum_weight = dictionary.get("carrierMaximumWeight") if dictionary.get("carrierMaximumWeight") else APIHelper.SKIP
        carrier_group_id = dictionary.get("carrierGroupId") if dictionary.get("carrierGroupId") else APIHelper.SKIP
        traffic_mode = dictionary.get("trafficMode") if dictionary.get("trafficMode") else APIHelper.SKIP
        requested_storage_places = dictionary.get("requestedStoragePlaces") if dictionary.get("requestedStoragePlaces") else APIHelper.SKIP
        requested_weight = dictionary.get("requestedWeight") if dictionary.get("requestedWeight") else APIHelper.SKIP
        internal_cost_allocation_mode = dictionary.get("internalCostAllocationMode") if dictionary.get("internalCostAllocationMode") else APIHelper.SKIP
        internal_cost_allocation_state = dictionary.get("internalCostAllocationState") if dictionary.get("internalCostAllocationState") else APIHelper.SKIP
        cancellation_state = dictionary.get("cancellationState") if dictionary.get("cancellationState") else APIHelper.SKIP
        short_telematic_message = dictionary.get("shortTelematicMessage") if dictionary.get("shortTelematicMessage") else APIHelper.SKIP
        target_weight = dictionary.get("targetWeight") if dictionary.get("targetWeight") else APIHelper.SKIP
        calculated_wheel_time = dictionary.get("calculatedWheelTime") if dictionary.get("calculatedWheelTime") else APIHelper.SKIP
        invoicing_result = dictionary.get("invoicingResult") if dictionary.get("invoicingResult") else APIHelper.SKIP
        fencing = dictionary.get("fencing") if dictionary.get("fencing") else APIHelper.SKIP
        route_id = dictionary.get("routeId") if dictionary.get("routeId") else APIHelper.SKIP
        provider_string = dictionary.get("providerString") if dictionary.get("providerString") else APIHelper.SKIP
        actual_distance = dictionary.get("actualDistance") if dictionary.get("actualDistance") else APIHelper.SKIP
        actual_distance_empty = dictionary.get("actualDistanceEmpty") if dictionary.get("actualDistanceEmpty") else APIHelper.SKIP
        route_state = dictionary.get("routeState") if dictionary.get("routeState") else APIHelper.SKIP
        working_days_on_weekdays = dictionary.get("workingDaysOnWeekdays") if dictionary.get("workingDaysOnWeekdays") else APIHelper.SKIP
        working_days_on_holidays = dictionary.get("workingDaysOnHolidays") if dictionary.get("workingDaysOnHolidays") else APIHelper.SKIP
        requested_loading_meter = dictionary.get("requestedLoadingMeter") if dictionary.get("requestedLoadingMeter") else APIHelper.SKIP
        planned_by = dictionary.get("plannedBy") if dictionary.get("plannedBy") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        position_number = dictionary.get("positionNumber") if dictionary.get("positionNumber") else APIHelper.SKIP
        locking_history_id = dictionary.get("lockingHistoryId") if dictionary.get("lockingHistoryId") else APIHelper.SKIP
        tour_information_1 = dictionary.get("tourInformation1") if dictionary.get("tourInformation1") else APIHelper.SKIP
        tour_information_2 = dictionary.get("tourInformation2") if dictionary.get("tourInformation2") else APIHelper.SKIP
        tour_information_3 = dictionary.get("tourInformation3") if dictionary.get("tourInformation3") else APIHelper.SKIP
        tour_information_4 = dictionary.get("tourInformation4") if dictionary.get("tourInformation4") else APIHelper.SKIP
        tour_information_5 = dictionary.get("tourInformation5") if dictionary.get("tourInformation5") else APIHelper.SKIP
        tour_information_6 = dictionary.get("tourInformation6") if dictionary.get("tourInformation6") else APIHelper.SKIP
        tour_information_7 = dictionary.get("tourInformation7") if dictionary.get("tourInformation7") else APIHelper.SKIP
        tour_information_8 = dictionary.get("tourInformation8") if dictionary.get("tourInformation8") else APIHelper.SKIP
        tour_information_9 = dictionary.get("tourInformation9") if dictionary.get("tourInformation9") else APIHelper.SKIP
        tour_information_10 = dictionary.get("tourInformation10") if dictionary.get("tourInformation10") else APIHelper.SKIP
        pre_order_planning_no = dictionary.get("preOrderPlanningNo") if dictionary.get("preOrderPlanningNo") else APIHelper.SKIP
        pre_order_planning_id = dictionary.get("preOrderPlanningId") if dictionary.get("preOrderPlanningId") else APIHelper.SKIP
        dispatch_stop = dictionary.get("dispatchStop") if dictionary.get("dispatchStop") else APIHelper.SKIP
        security_tag_1 = dictionary.get("securityTag1") if dictionary.get("securityTag1") else APIHelper.SKIP
        security_tag_2 = dictionary.get("securityTag2") if dictionary.get("securityTag2") else APIHelper.SKIP
        lorry_license_plate = dictionary.get("lorryLicensePlate") if dictionary.get("lorryLicensePlate") else APIHelper.SKIP
        trailer_license_plate = dictionary.get("trailerLicensePlate") if dictionary.get("trailerLicensePlate") else APIHelper.SKIP
        lorry_telephone = dictionary.get("lorryTelephone") if dictionary.get("lorryTelephone") else APIHelper.SKIP
        freight_net_portion = dictionary.get("freightNetPortion") if dictionary.get("freightNetPortion") else APIHelper.SKIP
        terms_of_payment = dictionary.get("termsOfPayment") if dictionary.get("termsOfPayment") else APIHelper.SKIP
        od_workday_trailer = dictionary.get("odWorkdayTrailer") if dictionary.get("odWorkdayTrailer") else APIHelper.SKIP
        od_holiday_trailer = dictionary.get("odHolidayTrailer") if dictionary.get("odHolidayTrailer") else APIHelper.SKIP
        fill_type = dictionary.get("fillType") if dictionary.get("fillType") else APIHelper.SKIP
        additional_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("additionalDate")).datetime if dictionary.get("additionalDate") else APIHelper.SKIP
        dispatch_lock_clearance = dictionary.get("dispatchLockClearance") if dictionary.get("dispatchLockClearance") else APIHelper.SKIP
        source_area = dictionary.get("sourceArea") if dictionary.get("sourceArea") else APIHelper.SKIP
        time_table_item_id = dictionary.get("timeTableItemId") if dictionary.get("timeTableItemId") else APIHelper.SKIP
        calculated_ca_amount = dictionary.get("calculatedCAAmount") if dictionary.get("calculatedCAAmount") else APIHelper.SKIP
        time_table_item_type = dictionary.get("timeTableItemType") if dictionary.get("timeTableItemType") else APIHelper.SKIP
        utc_code = dictionary.get("utcCode") if dictionary.get("utcCode") else APIHelper.SKIP
        process_state = dictionary.get("processState") if dictionary.get("processState") else APIHelper.SKIP
        tour_inf_sym_tour_id = dictionary.get("tourInfSymTourId") if dictionary.get("tourInfSymTourId") else APIHelper.SKIP
        t_info_symbol_1 = dictionary.get("tInfoSymbol1") if dictionary.get("tInfoSymbol1") else APIHelper.SKIP
        t_info_symbol_2 = dictionary.get("tInfoSymbol2") if dictionary.get("tInfoSymbol2") else APIHelper.SKIP
        t_info_symbol_3 = dictionary.get("tInfoSymbol3") if dictionary.get("tInfoSymbol3") else APIHelper.SKIP
        t_info_symbol_4 = dictionary.get("tInfoSymbol4") if dictionary.get("tInfoSymbol4") else APIHelper.SKIP
        t_info_symbol_5 = dictionary.get("tInfoSymbol5") if dictionary.get("tInfoSymbol5") else APIHelper.SKIP
        t_info_symbol_6 = dictionary.get("tInfoSymbol6") if dictionary.get("tInfoSymbol6") else APIHelper.SKIP
        t_info_symbol_7 = dictionary.get("tInfoSymbol7") if dictionary.get("tInfoSymbol7") else APIHelper.SKIP
        t_info_symbol_8 = dictionary.get("tInfoSymbol8") if dictionary.get("tInfoSymbol8") else APIHelper.SKIP
        t_info_symbol_9 = dictionary.get("tInfoSymbol9") if dictionary.get("tInfoSymbol9") else APIHelper.SKIP
        t_info_symbol_10 = dictionary.get("tInfoSymbol10") if dictionary.get("tInfoSymbol10") else APIHelper.SKIP
        t_info_symbol_11 = dictionary.get("tInfoSymbol11") if dictionary.get("tInfoSymbol11") else APIHelper.SKIP
        t_info_symbol_12 = dictionary.get("tInfoSymbol12") if dictionary.get("tInfoSymbol12") else APIHelper.SKIP
        t_info_symbol_13 = dictionary.get("tInfoSymbol13") if dictionary.get("tInfoSymbol13") else APIHelper.SKIP
        t_info_symbol_14 = dictionary.get("tInfoSymbol14") if dictionary.get("tInfoSymbol14") else APIHelper.SKIP
        t_info_symbol_15 = dictionary.get("tInfoSymbol15") if dictionary.get("tInfoSymbol15") else APIHelper.SKIP
        t_info_symbol_16 = dictionary.get("tInfoSymbol16") if dictionary.get("tInfoSymbol16") else APIHelper.SKIP
        t_info_symbol_17 = dictionary.get("tInfoSymbol17") if dictionary.get("tInfoSymbol17") else APIHelper.SKIP
        t_info_symbol_18 = dictionary.get("tInfoSymbol18") if dictionary.get("tInfoSymbol18") else APIHelper.SKIP
        t_info_symbol_19 = dictionary.get("tInfoSymbol19") if dictionary.get("tInfoSymbol19") else APIHelper.SKIP
        t_info_symbol_20 = dictionary.get("tInfoSymbol20") if dictionary.get("tInfoSymbol20") else APIHelper.SKIP
        t_info_symbol_21 = dictionary.get("tInfoSymbol21") if dictionary.get("tInfoSymbol21") else APIHelper.SKIP
        t_info_symbol_22 = dictionary.get("tInfoSymbol22") if dictionary.get("tInfoSymbol22") else APIHelper.SKIP
        t_info_symbol_23 = dictionary.get("tInfoSymbol23") if dictionary.get("tInfoSymbol23") else APIHelper.SKIP
        t_info_symbol_24 = dictionary.get("tInfoSymbol24") if dictionary.get("tInfoSymbol24") else APIHelper.SKIP
        t_info_symbol_25 = dictionary.get("tInfoSymbol25") if dictionary.get("tInfoSymbol25") else APIHelper.SKIP
        t_info_symbol_26 = dictionary.get("tInfoSymbol26") if dictionary.get("tInfoSymbol26") else APIHelper.SKIP
        t_info_symbol_27 = dictionary.get("tInfoSymbol27") if dictionary.get("tInfoSymbol27") else APIHelper.SKIP
        t_info_symbol_28 = dictionary.get("tInfoSymbol28") if dictionary.get("tInfoSymbol28") else APIHelper.SKIP
        t_info_symbol_29 = dictionary.get("tInfoSymbol29") if dictionary.get("tInfoSymbol29") else APIHelper.SKIP
        t_info_symbol_30 = dictionary.get("tInfoSymbol30") if dictionary.get("tInfoSymbol30") else APIHelper.SKIP
        t_info_symbol_31 = dictionary.get("tInfoSymbol31") if dictionary.get("tInfoSymbol31") else APIHelper.SKIP
        t_info_symbol_32 = dictionary.get("tInfoSymbol32") if dictionary.get("tInfoSymbol32") else APIHelper.SKIP
        t_info_symbol_33 = dictionary.get("tInfoSymbol33") if dictionary.get("tInfoSymbol33") else APIHelper.SKIP
        t_info_symbol_34 = dictionary.get("tInfoSymbol34") if dictionary.get("tInfoSymbol34") else APIHelper.SKIP
        t_info_symbol_35 = dictionary.get("tInfoSymbol35") if dictionary.get("tInfoSymbol35") else APIHelper.SKIP
        t_info_symbol_36 = dictionary.get("tInfoSymbol36") if dictionary.get("tInfoSymbol36") else APIHelper.SKIP
        t_info_symbol_37 = dictionary.get("tInfoSymbol37") if dictionary.get("tInfoSymbol37") else APIHelper.SKIP
        t_info_symbol_38 = dictionary.get("tInfoSymbol38") if dictionary.get("tInfoSymbol38") else APIHelper.SKIP
        t_info_symbol_39 = dictionary.get("tInfoSymbol39") if dictionary.get("tInfoSymbol39") else APIHelper.SKIP
        t_info_symbol_40 = dictionary.get("tInfoSymbol40") if dictionary.get("tInfoSymbol40") else APIHelper.SKIP
        t_info_symbol_41 = dictionary.get("tInfoSymbol41") if dictionary.get("tInfoSymbol41") else APIHelper.SKIP
        t_info_symbol_42 = dictionary.get("tInfoSymbol42") if dictionary.get("tInfoSymbol42") else APIHelper.SKIP
        t_info_symbol_43 = dictionary.get("tInfoSymbol43") if dictionary.get("tInfoSymbol43") else APIHelper.SKIP
        t_info_symbol_44 = dictionary.get("tInfoSymbol44") if dictionary.get("tInfoSymbol44") else APIHelper.SKIP
        t_info_symbol_45 = dictionary.get("tInfoSymbol45") if dictionary.get("tInfoSymbol45") else APIHelper.SKIP
        t_info_symbol_46 = dictionary.get("tInfoSymbol46") if dictionary.get("tInfoSymbol46") else APIHelper.SKIP
        t_info_symbol_47 = dictionary.get("tInfoSymbol47") if dictionary.get("tInfoSymbol47") else APIHelper.SKIP
        t_info_symbol_48 = dictionary.get("tInfoSymbol48") if dictionary.get("tInfoSymbol48") else APIHelper.SKIP
        t_info_symbol_49 = dictionary.get("tInfoSymbol49") if dictionary.get("tInfoSymbol49") else APIHelper.SKIP
        t_info_symbol_50 = dictionary.get("tInfoSymbol50") if dictionary.get("tInfoSymbol50") else APIHelper.SKIP
        t_info_symbol_51 = dictionary.get("tInfoSymbol51") if dictionary.get("tInfoSymbol51") else APIHelper.SKIP
        t_info_symbol_52 = dictionary.get("tInfoSymbol52") if dictionary.get("tInfoSymbol52") else APIHelper.SKIP
        t_info_symbol_53 = dictionary.get("tInfoSymbol53") if dictionary.get("tInfoSymbol53") else APIHelper.SKIP
        t_info_symbol_54 = dictionary.get("tInfoSymbol54") if dictionary.get("tInfoSymbol54") else APIHelper.SKIP
        t_info_symbol_55 = dictionary.get("tInfoSymbol55") if dictionary.get("tInfoSymbol55") else APIHelper.SKIP
        t_info_symbol_56 = dictionary.get("tInfoSymbol56") if dictionary.get("tInfoSymbol56") else APIHelper.SKIP
        t_info_symbol_57 = dictionary.get("tInfoSymbol57") if dictionary.get("tInfoSymbol57") else APIHelper.SKIP
        t_info_symbol_58 = dictionary.get("tInfoSymbol58") if dictionary.get("tInfoSymbol58") else APIHelper.SKIP
        t_info_symbol_59 = dictionary.get("tInfoSymbol59") if dictionary.get("tInfoSymbol59") else APIHelper.SKIP
        t_info_symbol_60 = dictionary.get("tInfoSymbol60") if dictionary.get("tInfoSymbol60") else APIHelper.SKIP
        # Return an object of this model
        return cls(cash_payment,
                   is_credit_invoiced,
                   is_invoice_invoiced,
                   tour_id,
                   tour_no,
                   company,
                   net_load,
                   division,
                   invoice_credit_identifier,
                   changed_on,
                   changed_by,
                   carrier_id,
                   carrier_condition_type,
                   carrier_optimization_type,
                   carrier_optimization_no,
                   carrier_main_carriage_type,
                   carrier_sales_tax_code,
                   tour_date_from,
                   lorry_id,
                   trailer_id,
                   vehile_group,
                   swap_body_id_1,
                   swap_body_id_2,
                   driver_id,
                   co_driver_id,
                   weight,
                   chargeable_weight,
                   packages,
                   pallets,
                   orders,
                   storage_places,
                   dispatch_branch_office,
                   state,
                   proceeds,
                   charges,
                   permit_id,
                   is_locked,
                   locked_by,
                   is_cargo_manifest_printed,
                   is_cartage_note_printed,
                   is_pallet_note_printed,
                   is_invoice_printed,
                   is_credit_note_printed,
                   consignees,
                   division_id,
                   declared_value,
                   main_carriage_country_code,
                   main_carriage_sequence,
                   main_carriage_weight,
                   pieces,
                   cubic_decimeter,
                   loading_meter,
                   square_meter,
                   disposition_text,
                   remark_1,
                   remark_2,
                   tourd_delibery_date,
                   tour_kind,
                   dangerous_goods,
                   reefer_cargo,
                   start_time,
                   delivery_end_date,
                   delivery_end_time,
                   is_loading_list_printed,
                   tour_sections,
                   first_loading_order_id,
                   last_unloading_order_id,
                   loading_customer_id,
                   loading_country_code,
                   loading_locality_id,
                   loading_zip,
                   loading_city,
                   consignee_id,
                   unloading_country_code,
                   unloading_locality_id,
                   unloading_zip,
                   unloading_city,
                   dispatch_information,
                   driving_time,
                   calculated_charges,
                   distance,
                   distance_toll,
                   distance_empty,
                   distance_toll_empty,
                   proportional_credit_net_amount,
                   proportional_calculated_invoice_amount,
                   tour_description,
                   tour_type,
                   distance_state,
                   are_locations_fixed,
                   calender_job_series_group_id,
                   packages_sum,
                   paletts_sum,
                   pallett_spaces_count,
                   pieces_sum,
                   shipping_units,
                   data_exchange_state,
                   data_exchange_state_date,
                   utilised_storage_places,
                   utilised_storage_places_percentage,
                   utilised_load_capacity,
                   utilised_load_capacity_percentage,
                   department_id,
                   carrier_maximum_loading_places,
                   carrier_maximum_weight,
                   carrier_group_id,
                   traffic_mode,
                   requested_storage_places,
                   requested_weight,
                   internal_cost_allocation_mode,
                   internal_cost_allocation_state,
                   cancellation_state,
                   short_telematic_message,
                   target_weight,
                   calculated_wheel_time,
                   invoicing_result,
                   fencing,
                   route_id,
                   provider_string,
                   actual_distance,
                   actual_distance_empty,
                   route_state,
                   working_days_on_weekdays,
                   working_days_on_holidays,
                   requested_loading_meter,
                   planned_by,
                   created_on,
                   created_by,
                   position_number,
                   locking_history_id,
                   tour_information_1,
                   tour_information_2,
                   tour_information_3,
                   tour_information_4,
                   tour_information_5,
                   tour_information_6,
                   tour_information_7,
                   tour_information_8,
                   tour_information_9,
                   tour_information_10,
                   pre_order_planning_no,
                   pre_order_planning_id,
                   dispatch_stop,
                   security_tag_1,
                   security_tag_2,
                   lorry_license_plate,
                   trailer_license_plate,
                   lorry_telephone,
                   freight_net_portion,
                   terms_of_payment,
                   od_workday_trailer,
                   od_holiday_trailer,
                   fill_type,
                   additional_date,
                   dispatch_lock_clearance,
                   source_area,
                   time_table_item_id,
                   calculated_ca_amount,
                   time_table_item_type,
                   utc_code,
                   process_state,
                   tour_inf_sym_tour_id,
                   t_info_symbol_1,
                   t_info_symbol_2,
                   t_info_symbol_3,
                   t_info_symbol_4,
                   t_info_symbol_5,
                   t_info_symbol_6,
                   t_info_symbol_7,
                   t_info_symbol_8,
                   t_info_symbol_9,
                   t_info_symbol_10,
                   t_info_symbol_11,
                   t_info_symbol_12,
                   t_info_symbol_13,
                   t_info_symbol_14,
                   t_info_symbol_15,
                   t_info_symbol_16,
                   t_info_symbol_17,
                   t_info_symbol_18,
                   t_info_symbol_19,
                   t_info_symbol_20,
                   t_info_symbol_21,
                   t_info_symbol_22,
                   t_info_symbol_23,
                   t_info_symbol_24,
                   t_info_symbol_25,
                   t_info_symbol_26,
                   t_info_symbol_27,
                   t_info_symbol_28,
                   t_info_symbol_29,
                   t_info_symbol_30,
                   t_info_symbol_31,
                   t_info_symbol_32,
                   t_info_symbol_33,
                   t_info_symbol_34,
                   t_info_symbol_35,
                   t_info_symbol_36,
                   t_info_symbol_37,
                   t_info_symbol_38,
                   t_info_symbol_39,
                   t_info_symbol_40,
                   t_info_symbol_41,
                   t_info_symbol_42,
                   t_info_symbol_43,
                   t_info_symbol_44,
                   t_info_symbol_45,
                   t_info_symbol_46,
                   t_info_symbol_47,
                   t_info_symbol_48,
                   t_info_symbol_49,
                   t_info_symbol_50,
                   t_info_symbol_51,
                   t_info_symbol_52,
                   t_info_symbol_53,
                   t_info_symbol_54,
                   t_info_symbol_55,
                   t_info_symbol_56,
                   t_info_symbol_57,
                   t_info_symbol_58,
                   t_info_symbol_59,
                   t_info_symbol_60)
