# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_customer_loading_point_address import LISPublicCustomerLoadingPointAddress


class LISPublicCustomerLoadingPointScope(object):

    """Implementation of the 'LISPublicCustomerLoadingPointScope' model.

    The LISCustomerLoadingPointScope data contract.

    Attributes:
        name_1 (string): Gets or sets Name1.
        name_2 (string): Gets or sets Name2.
        name_3 (string): Gets or sets Name3.
        address (LISPublicCustomerLoadingPointAddress): Represents a customer
            address.
        differing_loading_point (int): Gets or sets DifferingLoadingPoint.
        differing_unloading_point (int): Gets or sets
            DifferingUnloadingPoint.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name_1": 'name1',
        "name_2": 'name2',
        "name_3": 'name3',
        "address": 'address',
        "differing_loading_point": 'differingLoadingPoint',
        "differing_unloading_point": 'differingUnloadingPoint'
    }

    _optionals = [
        'name_1',
        'name_2',
        'name_3',
        'address',
        'differing_loading_point',
        'differing_unloading_point',
    ]

    def __init__(self,
                 name_1=APIHelper.SKIP,
                 name_2=APIHelper.SKIP,
                 name_3=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 differing_loading_point=APIHelper.SKIP,
                 differing_unloading_point=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerLoadingPointScope class"""

        # Initialize members of the class
        if name_1 is not APIHelper.SKIP:
            self.name_1 = name_1 
        if name_2 is not APIHelper.SKIP:
            self.name_2 = name_2 
        if name_3 is not APIHelper.SKIP:
            self.name_3 = name_3 
        if address is not APIHelper.SKIP:
            self.address = address 
        if differing_loading_point is not APIHelper.SKIP:
            self.differing_loading_point = differing_loading_point 
        if differing_unloading_point is not APIHelper.SKIP:
            self.differing_unloading_point = differing_unloading_point 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name_1 = dictionary.get("name1") if dictionary.get("name1") else APIHelper.SKIP
        name_2 = dictionary.get("name2") if dictionary.get("name2") else APIHelper.SKIP
        name_3 = dictionary.get("name3") if dictionary.get("name3") else APIHelper.SKIP
        address = LISPublicCustomerLoadingPointAddress.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP
        differing_loading_point = dictionary.get("differingLoadingPoint") if dictionary.get("differingLoadingPoint") else APIHelper.SKIP
        differing_unloading_point = dictionary.get("differingUnloadingPoint") if dictionary.get("differingUnloadingPoint") else APIHelper.SKIP
        # Return an object of this model
        return cls(name_1,
                   name_2,
                   name_3,
                   address,
                   differing_loading_point,
                   differing_unloading_point)
