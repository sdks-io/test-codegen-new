# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_special_invoice import LISPublicSpecialInvoice
from lispublicservices.models.lis_special_invoice_options import LISSpecialInvoiceOptions


class LISCreateSpecialInvoiceRequest(object):

    """Implementation of the 'LISCreateSpecialInvoiceRequest' model.

    Request object for creating a special invoice.

    Attributes:
        entity (LISPublicSpecialInvoice): The special invoice
        options (LISSpecialInvoiceOptions): Options to create a special
            invoice

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "entity": 'entity',
        "options": 'options'
    }

    _optionals = [
        'entity',
        'options',
    ]

    def __init__(self,
                 entity=APIHelper.SKIP,
                 options=APIHelper.SKIP):
        """Constructor for the LISCreateSpecialInvoiceRequest class"""

        # Initialize members of the class
        if entity is not APIHelper.SKIP:
            self.entity = entity 
        if options is not APIHelper.SKIP:
            self.options = options 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        entity = LISPublicSpecialInvoice.from_dictionary(dictionary.get('entity')) if 'entity' in dictionary.keys() else APIHelper.SKIP
        options = LISSpecialInvoiceOptions.from_dictionary(dictionary.get('options')) if 'options' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(entity,
                   options)
