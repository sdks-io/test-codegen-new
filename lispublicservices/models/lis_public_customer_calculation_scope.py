# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerCalculationScope(object):

    """Implementation of the 'LISPublicCustomerCalculationScope' model.

    The LISCustomerCalculationScope data contract.

    Attributes:
        blocking_weight (float): Gets or sets BlockingWeight.
        blocking_weight_base (BlockingWeightBaseEnum): Gets or sets
            BlockingWeightBase.
        automatic_toll_calculation (AutomaticTollCalculationEnum): Gets or
            sets AutomaticTollCalculation.
        toll_method (TollMethodEnum): Gets or sets TollMethod.
        distance_calculation_method_order_1
            (DistanceCalculationMethodOrder1Enum): Gets or sets the distance
            calculation method order1.
        distance_calculation_method_order_2
            (DistanceCalculationMethodOrder2Enum): Gets or sets the distance
            calculation method order2.
        distance_calculation_method_order_3
            (DistanceCalculationMethodOrder3Enum): Gets or sets the distance
            calculation method order3.
        distance_calculation_method_order_4
            (DistanceCalculationMethodOrder4Enum): Gets or sets the distance
            calculation method order4.
        collection_point_id (int): Gets or sets CollectionPoint.
        collection_point_country_code (string): Gets or sets the collection
            point country code.
        consider_bulky_goods (bool): Gets or sets ConsiderBulkyGoods.
        is_invoicing_blocked_for_new_orders (bool): Gets or sets
            IsInvoicingBlockedForNewOrders.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "blocking_weight": 'blockingWeight',
        "blocking_weight_base": 'blockingWeightBase',
        "automatic_toll_calculation": 'automaticTollCalculation',
        "toll_method": 'tollMethod',
        "distance_calculation_method_order_1": 'distanceCalculationMethodOrder1',
        "distance_calculation_method_order_2": 'distanceCalculationMethodOrder2',
        "distance_calculation_method_order_3": 'distanceCalculationMethodOrder3',
        "distance_calculation_method_order_4": 'distanceCalculationMethodOrder4',
        "collection_point_id": 'collectionPointId',
        "collection_point_country_code": 'collectionPointCountryCode',
        "consider_bulky_goods": 'considerBulkyGoods',
        "is_invoicing_blocked_for_new_orders": 'isInvoicingBlockedForNewOrders'
    }

    _optionals = [
        'blocking_weight',
        'blocking_weight_base',
        'automatic_toll_calculation',
        'toll_method',
        'distance_calculation_method_order_1',
        'distance_calculation_method_order_2',
        'distance_calculation_method_order_3',
        'distance_calculation_method_order_4',
        'collection_point_id',
        'collection_point_country_code',
        'consider_bulky_goods',
        'is_invoicing_blocked_for_new_orders',
    ]

    def __init__(self,
                 blocking_weight=APIHelper.SKIP,
                 blocking_weight_base=APIHelper.SKIP,
                 automatic_toll_calculation=APIHelper.SKIP,
                 toll_method=APIHelper.SKIP,
                 distance_calculation_method_order_1=APIHelper.SKIP,
                 distance_calculation_method_order_2=APIHelper.SKIP,
                 distance_calculation_method_order_3=APIHelper.SKIP,
                 distance_calculation_method_order_4=APIHelper.SKIP,
                 collection_point_id=APIHelper.SKIP,
                 collection_point_country_code=APIHelper.SKIP,
                 consider_bulky_goods=APIHelper.SKIP,
                 is_invoicing_blocked_for_new_orders=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerCalculationScope class"""

        # Initialize members of the class
        if blocking_weight is not APIHelper.SKIP:
            self.blocking_weight = blocking_weight 
        if blocking_weight_base is not APIHelper.SKIP:
            self.blocking_weight_base = blocking_weight_base 
        if automatic_toll_calculation is not APIHelper.SKIP:
            self.automatic_toll_calculation = automatic_toll_calculation 
        if toll_method is not APIHelper.SKIP:
            self.toll_method = toll_method 
        if distance_calculation_method_order_1 is not APIHelper.SKIP:
            self.distance_calculation_method_order_1 = distance_calculation_method_order_1 
        if distance_calculation_method_order_2 is not APIHelper.SKIP:
            self.distance_calculation_method_order_2 = distance_calculation_method_order_2 
        if distance_calculation_method_order_3 is not APIHelper.SKIP:
            self.distance_calculation_method_order_3 = distance_calculation_method_order_3 
        if distance_calculation_method_order_4 is not APIHelper.SKIP:
            self.distance_calculation_method_order_4 = distance_calculation_method_order_4 
        if collection_point_id is not APIHelper.SKIP:
            self.collection_point_id = collection_point_id 
        if collection_point_country_code is not APIHelper.SKIP:
            self.collection_point_country_code = collection_point_country_code 
        if consider_bulky_goods is not APIHelper.SKIP:
            self.consider_bulky_goods = consider_bulky_goods 
        if is_invoicing_blocked_for_new_orders is not APIHelper.SKIP:
            self.is_invoicing_blocked_for_new_orders = is_invoicing_blocked_for_new_orders 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        blocking_weight = dictionary.get("blockingWeight") if dictionary.get("blockingWeight") else APIHelper.SKIP
        blocking_weight_base = dictionary.get("blockingWeightBase") if dictionary.get("blockingWeightBase") else APIHelper.SKIP
        automatic_toll_calculation = dictionary.get("automaticTollCalculation") if dictionary.get("automaticTollCalculation") else APIHelper.SKIP
        toll_method = dictionary.get("tollMethod") if dictionary.get("tollMethod") else APIHelper.SKIP
        distance_calculation_method_order_1 = dictionary.get("distanceCalculationMethodOrder1") if dictionary.get("distanceCalculationMethodOrder1") else APIHelper.SKIP
        distance_calculation_method_order_2 = dictionary.get("distanceCalculationMethodOrder2") if dictionary.get("distanceCalculationMethodOrder2") else APIHelper.SKIP
        distance_calculation_method_order_3 = dictionary.get("distanceCalculationMethodOrder3") if dictionary.get("distanceCalculationMethodOrder3") else APIHelper.SKIP
        distance_calculation_method_order_4 = dictionary.get("distanceCalculationMethodOrder4") if dictionary.get("distanceCalculationMethodOrder4") else APIHelper.SKIP
        collection_point_id = dictionary.get("collectionPointId") if dictionary.get("collectionPointId") else APIHelper.SKIP
        collection_point_country_code = dictionary.get("collectionPointCountryCode") if dictionary.get("collectionPointCountryCode") else APIHelper.SKIP
        consider_bulky_goods = dictionary.get("considerBulkyGoods") if "considerBulkyGoods" in dictionary.keys() else APIHelper.SKIP
        is_invoicing_blocked_for_new_orders = dictionary.get("isInvoicingBlockedForNewOrders") if "isInvoicingBlockedForNewOrders" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(blocking_weight,
                   blocking_weight_base,
                   automatic_toll_calculation,
                   toll_method,
                   distance_calculation_method_order_1,
                   distance_calculation_method_order_2,
                   distance_calculation_method_order_3,
                   distance_calculation_method_order_4,
                   collection_point_id,
                   collection_point_country_code,
                   consider_bulky_goods,
                   is_invoicing_blocked_for_new_orders)
