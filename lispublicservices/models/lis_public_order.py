# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_extended_data_table_record import LISPublicExtendedDataTableRecord
from lispublicservices.models.lis_public_order_additional_charging import LISPublicOrderAdditionalCharging
from lispublicservices.models.lis_public_order_address_information import LISPublicOrderAddressInformation
from lispublicservices.models.lis_public_order_address_role import LISPublicOrderAddressRole
from lispublicservices.models.lis_public_order_aggregates import LISPublicOrderAggregates
from lispublicservices.models.lis_public_order_appointment import LISPublicOrderAppointment
from lispublicservices.models.lis_public_order_cash_on_delivery import LISPublicOrderCashOnDelivery
from lispublicservices.models.lis_public_order_coded_text import LISPublicOrderCodedText
from lispublicservices.models.lis_public_order_d_good import LISPublicOrderDGood
from lispublicservices.models.lis_public_order_detail import LISPublicOrderDetail
from lispublicservices.models.lis_public_order_fee import LISPublicOrderFee
from lispublicservices.models.lis_public_order_information import LISPublicOrderInformation
from lispublicservices.models.lis_public_order_invoice_data import LISPublicOrderInvoiceData
from lispublicservices.models.lis_public_order_long_text import LISPublicOrderLongText
from lispublicservices.models.lis_public_order_lump_sum import LISPublicOrderLumpSum
from lispublicservices.models.lis_public_order_short_text import LISPublicOrderShortText
from lispublicservices.models.lis_public_order_tour import LISPublicOrderTour
from lispublicservices.models.lis_public_route_info import LISPublicRouteInfo
from lispublicservices.models.lis_public_shipment_station import LISPublicShipmentStation
from lispublicservices.models.lis_public_sscc import LISPublicSSCC


class LISPublicOrder(object):

    """Implementation of the 'LISPublicOrder' model.

    This class represents the public order object.

    Attributes:
        aggregates (LISPublicOrderAggregates): The LIS Order aggregates.
        addresses (list of LISPublicOrderAddressInformation): Gets or sets
            Addresses.
        address_roles (list of LISPublicOrderAddressRole): Gets or sets
            AddressRoles.
        details (list of LISPublicOrderDetail): Gets or sets Details.
        appointments (list of LISPublicOrderAppointment): Gets or sets
            Appointments.
        stations (list of LISPublicShipmentStation): Gets or sets Stations.
        order_informations (list of LISPublicOrderInformation): Gets or sets
            OrderInformations.
        fees (list of LISPublicOrderFee): Gets or sets Fees.
        additional_chargings (list of LISPublicOrderAdditionalCharging): Gets
            or sets AdditionalChargings.
        cash_on_delivery (LISPublicOrderCashOnDelivery): The
            LISOrderCashOnDelivery data contract.
        invoice_department_id (int): Gets or sets InvoiceDepartmentId.
        invoice_division_id (int): Gets or sets InvoiceDivisionId.
        invoicing_indicator (InvoicingIndicatorEnum): Gets or sets
            InvoicingIndicator.
        cargo_insurance (bool): Gets or sets CargoInsurance.
        bonus_lump_sum (float): Gets or sets the bonus lumpsum.
        general_condition_customer_id (int): Gets or sets
            GeneralConditionCustomerId.
        freight_term_id (string): Gets or sets FreightTermId.
        freight_payer_condition_type (FreightPayerConditionTypeEnum): Gets or
            sets FreightPayerConditionType.
        freight_payer_main_carriage (FreightPayerMainCarriageEnum): Gets or
            sets FreightPayerMainCarriage.
        freight_payer_sales_tax_code (string): Gets or sets
            FreightPayerSalesTaxCode.
        is_cash_payment (bool): Gets or sets IsCashPayment.
        is_freight_payer_invoicing_blocked (bool): Gets or sets
            IsFreightPayerInvoicingBlocked.
        proceeds (float): Gets or sets Proceeds.
        cost_unit_id (int): Gets or sets CostUnitId.
        loading_relation_id (string): Gets or sets LoadingRelationId.
        unloading_relation_id (string): Gets or sets UnloadingRelationId.
        original_sender_relation_id (string): Gets or sets
            OriginalSenderRelationId.
        final_recipient_relation_relation_id (string): Gets or sets
            FinalRecipientRelationRelationId.
        short_texts (list of LISPublicOrderShortText): Gets or sets
            ShortTexts.
        long_texts (list of LISPublicOrderLongText): Gets or sets LongTexts.
        coded_texts (list of LISPublicOrderCodedText): Gets or sets
            CodedTexts.
        debit_form_type (int): Gets or sets DebitFormType.
        exchange_rate_date (datetime): Gets or sets the exchange rate date.
        debit_own_form_type (int): Gets or sets DebitOwnFormType.
        cost_center (int): Gets or sets CostCenter.
        account_table (int): Gets or sets AccountTable.
        charge_number (string): Gets or sets ChargeNumber.
        dsi_number (string): Gets or sets DSINumber.
        loading_area_id (string): Gets or sets LoadingAreaId.
        unloading_area_id (string): Gets or sets UnloadingAreaId.
        route_info (LISPublicRouteInfo): Only the basic route informations.
        additional_charging_no (int): Gets or sets AdditionalChargingNo.
        base_order_id (int): Gets or sets BaseOrderId.
        base_order_no (int): Gets or sets BaseOrderNo.
        position_no (string): Gets or sets PositionNo.
        changed_by (string): Gets or sets ChangedBy.
        changed_on (datetime): Gets or sets ChangedOn.
        created_by (string): Gets or sets CreatedBy.
        created_on (datetime): Gets or sets CreatedOn.
        company_id (int): Gets or sets CompanyId.
        division_id (int): Gets or sets DivisionId.
        department_id (int): Gets or sets DepartmentId.
        sub_division_id (int): Gets or sets SubDivisionId.
        sub_department_id (int): Gets or sets SubDepartmentId.
        accounting_company (int): Gets or sets AccountingCompany.
        accounting_division (int): Gets or sets AccountingDivision.
        accounting_department (int): Gets or sets AccountingDepartment.
        order_id (int): Gets or sets OrderId.
        order_type (OrderType2Enum): Gets or sets OrderType.
        delete_state (DeleteStateEnum): Gets or sets DeleteState.
        original_order_type (OriginalOrderTypeEnum): Gets or sets
            OriginalOrderType.
        order_input_type (OrderInputType1Enum): Gets or sets OrderInputType.
        order_no (int): Gets or sets OrderNo.
        order_sub_no (int): Gets or sets OrderSubNo.
        order_date (datetime): Gets or sets OrderDate.
        delivery_date (datetime): Gets or sets DeliveryDate.
        order_text (string): Gets or sets OrderText.
        picking_no (string): Gets or sets PickingNo.
        reference_no (string): Gets or sets ReferenceNo.
        delivery_no (string): Gets or sets DeliveryNo.
        traffic_mode_id (string): Gets or sets TrafficModeId.
        order_category (string): Gets or sets OrderCategory.
        ld_booking_flag (LdBookingFlagEnum): Gets or sets LDBookingFlag.
        transportation_route_id (int): Gets or sets TransportationRouteId.
        direct_delivery (DirectDeliveryEnum): Gets or sets DirectDelivery.
        debit_lump_sum (list of LISPublicOrderLumpSum): Gets or sets the debit
            lump sum.
        credit_lump_sum (list of LISPublicOrderLumpSum): Gets or sets the
            credit lump sum.
        extended_fields (LISPublicExtendedDataTableRecord): This class
            represents a row within an extended table. Therefor it holds a 
            collection of
            {LIS.NetSped.PublicServiceLayer.Models.Customer.ExtTables.LISPublic
            ExtendedDataField}.
        carrier_condition_type (CarrierConditionType2Enum): Gets or sets the
            type of the carrier condition.
        carrier_sales_tax_code (string): Gets or sets the carrier sales tax
            code.
        dangerous_goods (list of LISPublicOrderDGood): Gets or sets the
            dangerous goods.
        service_order_template_id (int): Gets or sets the service order
            template identifier.
        debit_condition_temporary_identifier (string): Gets or sets the
            condition temporary identifier.
        credit_condition_temporary_identifier (string): Gets or sets the
            credit condition temporary identifier.
        dossier_condition_temporary_identifier (string): TODO: type
            description here.
        has_manual_freight_payer_condition (bool): Gets or sets a value
            indicating whether this instance has manual condition.
        has_manual_carrier_condition (bool): Gets or sets a value indicating
            whether this instance has manual condition.
        debit_print_currency (string): Gets or sets the debit print currency.
        order_source_area (OrderSourceAreaEnum): Gets or sets the order source
            area.
        tour (LISPublicOrderTour): A base class for all order data contracts.
        invoice_data (list of LISPublicOrderInvoiceData): Gets or sets the
            invoice data.
        dossier_no (string): Gets or sets the dossier no.
        harbour_id (int): Gets or sets the harbour identifier.
        log_model_id (int): Gets or sets the log model identifier.
        driving_time (int): Gets or sets the driving time.
        term_of_payment_id (int): Gets or sets the term of payment
            identifier.
        inbound_bordero_no (string): Gets or sets the inbound bordero no.
        owner (string): Gets or sets the owner.
        has_time_table (bool): Gets or sets a value indicating whether this
            instance has time table.
        carrier_for_last_shipment (int): /
        shipment_id_for_carrier_in_address_list (int): TODO: type description
            here.
        ssc_cs (list of LISPublicSSCC): Lists the SSCCs for the order
        is_new (bool): Gets or sets a value indicating whether this entity
            will be inserted or updated.
        original_hash_snapshot (string): Gets or sets the original hash
            snapshot.
        original_snapshot (string): Gets or sets the original snapshot.
        current_snapshot (string): Gets or sets the current snapshot.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aggregates": 'aggregates',
        "addresses": 'addresses',
        "address_roles": 'addressRoles',
        "details": 'details',
        "appointments": 'appointments',
        "stations": 'stations',
        "order_informations": 'orderInformations',
        "fees": 'fees',
        "additional_chargings": 'additionalChargings',
        "cash_on_delivery": 'cashOnDelivery',
        "invoice_department_id": 'invoiceDepartmentId',
        "invoice_division_id": 'invoiceDivisionId',
        "invoicing_indicator": 'invoicingIndicator',
        "cargo_insurance": 'cargoInsurance',
        "bonus_lump_sum": 'bonusLumpSum',
        "general_condition_customer_id": 'generalConditionCustomerId',
        "freight_term_id": 'freightTermId',
        "freight_payer_condition_type": 'freightPayerConditionType',
        "freight_payer_main_carriage": 'freightPayerMainCarriage',
        "freight_payer_sales_tax_code": 'freightPayerSalesTaxCode',
        "is_cash_payment": 'isCashPayment',
        "is_freight_payer_invoicing_blocked": 'isFreightPayerInvoicingBlocked',
        "proceeds": 'proceeds',
        "cost_unit_id": 'costUnitId',
        "loading_relation_id": 'loadingRelationId',
        "unloading_relation_id": 'unloadingRelationId',
        "original_sender_relation_id": 'originalSenderRelationId',
        "final_recipient_relation_relation_id": 'finalRecipientRelationRelationId',
        "short_texts": 'shortTexts',
        "long_texts": 'longTexts',
        "coded_texts": 'codedTexts',
        "debit_form_type": 'debitFormType',
        "exchange_rate_date": 'exchangeRateDate',
        "debit_own_form_type": 'debitOwnFormType',
        "cost_center": 'costCenter',
        "account_table": 'accountTable',
        "charge_number": 'chargeNumber',
        "dsi_number": 'dsiNumber',
        "loading_area_id": 'loadingAreaId',
        "unloading_area_id": 'unloadingAreaId',
        "route_info": 'routeInfo',
        "additional_charging_no": 'additionalChargingNo',
        "base_order_id": 'baseOrderId',
        "base_order_no": 'baseOrderNo',
        "position_no": 'positionNo',
        "changed_by": 'changedBy',
        "changed_on": 'changedOn',
        "created_by": 'createdBy',
        "created_on": 'createdOn',
        "company_id": 'companyId',
        "division_id": 'divisionId',
        "department_id": 'departmentId',
        "sub_division_id": 'subDivisionId',
        "sub_department_id": 'subDepartmentId',
        "accounting_company": 'accountingCompany',
        "accounting_division": 'accountingDivision',
        "accounting_department": 'accountingDepartment',
        "order_id": 'orderId',
        "order_type": 'orderType',
        "delete_state": 'deleteState',
        "original_order_type": 'originalOrderType',
        "order_input_type": 'orderInputType',
        "order_no": 'orderNo',
        "order_sub_no": 'orderSubNo',
        "order_date": 'orderDate',
        "delivery_date": 'deliveryDate',
        "order_text": 'orderText',
        "picking_no": 'pickingNo',
        "reference_no": 'referenceNo',
        "delivery_no": 'deliveryNo',
        "traffic_mode_id": 'trafficModeId',
        "order_category": 'orderCategory',
        "ld_booking_flag": 'ldBookingFlag',
        "transportation_route_id": 'transportationRouteId',
        "direct_delivery": 'directDelivery',
        "debit_lump_sum": 'debitLumpSum',
        "credit_lump_sum": 'creditLumpSum',
        "extended_fields": 'extendedFields',
        "carrier_condition_type": 'carrierConditionType',
        "carrier_sales_tax_code": 'carrierSalesTaxCode',
        "dangerous_goods": 'dangerousGoods',
        "service_order_template_id": 'serviceOrderTemplateId',
        "debit_condition_temporary_identifier": 'debitConditionTemporaryIdentifier',
        "credit_condition_temporary_identifier": 'creditConditionTemporaryIdentifier',
        "dossier_condition_temporary_identifier": 'dossierConditionTemporaryIdentifier',
        "has_manual_freight_payer_condition": 'hasManualFreightPayerCondition',
        "has_manual_carrier_condition": 'hasManualCarrierCondition',
        "debit_print_currency": 'debitPrintCurrency',
        "order_source_area": 'orderSourceArea',
        "tour": 'tour',
        "invoice_data": 'invoiceData',
        "dossier_no": 'dossierNo',
        "harbour_id": 'harbourId',
        "log_model_id": 'logModelId',
        "driving_time": 'drivingTime',
        "term_of_payment_id": 'termOfPaymentId',
        "inbound_bordero_no": 'inboundBorderoNo',
        "owner": 'owner',
        "has_time_table": 'hasTimeTable',
        "carrier_for_last_shipment": 'carrierForLastShipment',
        "shipment_id_for_carrier_in_address_list": 'shipmentIdForCarrierInAddressList',
        "ssc_cs": 'sscCs',
        "is_new": 'isNew',
        "original_hash_snapshot": 'originalHashSnapshot',
        "original_snapshot": 'originalSnapshot',
        "current_snapshot": 'currentSnapshot'
    }

    _optionals = [
        'aggregates',
        'addresses',
        'address_roles',
        'details',
        'appointments',
        'stations',
        'order_informations',
        'fees',
        'additional_chargings',
        'cash_on_delivery',
        'invoice_department_id',
        'invoice_division_id',
        'invoicing_indicator',
        'cargo_insurance',
        'bonus_lump_sum',
        'general_condition_customer_id',
        'freight_term_id',
        'freight_payer_condition_type',
        'freight_payer_main_carriage',
        'freight_payer_sales_tax_code',
        'is_cash_payment',
        'is_freight_payer_invoicing_blocked',
        'proceeds',
        'cost_unit_id',
        'loading_relation_id',
        'unloading_relation_id',
        'original_sender_relation_id',
        'final_recipient_relation_relation_id',
        'short_texts',
        'long_texts',
        'coded_texts',
        'debit_form_type',
        'exchange_rate_date',
        'debit_own_form_type',
        'cost_center',
        'account_table',
        'charge_number',
        'dsi_number',
        'loading_area_id',
        'unloading_area_id',
        'route_info',
        'additional_charging_no',
        'base_order_id',
        'base_order_no',
        'position_no',
        'changed_by',
        'changed_on',
        'created_by',
        'created_on',
        'company_id',
        'division_id',
        'department_id',
        'sub_division_id',
        'sub_department_id',
        'accounting_company',
        'accounting_division',
        'accounting_department',
        'order_id',
        'order_type',
        'delete_state',
        'original_order_type',
        'order_input_type',
        'order_no',
        'order_sub_no',
        'order_date',
        'delivery_date',
        'order_text',
        'picking_no',
        'reference_no',
        'delivery_no',
        'traffic_mode_id',
        'order_category',
        'ld_booking_flag',
        'transportation_route_id',
        'direct_delivery',
        'debit_lump_sum',
        'credit_lump_sum',
        'extended_fields',
        'carrier_condition_type',
        'carrier_sales_tax_code',
        'dangerous_goods',
        'service_order_template_id',
        'debit_condition_temporary_identifier',
        'credit_condition_temporary_identifier',
        'dossier_condition_temporary_identifier',
        'has_manual_freight_payer_condition',
        'has_manual_carrier_condition',
        'debit_print_currency',
        'order_source_area',
        'tour',
        'invoice_data',
        'dossier_no',
        'harbour_id',
        'log_model_id',
        'driving_time',
        'term_of_payment_id',
        'inbound_bordero_no',
        'owner',
        'has_time_table',
        'carrier_for_last_shipment',
        'shipment_id_for_carrier_in_address_list',
        'ssc_cs',
        'is_new',
        'original_hash_snapshot',
        'original_snapshot',
        'current_snapshot',
    ]

    def __init__(self,
                 aggregates=APIHelper.SKIP,
                 addresses=APIHelper.SKIP,
                 address_roles=APIHelper.SKIP,
                 details=APIHelper.SKIP,
                 appointments=APIHelper.SKIP,
                 stations=APIHelper.SKIP,
                 order_informations=APIHelper.SKIP,
                 fees=APIHelper.SKIP,
                 additional_chargings=APIHelper.SKIP,
                 cash_on_delivery=APIHelper.SKIP,
                 invoice_department_id=APIHelper.SKIP,
                 invoice_division_id=APIHelper.SKIP,
                 invoicing_indicator=APIHelper.SKIP,
                 cargo_insurance=APIHelper.SKIP,
                 bonus_lump_sum=APIHelper.SKIP,
                 general_condition_customer_id=APIHelper.SKIP,
                 freight_term_id=APIHelper.SKIP,
                 freight_payer_condition_type=APIHelper.SKIP,
                 freight_payer_main_carriage=APIHelper.SKIP,
                 freight_payer_sales_tax_code=APIHelper.SKIP,
                 is_cash_payment=APIHelper.SKIP,
                 is_freight_payer_invoicing_blocked=APIHelper.SKIP,
                 proceeds=APIHelper.SKIP,
                 cost_unit_id=APIHelper.SKIP,
                 loading_relation_id=APIHelper.SKIP,
                 unloading_relation_id=APIHelper.SKIP,
                 original_sender_relation_id=APIHelper.SKIP,
                 final_recipient_relation_relation_id=APIHelper.SKIP,
                 short_texts=APIHelper.SKIP,
                 long_texts=APIHelper.SKIP,
                 coded_texts=APIHelper.SKIP,
                 debit_form_type=APIHelper.SKIP,
                 exchange_rate_date=APIHelper.SKIP,
                 debit_own_form_type=APIHelper.SKIP,
                 cost_center=APIHelper.SKIP,
                 account_table=APIHelper.SKIP,
                 charge_number=APIHelper.SKIP,
                 dsi_number=APIHelper.SKIP,
                 loading_area_id=APIHelper.SKIP,
                 unloading_area_id=APIHelper.SKIP,
                 route_info=APIHelper.SKIP,
                 additional_charging_no=APIHelper.SKIP,
                 base_order_id=APIHelper.SKIP,
                 base_order_no=APIHelper.SKIP,
                 position_no=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 company_id=APIHelper.SKIP,
                 division_id=APIHelper.SKIP,
                 department_id=APIHelper.SKIP,
                 sub_division_id=APIHelper.SKIP,
                 sub_department_id=APIHelper.SKIP,
                 accounting_company=APIHelper.SKIP,
                 accounting_division=APIHelper.SKIP,
                 accounting_department=APIHelper.SKIP,
                 order_id=APIHelper.SKIP,
                 order_type=APIHelper.SKIP,
                 delete_state=APIHelper.SKIP,
                 original_order_type=APIHelper.SKIP,
                 order_input_type=APIHelper.SKIP,
                 order_no=APIHelper.SKIP,
                 order_sub_no=APIHelper.SKIP,
                 order_date=APIHelper.SKIP,
                 delivery_date=APIHelper.SKIP,
                 order_text=APIHelper.SKIP,
                 picking_no=APIHelper.SKIP,
                 reference_no=APIHelper.SKIP,
                 delivery_no=APIHelper.SKIP,
                 traffic_mode_id=APIHelper.SKIP,
                 order_category=APIHelper.SKIP,
                 ld_booking_flag=APIHelper.SKIP,
                 transportation_route_id=APIHelper.SKIP,
                 direct_delivery=APIHelper.SKIP,
                 debit_lump_sum=APIHelper.SKIP,
                 credit_lump_sum=APIHelper.SKIP,
                 extended_fields=APIHelper.SKIP,
                 carrier_condition_type=APIHelper.SKIP,
                 carrier_sales_tax_code=APIHelper.SKIP,
                 dangerous_goods=APIHelper.SKIP,
                 service_order_template_id=APIHelper.SKIP,
                 debit_condition_temporary_identifier=APIHelper.SKIP,
                 credit_condition_temporary_identifier=APIHelper.SKIP,
                 dossier_condition_temporary_identifier=APIHelper.SKIP,
                 has_manual_freight_payer_condition=APIHelper.SKIP,
                 has_manual_carrier_condition=APIHelper.SKIP,
                 debit_print_currency=APIHelper.SKIP,
                 order_source_area=APIHelper.SKIP,
                 tour=APIHelper.SKIP,
                 invoice_data=APIHelper.SKIP,
                 dossier_no=APIHelper.SKIP,
                 harbour_id=APIHelper.SKIP,
                 log_model_id=APIHelper.SKIP,
                 driving_time=APIHelper.SKIP,
                 term_of_payment_id=APIHelper.SKIP,
                 inbound_bordero_no=APIHelper.SKIP,
                 owner=APIHelper.SKIP,
                 has_time_table=APIHelper.SKIP,
                 carrier_for_last_shipment=APIHelper.SKIP,
                 shipment_id_for_carrier_in_address_list=APIHelper.SKIP,
                 ssc_cs=APIHelper.SKIP,
                 is_new=APIHelper.SKIP,
                 original_hash_snapshot=APIHelper.SKIP,
                 original_snapshot=APIHelper.SKIP,
                 current_snapshot=APIHelper.SKIP):
        """Constructor for the LISPublicOrder class"""

        # Initialize members of the class
        if aggregates is not APIHelper.SKIP:
            self.aggregates = aggregates 
        if addresses is not APIHelper.SKIP:
            self.addresses = addresses 
        if address_roles is not APIHelper.SKIP:
            self.address_roles = address_roles 
        if details is not APIHelper.SKIP:
            self.details = details 
        if appointments is not APIHelper.SKIP:
            self.appointments = appointments 
        if stations is not APIHelper.SKIP:
            self.stations = stations 
        if order_informations is not APIHelper.SKIP:
            self.order_informations = order_informations 
        if fees is not APIHelper.SKIP:
            self.fees = fees 
        if additional_chargings is not APIHelper.SKIP:
            self.additional_chargings = additional_chargings 
        if cash_on_delivery is not APIHelper.SKIP:
            self.cash_on_delivery = cash_on_delivery 
        if invoice_department_id is not APIHelper.SKIP:
            self.invoice_department_id = invoice_department_id 
        if invoice_division_id is not APIHelper.SKIP:
            self.invoice_division_id = invoice_division_id 
        if invoicing_indicator is not APIHelper.SKIP:
            self.invoicing_indicator = invoicing_indicator 
        if cargo_insurance is not APIHelper.SKIP:
            self.cargo_insurance = cargo_insurance 
        if bonus_lump_sum is not APIHelper.SKIP:
            self.bonus_lump_sum = bonus_lump_sum 
        if general_condition_customer_id is not APIHelper.SKIP:
            self.general_condition_customer_id = general_condition_customer_id 
        if freight_term_id is not APIHelper.SKIP:
            self.freight_term_id = freight_term_id 
        if freight_payer_condition_type is not APIHelper.SKIP:
            self.freight_payer_condition_type = freight_payer_condition_type 
        if freight_payer_main_carriage is not APIHelper.SKIP:
            self.freight_payer_main_carriage = freight_payer_main_carriage 
        if freight_payer_sales_tax_code is not APIHelper.SKIP:
            self.freight_payer_sales_tax_code = freight_payer_sales_tax_code 
        if is_cash_payment is not APIHelper.SKIP:
            self.is_cash_payment = is_cash_payment 
        if is_freight_payer_invoicing_blocked is not APIHelper.SKIP:
            self.is_freight_payer_invoicing_blocked = is_freight_payer_invoicing_blocked 
        if proceeds is not APIHelper.SKIP:
            self.proceeds = proceeds 
        if cost_unit_id is not APIHelper.SKIP:
            self.cost_unit_id = cost_unit_id 
        if loading_relation_id is not APIHelper.SKIP:
            self.loading_relation_id = loading_relation_id 
        if unloading_relation_id is not APIHelper.SKIP:
            self.unloading_relation_id = unloading_relation_id 
        if original_sender_relation_id is not APIHelper.SKIP:
            self.original_sender_relation_id = original_sender_relation_id 
        if final_recipient_relation_relation_id is not APIHelper.SKIP:
            self.final_recipient_relation_relation_id = final_recipient_relation_relation_id 
        if short_texts is not APIHelper.SKIP:
            self.short_texts = short_texts 
        if long_texts is not APIHelper.SKIP:
            self.long_texts = long_texts 
        if coded_texts is not APIHelper.SKIP:
            self.coded_texts = coded_texts 
        if debit_form_type is not APIHelper.SKIP:
            self.debit_form_type = debit_form_type 
        if exchange_rate_date is not APIHelper.SKIP:
            self.exchange_rate_date = APIHelper.RFC3339DateTime(exchange_rate_date) if exchange_rate_date else None 
        if debit_own_form_type is not APIHelper.SKIP:
            self.debit_own_form_type = debit_own_form_type 
        if cost_center is not APIHelper.SKIP:
            self.cost_center = cost_center 
        if account_table is not APIHelper.SKIP:
            self.account_table = account_table 
        if charge_number is not APIHelper.SKIP:
            self.charge_number = charge_number 
        if dsi_number is not APIHelper.SKIP:
            self.dsi_number = dsi_number 
        if loading_area_id is not APIHelper.SKIP:
            self.loading_area_id = loading_area_id 
        if unloading_area_id is not APIHelper.SKIP:
            self.unloading_area_id = unloading_area_id 
        if route_info is not APIHelper.SKIP:
            self.route_info = route_info 
        if additional_charging_no is not APIHelper.SKIP:
            self.additional_charging_no = additional_charging_no 
        if base_order_id is not APIHelper.SKIP:
            self.base_order_id = base_order_id 
        if base_order_no is not APIHelper.SKIP:
            self.base_order_no = base_order_no 
        if position_no is not APIHelper.SKIP:
            self.position_no = position_no 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if company_id is not APIHelper.SKIP:
            self.company_id = company_id 
        if division_id is not APIHelper.SKIP:
            self.division_id = division_id 
        if department_id is not APIHelper.SKIP:
            self.department_id = department_id 
        if sub_division_id is not APIHelper.SKIP:
            self.sub_division_id = sub_division_id 
        if sub_department_id is not APIHelper.SKIP:
            self.sub_department_id = sub_department_id 
        if accounting_company is not APIHelper.SKIP:
            self.accounting_company = accounting_company 
        if accounting_division is not APIHelper.SKIP:
            self.accounting_division = accounting_division 
        if accounting_department is not APIHelper.SKIP:
            self.accounting_department = accounting_department 
        if order_id is not APIHelper.SKIP:
            self.order_id = order_id 
        if order_type is not APIHelper.SKIP:
            self.order_type = order_type 
        if delete_state is not APIHelper.SKIP:
            self.delete_state = delete_state 
        if original_order_type is not APIHelper.SKIP:
            self.original_order_type = original_order_type 
        if order_input_type is not APIHelper.SKIP:
            self.order_input_type = order_input_type 
        if order_no is not APIHelper.SKIP:
            self.order_no = order_no 
        if order_sub_no is not APIHelper.SKIP:
            self.order_sub_no = order_sub_no 
        if order_date is not APIHelper.SKIP:
            self.order_date = APIHelper.RFC3339DateTime(order_date) if order_date else None 
        if delivery_date is not APIHelper.SKIP:
            self.delivery_date = APIHelper.RFC3339DateTime(delivery_date) if delivery_date else None 
        if order_text is not APIHelper.SKIP:
            self.order_text = order_text 
        if picking_no is not APIHelper.SKIP:
            self.picking_no = picking_no 
        if reference_no is not APIHelper.SKIP:
            self.reference_no = reference_no 
        if delivery_no is not APIHelper.SKIP:
            self.delivery_no = delivery_no 
        if traffic_mode_id is not APIHelper.SKIP:
            self.traffic_mode_id = traffic_mode_id 
        if order_category is not APIHelper.SKIP:
            self.order_category = order_category 
        if ld_booking_flag is not APIHelper.SKIP:
            self.ld_booking_flag = ld_booking_flag 
        if transportation_route_id is not APIHelper.SKIP:
            self.transportation_route_id = transportation_route_id 
        if direct_delivery is not APIHelper.SKIP:
            self.direct_delivery = direct_delivery 
        if debit_lump_sum is not APIHelper.SKIP:
            self.debit_lump_sum = debit_lump_sum 
        if credit_lump_sum is not APIHelper.SKIP:
            self.credit_lump_sum = credit_lump_sum 
        if extended_fields is not APIHelper.SKIP:
            self.extended_fields = extended_fields 
        if carrier_condition_type is not APIHelper.SKIP:
            self.carrier_condition_type = carrier_condition_type 
        if carrier_sales_tax_code is not APIHelper.SKIP:
            self.carrier_sales_tax_code = carrier_sales_tax_code 
        if dangerous_goods is not APIHelper.SKIP:
            self.dangerous_goods = dangerous_goods 
        if service_order_template_id is not APIHelper.SKIP:
            self.service_order_template_id = service_order_template_id 
        if debit_condition_temporary_identifier is not APIHelper.SKIP:
            self.debit_condition_temporary_identifier = debit_condition_temporary_identifier 
        if credit_condition_temporary_identifier is not APIHelper.SKIP:
            self.credit_condition_temporary_identifier = credit_condition_temporary_identifier 
        if dossier_condition_temporary_identifier is not APIHelper.SKIP:
            self.dossier_condition_temporary_identifier = dossier_condition_temporary_identifier 
        if has_manual_freight_payer_condition is not APIHelper.SKIP:
            self.has_manual_freight_payer_condition = has_manual_freight_payer_condition 
        if has_manual_carrier_condition is not APIHelper.SKIP:
            self.has_manual_carrier_condition = has_manual_carrier_condition 
        if debit_print_currency is not APIHelper.SKIP:
            self.debit_print_currency = debit_print_currency 
        if order_source_area is not APIHelper.SKIP:
            self.order_source_area = order_source_area 
        if tour is not APIHelper.SKIP:
            self.tour = tour 
        if invoice_data is not APIHelper.SKIP:
            self.invoice_data = invoice_data 
        if dossier_no is not APIHelper.SKIP:
            self.dossier_no = dossier_no 
        if harbour_id is not APIHelper.SKIP:
            self.harbour_id = harbour_id 
        if log_model_id is not APIHelper.SKIP:
            self.log_model_id = log_model_id 
        if driving_time is not APIHelper.SKIP:
            self.driving_time = driving_time 
        if term_of_payment_id is not APIHelper.SKIP:
            self.term_of_payment_id = term_of_payment_id 
        if inbound_bordero_no is not APIHelper.SKIP:
            self.inbound_bordero_no = inbound_bordero_no 
        if owner is not APIHelper.SKIP:
            self.owner = owner 
        if has_time_table is not APIHelper.SKIP:
            self.has_time_table = has_time_table 
        if carrier_for_last_shipment is not APIHelper.SKIP:
            self.carrier_for_last_shipment = carrier_for_last_shipment 
        if shipment_id_for_carrier_in_address_list is not APIHelper.SKIP:
            self.shipment_id_for_carrier_in_address_list = shipment_id_for_carrier_in_address_list 
        if ssc_cs is not APIHelper.SKIP:
            self.ssc_cs = ssc_cs 
        if is_new is not APIHelper.SKIP:
            self.is_new = is_new 
        if original_hash_snapshot is not APIHelper.SKIP:
            self.original_hash_snapshot = original_hash_snapshot 
        if original_snapshot is not APIHelper.SKIP:
            self.original_snapshot = original_snapshot 
        if current_snapshot is not APIHelper.SKIP:
            self.current_snapshot = current_snapshot 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        aggregates = LISPublicOrderAggregates.from_dictionary(dictionary.get('aggregates')) if 'aggregates' in dictionary.keys() else APIHelper.SKIP
        addresses = None
        if dictionary.get('addresses') is not None:
            addresses = [LISPublicOrderAddressInformation.from_dictionary(x) for x in dictionary.get('addresses')]
        else:
            addresses = APIHelper.SKIP
        address_roles = None
        if dictionary.get('addressRoles') is not None:
            address_roles = [LISPublicOrderAddressRole.from_dictionary(x) for x in dictionary.get('addressRoles')]
        else:
            address_roles = APIHelper.SKIP
        details = None
        if dictionary.get('details') is not None:
            details = [LISPublicOrderDetail.from_dictionary(x) for x in dictionary.get('details')]
        else:
            details = APIHelper.SKIP
        appointments = None
        if dictionary.get('appointments') is not None:
            appointments = [LISPublicOrderAppointment.from_dictionary(x) for x in dictionary.get('appointments')]
        else:
            appointments = APIHelper.SKIP
        stations = None
        if dictionary.get('stations') is not None:
            stations = [LISPublicShipmentStation.from_dictionary(x) for x in dictionary.get('stations')]
        else:
            stations = APIHelper.SKIP
        order_informations = None
        if dictionary.get('orderInformations') is not None:
            order_informations = [LISPublicOrderInformation.from_dictionary(x) for x in dictionary.get('orderInformations')]
        else:
            order_informations = APIHelper.SKIP
        fees = None
        if dictionary.get('fees') is not None:
            fees = [LISPublicOrderFee.from_dictionary(x) for x in dictionary.get('fees')]
        else:
            fees = APIHelper.SKIP
        additional_chargings = None
        if dictionary.get('additionalChargings') is not None:
            additional_chargings = [LISPublicOrderAdditionalCharging.from_dictionary(x) for x in dictionary.get('additionalChargings')]
        else:
            additional_chargings = APIHelper.SKIP
        cash_on_delivery = LISPublicOrderCashOnDelivery.from_dictionary(dictionary.get('cashOnDelivery')) if 'cashOnDelivery' in dictionary.keys() else APIHelper.SKIP
        invoice_department_id = dictionary.get("invoiceDepartmentId") if dictionary.get("invoiceDepartmentId") else APIHelper.SKIP
        invoice_division_id = dictionary.get("invoiceDivisionId") if dictionary.get("invoiceDivisionId") else APIHelper.SKIP
        invoicing_indicator = dictionary.get("invoicingIndicator") if dictionary.get("invoicingIndicator") else APIHelper.SKIP
        cargo_insurance = dictionary.get("cargoInsurance") if "cargoInsurance" in dictionary.keys() else APIHelper.SKIP
        bonus_lump_sum = dictionary.get("bonusLumpSum") if dictionary.get("bonusLumpSum") else APIHelper.SKIP
        general_condition_customer_id = dictionary.get("generalConditionCustomerId") if dictionary.get("generalConditionCustomerId") else APIHelper.SKIP
        freight_term_id = dictionary.get("freightTermId") if dictionary.get("freightTermId") else APIHelper.SKIP
        freight_payer_condition_type = dictionary.get("freightPayerConditionType") if dictionary.get("freightPayerConditionType") else APIHelper.SKIP
        freight_payer_main_carriage = dictionary.get("freightPayerMainCarriage") if dictionary.get("freightPayerMainCarriage") else APIHelper.SKIP
        freight_payer_sales_tax_code = dictionary.get("freightPayerSalesTaxCode") if dictionary.get("freightPayerSalesTaxCode") else APIHelper.SKIP
        is_cash_payment = dictionary.get("isCashPayment") if "isCashPayment" in dictionary.keys() else APIHelper.SKIP
        is_freight_payer_invoicing_blocked = dictionary.get("isFreightPayerInvoicingBlocked") if "isFreightPayerInvoicingBlocked" in dictionary.keys() else APIHelper.SKIP
        proceeds = dictionary.get("proceeds") if dictionary.get("proceeds") else APIHelper.SKIP
        cost_unit_id = dictionary.get("costUnitId") if dictionary.get("costUnitId") else APIHelper.SKIP
        loading_relation_id = dictionary.get("loadingRelationId") if dictionary.get("loadingRelationId") else APIHelper.SKIP
        unloading_relation_id = dictionary.get("unloadingRelationId") if dictionary.get("unloadingRelationId") else APIHelper.SKIP
        original_sender_relation_id = dictionary.get("originalSenderRelationId") if dictionary.get("originalSenderRelationId") else APIHelper.SKIP
        final_recipient_relation_relation_id = dictionary.get("finalRecipientRelationRelationId") if dictionary.get("finalRecipientRelationRelationId") else APIHelper.SKIP
        short_texts = None
        if dictionary.get('shortTexts') is not None:
            short_texts = [LISPublicOrderShortText.from_dictionary(x) for x in dictionary.get('shortTexts')]
        else:
            short_texts = APIHelper.SKIP
        long_texts = None
        if dictionary.get('longTexts') is not None:
            long_texts = [LISPublicOrderLongText.from_dictionary(x) for x in dictionary.get('longTexts')]
        else:
            long_texts = APIHelper.SKIP
        coded_texts = None
        if dictionary.get('codedTexts') is not None:
            coded_texts = [LISPublicOrderCodedText.from_dictionary(x) for x in dictionary.get('codedTexts')]
        else:
            coded_texts = APIHelper.SKIP
        debit_form_type = dictionary.get("debitFormType") if dictionary.get("debitFormType") else APIHelper.SKIP
        exchange_rate_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("exchangeRateDate")).datetime if dictionary.get("exchangeRateDate") else APIHelper.SKIP
        debit_own_form_type = dictionary.get("debitOwnFormType") if dictionary.get("debitOwnFormType") else APIHelper.SKIP
        cost_center = dictionary.get("costCenter") if dictionary.get("costCenter") else APIHelper.SKIP
        account_table = dictionary.get("accountTable") if dictionary.get("accountTable") else APIHelper.SKIP
        charge_number = dictionary.get("chargeNumber") if dictionary.get("chargeNumber") else APIHelper.SKIP
        dsi_number = dictionary.get("dsiNumber") if dictionary.get("dsiNumber") else APIHelper.SKIP
        loading_area_id = dictionary.get("loadingAreaId") if dictionary.get("loadingAreaId") else APIHelper.SKIP
        unloading_area_id = dictionary.get("unloadingAreaId") if dictionary.get("unloadingAreaId") else APIHelper.SKIP
        route_info = LISPublicRouteInfo.from_dictionary(dictionary.get('routeInfo')) if 'routeInfo' in dictionary.keys() else APIHelper.SKIP
        additional_charging_no = dictionary.get("additionalChargingNo") if dictionary.get("additionalChargingNo") else APIHelper.SKIP
        base_order_id = dictionary.get("baseOrderId") if dictionary.get("baseOrderId") else APIHelper.SKIP
        base_order_no = dictionary.get("baseOrderNo") if dictionary.get("baseOrderNo") else APIHelper.SKIP
        position_no = dictionary.get("positionNo") if dictionary.get("positionNo") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        company_id = dictionary.get("companyId") if dictionary.get("companyId") else APIHelper.SKIP
        division_id = dictionary.get("divisionId") if dictionary.get("divisionId") else APIHelper.SKIP
        department_id = dictionary.get("departmentId") if dictionary.get("departmentId") else APIHelper.SKIP
        sub_division_id = dictionary.get("subDivisionId") if dictionary.get("subDivisionId") else APIHelper.SKIP
        sub_department_id = dictionary.get("subDepartmentId") if dictionary.get("subDepartmentId") else APIHelper.SKIP
        accounting_company = dictionary.get("accountingCompany") if dictionary.get("accountingCompany") else APIHelper.SKIP
        accounting_division = dictionary.get("accountingDivision") if dictionary.get("accountingDivision") else APIHelper.SKIP
        accounting_department = dictionary.get("accountingDepartment") if dictionary.get("accountingDepartment") else APIHelper.SKIP
        order_id = dictionary.get("orderId") if dictionary.get("orderId") else APIHelper.SKIP
        order_type = dictionary.get("orderType") if dictionary.get("orderType") else APIHelper.SKIP
        delete_state = dictionary.get("deleteState") if dictionary.get("deleteState") else APIHelper.SKIP
        original_order_type = dictionary.get("originalOrderType") if dictionary.get("originalOrderType") else APIHelper.SKIP
        order_input_type = dictionary.get("orderInputType") if dictionary.get("orderInputType") else APIHelper.SKIP
        order_no = dictionary.get("orderNo") if dictionary.get("orderNo") else APIHelper.SKIP
        order_sub_no = dictionary.get("orderSubNo") if dictionary.get("orderSubNo") else APIHelper.SKIP
        order_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("orderDate")).datetime if dictionary.get("orderDate") else APIHelper.SKIP
        delivery_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("deliveryDate")).datetime if dictionary.get("deliveryDate") else APIHelper.SKIP
        order_text = dictionary.get("orderText") if dictionary.get("orderText") else APIHelper.SKIP
        picking_no = dictionary.get("pickingNo") if dictionary.get("pickingNo") else APIHelper.SKIP
        reference_no = dictionary.get("referenceNo") if dictionary.get("referenceNo") else APIHelper.SKIP
        delivery_no = dictionary.get("deliveryNo") if dictionary.get("deliveryNo") else APIHelper.SKIP
        traffic_mode_id = dictionary.get("trafficModeId") if dictionary.get("trafficModeId") else APIHelper.SKIP
        order_category = dictionary.get("orderCategory") if dictionary.get("orderCategory") else APIHelper.SKIP
        ld_booking_flag = dictionary.get("ldBookingFlag") if dictionary.get("ldBookingFlag") else APIHelper.SKIP
        transportation_route_id = dictionary.get("transportationRouteId") if dictionary.get("transportationRouteId") else APIHelper.SKIP
        direct_delivery = dictionary.get("directDelivery") if dictionary.get("directDelivery") else APIHelper.SKIP
        debit_lump_sum = None
        if dictionary.get('debitLumpSum') is not None:
            debit_lump_sum = [LISPublicOrderLumpSum.from_dictionary(x) for x in dictionary.get('debitLumpSum')]
        else:
            debit_lump_sum = APIHelper.SKIP
        credit_lump_sum = None
        if dictionary.get('creditLumpSum') is not None:
            credit_lump_sum = [LISPublicOrderLumpSum.from_dictionary(x) for x in dictionary.get('creditLumpSum')]
        else:
            credit_lump_sum = APIHelper.SKIP
        extended_fields = LISPublicExtendedDataTableRecord.from_dictionary(dictionary.get('extendedFields')) if 'extendedFields' in dictionary.keys() else APIHelper.SKIP
        carrier_condition_type = dictionary.get("carrierConditionType") if dictionary.get("carrierConditionType") else APIHelper.SKIP
        carrier_sales_tax_code = dictionary.get("carrierSalesTaxCode") if dictionary.get("carrierSalesTaxCode") else APIHelper.SKIP
        dangerous_goods = None
        if dictionary.get('dangerousGoods') is not None:
            dangerous_goods = [LISPublicOrderDGood.from_dictionary(x) for x in dictionary.get('dangerousGoods')]
        else:
            dangerous_goods = APIHelper.SKIP
        service_order_template_id = dictionary.get("serviceOrderTemplateId") if dictionary.get("serviceOrderTemplateId") else APIHelper.SKIP
        debit_condition_temporary_identifier = dictionary.get("debitConditionTemporaryIdentifier") if dictionary.get("debitConditionTemporaryIdentifier") else APIHelper.SKIP
        credit_condition_temporary_identifier = dictionary.get("creditConditionTemporaryIdentifier") if dictionary.get("creditConditionTemporaryIdentifier") else APIHelper.SKIP
        dossier_condition_temporary_identifier = dictionary.get("dossierConditionTemporaryIdentifier") if dictionary.get("dossierConditionTemporaryIdentifier") else APIHelper.SKIP
        has_manual_freight_payer_condition = dictionary.get("hasManualFreightPayerCondition") if "hasManualFreightPayerCondition" in dictionary.keys() else APIHelper.SKIP
        has_manual_carrier_condition = dictionary.get("hasManualCarrierCondition") if "hasManualCarrierCondition" in dictionary.keys() else APIHelper.SKIP
        debit_print_currency = dictionary.get("debitPrintCurrency") if dictionary.get("debitPrintCurrency") else APIHelper.SKIP
        order_source_area = dictionary.get("orderSourceArea") if dictionary.get("orderSourceArea") else APIHelper.SKIP
        tour = LISPublicOrderTour.from_dictionary(dictionary.get('tour')) if 'tour' in dictionary.keys() else APIHelper.SKIP
        invoice_data = None
        if dictionary.get('invoiceData') is not None:
            invoice_data = [LISPublicOrderInvoiceData.from_dictionary(x) for x in dictionary.get('invoiceData')]
        else:
            invoice_data = APIHelper.SKIP
        dossier_no = dictionary.get("dossierNo") if dictionary.get("dossierNo") else APIHelper.SKIP
        harbour_id = dictionary.get("harbourId") if dictionary.get("harbourId") else APIHelper.SKIP
        log_model_id = dictionary.get("logModelId") if dictionary.get("logModelId") else APIHelper.SKIP
        driving_time = dictionary.get("drivingTime") if dictionary.get("drivingTime") else APIHelper.SKIP
        term_of_payment_id = dictionary.get("termOfPaymentId") if dictionary.get("termOfPaymentId") else APIHelper.SKIP
        inbound_bordero_no = dictionary.get("inboundBorderoNo") if dictionary.get("inboundBorderoNo") else APIHelper.SKIP
        owner = dictionary.get("owner") if dictionary.get("owner") else APIHelper.SKIP
        has_time_table = dictionary.get("hasTimeTable") if "hasTimeTable" in dictionary.keys() else APIHelper.SKIP
        carrier_for_last_shipment = dictionary.get("carrierForLastShipment") if dictionary.get("carrierForLastShipment") else APIHelper.SKIP
        shipment_id_for_carrier_in_address_list = dictionary.get("shipmentIdForCarrierInAddressList") if dictionary.get("shipmentIdForCarrierInAddressList") else APIHelper.SKIP
        ssc_cs = None
        if dictionary.get('sscCs') is not None:
            ssc_cs = [LISPublicSSCC.from_dictionary(x) for x in dictionary.get('sscCs')]
        else:
            ssc_cs = APIHelper.SKIP
        is_new = dictionary.get("isNew") if "isNew" in dictionary.keys() else APIHelper.SKIP
        original_hash_snapshot = dictionary.get("originalHashSnapshot") if dictionary.get("originalHashSnapshot") else APIHelper.SKIP
        original_snapshot = dictionary.get("originalSnapshot") if dictionary.get("originalSnapshot") else APIHelper.SKIP
        current_snapshot = dictionary.get("currentSnapshot") if dictionary.get("currentSnapshot") else APIHelper.SKIP
        # Return an object of this model
        return cls(aggregates,
                   addresses,
                   address_roles,
                   details,
                   appointments,
                   stations,
                   order_informations,
                   fees,
                   additional_chargings,
                   cash_on_delivery,
                   invoice_department_id,
                   invoice_division_id,
                   invoicing_indicator,
                   cargo_insurance,
                   bonus_lump_sum,
                   general_condition_customer_id,
                   freight_term_id,
                   freight_payer_condition_type,
                   freight_payer_main_carriage,
                   freight_payer_sales_tax_code,
                   is_cash_payment,
                   is_freight_payer_invoicing_blocked,
                   proceeds,
                   cost_unit_id,
                   loading_relation_id,
                   unloading_relation_id,
                   original_sender_relation_id,
                   final_recipient_relation_relation_id,
                   short_texts,
                   long_texts,
                   coded_texts,
                   debit_form_type,
                   exchange_rate_date,
                   debit_own_form_type,
                   cost_center,
                   account_table,
                   charge_number,
                   dsi_number,
                   loading_area_id,
                   unloading_area_id,
                   route_info,
                   additional_charging_no,
                   base_order_id,
                   base_order_no,
                   position_no,
                   changed_by,
                   changed_on,
                   created_by,
                   created_on,
                   company_id,
                   division_id,
                   department_id,
                   sub_division_id,
                   sub_department_id,
                   accounting_company,
                   accounting_division,
                   accounting_department,
                   order_id,
                   order_type,
                   delete_state,
                   original_order_type,
                   order_input_type,
                   order_no,
                   order_sub_no,
                   order_date,
                   delivery_date,
                   order_text,
                   picking_no,
                   reference_no,
                   delivery_no,
                   traffic_mode_id,
                   order_category,
                   ld_booking_flag,
                   transportation_route_id,
                   direct_delivery,
                   debit_lump_sum,
                   credit_lump_sum,
                   extended_fields,
                   carrier_condition_type,
                   carrier_sales_tax_code,
                   dangerous_goods,
                   service_order_template_id,
                   debit_condition_temporary_identifier,
                   credit_condition_temporary_identifier,
                   dossier_condition_temporary_identifier,
                   has_manual_freight_payer_condition,
                   has_manual_carrier_condition,
                   debit_print_currency,
                   order_source_area,
                   tour,
                   invoice_data,
                   dossier_no,
                   harbour_id,
                   log_model_id,
                   driving_time,
                   term_of_payment_id,
                   inbound_bordero_no,
                   owner,
                   has_time_table,
                   carrier_for_last_shipment,
                   shipment_id_for_carrier_in_address_list,
                   ssc_cs,
                   is_new,
                   original_hash_snapshot,
                   original_snapshot,
                   current_snapshot)
