# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicOrderAdditionalCharging(object):

    """Implementation of the 'LISPublicOrderAdditionalCharging' model.

    The LISOrderAdditionalCharging data contract.

    Attributes:
        order_additional_charging_id (int): Gets or sets the order additional
            charging id.
        order_id (int): Gets or sets OrderId.
        basis (BasisEnum): Gets or sets Basis.
        address_type_id (int): Gets or sets AddressTypeId.
        invoice_side (InvoiceSideEnum): Gets or sets InvoiceSide.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.
        information (string): Gets or sets the information.
        general_condition_customer_id (int): Gets or sets the general
            condition customer id.
        additional_charging_id (int): Gets or sets the additional charging
            id.
        calculation_shipment_id (int): Gets or sets the calculation shipment
            id.
        invoice_state (InvoiceStateEnum): Gets or sets the state of the
            invoice.
        lump_sum (float): Gets or sets the lump sum.
        condition_temporary_identifier (string): Gets or sets the condition
            temporary identifier.
        additional_charging_condition_type
            (AdditionalChargingConditionTypeEnum): Gets or sets the type of
            the additional charging condition.
        has_complex_manual_condition (bool): Gets or sets a value indicating
            whether this instance has complex manual condition.
        currency (string): Gets or sets the currency.
        price_per (PricePerEnum): Gets or sets the price per.
        amount (float): Gets or sets the amount.
        sales_tax_code (string): Gets or sets the sales tax code.
        charge_id (int): Gets or sets the charge id.
        charge_description (string): Gets or sets the charge description.
        cash_discount (bool): Gets or sets a value indicating whether [cash
            discount].
        division_id (int): TODO: type description here.
        department_id (int): TODO: type description here.
        tour_id (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "order_additional_charging_id": 'orderAdditionalChargingId',
        "order_id": 'orderId',
        "basis": 'basis',
        "address_type_id": 'addressTypeId',
        "invoice_side": 'invoiceSide',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "information": 'information',
        "general_condition_customer_id": 'generalConditionCustomerId',
        "additional_charging_id": 'additionalChargingId',
        "calculation_shipment_id": 'calculationShipmentId',
        "invoice_state": 'invoiceState',
        "lump_sum": 'lumpSum',
        "condition_temporary_identifier": 'conditionTemporaryIdentifier',
        "additional_charging_condition_type": 'additionalChargingConditionType',
        "has_complex_manual_condition": 'hasComplexManualCondition',
        "currency": 'currency',
        "price_per": 'pricePer',
        "amount": 'amount',
        "sales_tax_code": 'salesTaxCode',
        "charge_id": 'chargeId',
        "charge_description": 'chargeDescription',
        "cash_discount": 'cashDiscount',
        "division_id": 'divisionId',
        "department_id": 'departmentId',
        "tour_id": 'tourId'
    }

    _optionals = [
        'order_additional_charging_id',
        'order_id',
        'basis',
        'address_type_id',
        'invoice_side',
        'changed_on',
        'changed_by',
        'information',
        'general_condition_customer_id',
        'additional_charging_id',
        'calculation_shipment_id',
        'invoice_state',
        'lump_sum',
        'condition_temporary_identifier',
        'additional_charging_condition_type',
        'has_complex_manual_condition',
        'currency',
        'price_per',
        'amount',
        'sales_tax_code',
        'charge_id',
        'charge_description',
        'cash_discount',
        'division_id',
        'department_id',
        'tour_id',
    ]

    def __init__(self,
                 order_additional_charging_id=APIHelper.SKIP,
                 order_id=APIHelper.SKIP,
                 basis=APIHelper.SKIP,
                 address_type_id=APIHelper.SKIP,
                 invoice_side=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 information=APIHelper.SKIP,
                 general_condition_customer_id=APIHelper.SKIP,
                 additional_charging_id=APIHelper.SKIP,
                 calculation_shipment_id=APIHelper.SKIP,
                 invoice_state=APIHelper.SKIP,
                 lump_sum=APIHelper.SKIP,
                 condition_temporary_identifier=APIHelper.SKIP,
                 additional_charging_condition_type=APIHelper.SKIP,
                 has_complex_manual_condition=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 price_per=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 sales_tax_code=APIHelper.SKIP,
                 charge_id=APIHelper.SKIP,
                 charge_description=APIHelper.SKIP,
                 cash_discount=APIHelper.SKIP,
                 division_id=APIHelper.SKIP,
                 department_id=APIHelper.SKIP,
                 tour_id=APIHelper.SKIP):
        """Constructor for the LISPublicOrderAdditionalCharging class"""

        # Initialize members of the class
        if order_additional_charging_id is not APIHelper.SKIP:
            self.order_additional_charging_id = order_additional_charging_id 
        if order_id is not APIHelper.SKIP:
            self.order_id = order_id 
        if basis is not APIHelper.SKIP:
            self.basis = basis 
        if address_type_id is not APIHelper.SKIP:
            self.address_type_id = address_type_id 
        if invoice_side is not APIHelper.SKIP:
            self.invoice_side = invoice_side 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if information is not APIHelper.SKIP:
            self.information = information 
        if general_condition_customer_id is not APIHelper.SKIP:
            self.general_condition_customer_id = general_condition_customer_id 
        if additional_charging_id is not APIHelper.SKIP:
            self.additional_charging_id = additional_charging_id 
        if calculation_shipment_id is not APIHelper.SKIP:
            self.calculation_shipment_id = calculation_shipment_id 
        if invoice_state is not APIHelper.SKIP:
            self.invoice_state = invoice_state 
        if lump_sum is not APIHelper.SKIP:
            self.lump_sum = lump_sum 
        if condition_temporary_identifier is not APIHelper.SKIP:
            self.condition_temporary_identifier = condition_temporary_identifier 
        if additional_charging_condition_type is not APIHelper.SKIP:
            self.additional_charging_condition_type = additional_charging_condition_type 
        if has_complex_manual_condition is not APIHelper.SKIP:
            self.has_complex_manual_condition = has_complex_manual_condition 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if price_per is not APIHelper.SKIP:
            self.price_per = price_per 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if sales_tax_code is not APIHelper.SKIP:
            self.sales_tax_code = sales_tax_code 
        if charge_id is not APIHelper.SKIP:
            self.charge_id = charge_id 
        if charge_description is not APIHelper.SKIP:
            self.charge_description = charge_description 
        if cash_discount is not APIHelper.SKIP:
            self.cash_discount = cash_discount 
        if division_id is not APIHelper.SKIP:
            self.division_id = division_id 
        if department_id is not APIHelper.SKIP:
            self.department_id = department_id 
        if tour_id is not APIHelper.SKIP:
            self.tour_id = tour_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        order_additional_charging_id = dictionary.get("orderAdditionalChargingId") if dictionary.get("orderAdditionalChargingId") else APIHelper.SKIP
        order_id = dictionary.get("orderId") if dictionary.get("orderId") else APIHelper.SKIP
        basis = dictionary.get("basis") if dictionary.get("basis") else APIHelper.SKIP
        address_type_id = dictionary.get("addressTypeId") if dictionary.get("addressTypeId") else APIHelper.SKIP
        invoice_side = dictionary.get("invoiceSide") if dictionary.get("invoiceSide") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        information = dictionary.get("information") if dictionary.get("information") else APIHelper.SKIP
        general_condition_customer_id = dictionary.get("generalConditionCustomerId") if dictionary.get("generalConditionCustomerId") else APIHelper.SKIP
        additional_charging_id = dictionary.get("additionalChargingId") if dictionary.get("additionalChargingId") else APIHelper.SKIP
        calculation_shipment_id = dictionary.get("calculationShipmentId") if dictionary.get("calculationShipmentId") else APIHelper.SKIP
        invoice_state = dictionary.get("invoiceState") if dictionary.get("invoiceState") else APIHelper.SKIP
        lump_sum = dictionary.get("lumpSum") if dictionary.get("lumpSum") else APIHelper.SKIP
        condition_temporary_identifier = dictionary.get("conditionTemporaryIdentifier") if dictionary.get("conditionTemporaryIdentifier") else APIHelper.SKIP
        additional_charging_condition_type = dictionary.get("additionalChargingConditionType") if dictionary.get("additionalChargingConditionType") else APIHelper.SKIP
        has_complex_manual_condition = dictionary.get("hasComplexManualCondition") if "hasComplexManualCondition" in dictionary.keys() else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        price_per = dictionary.get("pricePer") if dictionary.get("pricePer") else APIHelper.SKIP
        amount = dictionary.get("amount") if dictionary.get("amount") else APIHelper.SKIP
        sales_tax_code = dictionary.get("salesTaxCode") if dictionary.get("salesTaxCode") else APIHelper.SKIP
        charge_id = dictionary.get("chargeId") if dictionary.get("chargeId") else APIHelper.SKIP
        charge_description = dictionary.get("chargeDescription") if dictionary.get("chargeDescription") else APIHelper.SKIP
        cash_discount = dictionary.get("cashDiscount") if "cashDiscount" in dictionary.keys() else APIHelper.SKIP
        division_id = dictionary.get("divisionId") if dictionary.get("divisionId") else APIHelper.SKIP
        department_id = dictionary.get("departmentId") if dictionary.get("departmentId") else APIHelper.SKIP
        tour_id = dictionary.get("tourId") if dictionary.get("tourId") else APIHelper.SKIP
        # Return an object of this model
        return cls(order_additional_charging_id,
                   order_id,
                   basis,
                   address_type_id,
                   invoice_side,
                   changed_on,
                   changed_by,
                   information,
                   general_condition_customer_id,
                   additional_charging_id,
                   calculation_shipment_id,
                   invoice_state,
                   lump_sum,
                   condition_temporary_identifier,
                   additional_charging_condition_type,
                   has_complex_manual_condition,
                   currency,
                   price_per,
                   amount,
                   sales_tax_code,
                   charge_id,
                   charge_description,
                   cash_discount,
                   division_id,
                   department_id,
                   tour_id)
