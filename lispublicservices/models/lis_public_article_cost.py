# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicArticleCost(object):

    """Implementation of the 'LISPublicArticleCost' model.

    The LISPublicArticleCost class

    Attributes:
        id (int): Gets or sets Id.
        customer_id (int): Gets or sets CustomerId.
        article_no (string): Gets or sets ArticleNo.
        valid_from (datetime): Gets or sets ValidFrom.
        purchase_price (float): Gets or sets PurchasePrice.
        sales_price (float): Gets or sets SalesPrice.
        is_new (bool): Gets or sets a value indicating whether this entity
            will be inserted or updated.
        original_hash_snapshot (string): Gets or sets the original hash
            snapshot.
        original_snapshot (string): Gets or sets the original snapshot.
        current_snapshot (string): Gets or sets the current snapshot.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "customer_id": 'customerId',
        "article_no": 'articleNo',
        "valid_from": 'validFrom',
        "purchase_price": 'purchasePrice',
        "sales_price": 'salesPrice',
        "is_new": 'isNew',
        "original_hash_snapshot": 'originalHashSnapshot',
        "original_snapshot": 'originalSnapshot',
        "current_snapshot": 'currentSnapshot'
    }

    _optionals = [
        'id',
        'customer_id',
        'article_no',
        'valid_from',
        'purchase_price',
        'sales_price',
        'is_new',
        'original_hash_snapshot',
        'original_snapshot',
        'current_snapshot',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 article_no=APIHelper.SKIP,
                 valid_from=APIHelper.SKIP,
                 purchase_price=APIHelper.SKIP,
                 sales_price=APIHelper.SKIP,
                 is_new=APIHelper.SKIP,
                 original_hash_snapshot=APIHelper.SKIP,
                 original_snapshot=APIHelper.SKIP,
                 current_snapshot=APIHelper.SKIP):
        """Constructor for the LISPublicArticleCost class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if article_no is not APIHelper.SKIP:
            self.article_no = article_no 
        if valid_from is not APIHelper.SKIP:
            self.valid_from = APIHelper.RFC3339DateTime(valid_from) if valid_from else None 
        if purchase_price is not APIHelper.SKIP:
            self.purchase_price = purchase_price 
        if sales_price is not APIHelper.SKIP:
            self.sales_price = sales_price 
        if is_new is not APIHelper.SKIP:
            self.is_new = is_new 
        if original_hash_snapshot is not APIHelper.SKIP:
            self.original_hash_snapshot = original_hash_snapshot 
        if original_snapshot is not APIHelper.SKIP:
            self.original_snapshot = original_snapshot 
        if current_snapshot is not APIHelper.SKIP:
            self.current_snapshot = current_snapshot 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        article_no = dictionary.get("articleNo") if dictionary.get("articleNo") else APIHelper.SKIP
        valid_from = APIHelper.RFC3339DateTime.from_value(dictionary.get("validFrom")).datetime if dictionary.get("validFrom") else APIHelper.SKIP
        purchase_price = dictionary.get("purchasePrice") if dictionary.get("purchasePrice") else APIHelper.SKIP
        sales_price = dictionary.get("salesPrice") if dictionary.get("salesPrice") else APIHelper.SKIP
        is_new = dictionary.get("isNew") if "isNew" in dictionary.keys() else APIHelper.SKIP
        original_hash_snapshot = dictionary.get("originalHashSnapshot") if dictionary.get("originalHashSnapshot") else APIHelper.SKIP
        original_snapshot = dictionary.get("originalSnapshot") if dictionary.get("originalSnapshot") else APIHelper.SKIP
        current_snapshot = dictionary.get("currentSnapshot") if dictionary.get("currentSnapshot") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   customer_id,
                   article_no,
                   valid_from,
                   purchase_price,
                   sales_price,
                   is_new,
                   original_hash_snapshot,
                   original_snapshot,
                   current_snapshot)
