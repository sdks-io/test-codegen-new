# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicCustomerManager(object):

    """Implementation of the 'LISPublicCustomerManager' model.

    The LISCustomerAccountManager data contract.

    Attributes:
        customer_id (int): Gets or sets CustomerId.
        foreign_contact_person (int): Gets or sets ExternalContactPersonId.
        contact_person_id (int): Gets or sets AccountManagerId.
        customer_manager_type (CustomerManagerTypeEnum): Gets or sets State.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.
        mail (string): Gets or sets EMail.
        track_changes (bool): Gets or sets TrackChanges.
        has_changes (bool): Gets or sets HasChanges.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_id": 'customerId',
        "foreign_contact_person": 'foreignContactPerson',
        "contact_person_id": 'contactPersonId',
        "customer_manager_type": 'customerManagerType',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "mail": 'mail',
        "track_changes": 'trackChanges',
        "has_changes": 'hasChanges'
    }

    _optionals = [
        'customer_id',
        'foreign_contact_person',
        'contact_person_id',
        'customer_manager_type',
        'changed_on',
        'changed_by',
        'mail',
        'track_changes',
        'has_changes',
    ]

    def __init__(self,
                 customer_id=APIHelper.SKIP,
                 foreign_contact_person=APIHelper.SKIP,
                 contact_person_id=APIHelper.SKIP,
                 customer_manager_type=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 mail=APIHelper.SKIP,
                 track_changes=APIHelper.SKIP,
                 has_changes=APIHelper.SKIP):
        """Constructor for the LISPublicCustomerManager class"""

        # Initialize members of the class
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if foreign_contact_person is not APIHelper.SKIP:
            self.foreign_contact_person = foreign_contact_person 
        if contact_person_id is not APIHelper.SKIP:
            self.contact_person_id = contact_person_id 
        if customer_manager_type is not APIHelper.SKIP:
            self.customer_manager_type = customer_manager_type 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if mail is not APIHelper.SKIP:
            self.mail = mail 
        if track_changes is not APIHelper.SKIP:
            self.track_changes = track_changes 
        if has_changes is not APIHelper.SKIP:
            self.has_changes = has_changes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        foreign_contact_person = dictionary.get("foreignContactPerson") if dictionary.get("foreignContactPerson") else APIHelper.SKIP
        contact_person_id = dictionary.get("contactPersonId") if dictionary.get("contactPersonId") else APIHelper.SKIP
        customer_manager_type = dictionary.get("customerManagerType") if dictionary.get("customerManagerType") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        mail = dictionary.get("mail") if dictionary.get("mail") else APIHelper.SKIP
        track_changes = dictionary.get("trackChanges") if "trackChanges" in dictionary.keys() else APIHelper.SKIP
        has_changes = dictionary.get("hasChanges") if "hasChanges" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(customer_id,
                   foreign_contact_person,
                   contact_person_id,
                   customer_manager_type,
                   changed_on,
                   changed_by,
                   mail,
                   track_changes,
                   has_changes)
