# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_special_invoice_position import LISPublicSpecialInvoicePosition


class LISPublicSpecialInvoice(object):

    """Implementation of the 'LISPublicSpecialInvoice' model.

    The special invoice

    Attributes:
        special_invoice_kind (SpecialInvoiceKindEnum): Kind of the special
            invoice
        special_invoice_date (datetime): Date of the special invoice
        description (string): Description
        customer_id (int): Identifier of the customer.
        sender_id (int): Identifier of the sender
        invoice_date (datetime): Date of invoice
        booking_nr (string): Booking-Number
        date_of_booking (datetime): Date of Booking
        archive_information (string): ArchiveInformation
        form_type (int): FormType
        division_id (int): Identifier of the division
        positions (list of LISPublicSpecialInvoicePosition): Positions to the
            special invoice

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "special_invoice_kind": 'specialInvoiceKind',
        "special_invoice_date": 'specialInvoiceDate',
        "customer_id": 'customerId',
        "invoice_date": 'invoiceDate',
        "booking_nr": 'bookingNr',
        "date_of_booking": 'dateOfBooking',
        "description": 'description',
        "sender_id": 'senderId',
        "archive_information": 'archiveInformation',
        "form_type": 'formType',
        "division_id": 'divisionId',
        "positions": 'positions'
    }

    _optionals = [
        'description',
        'sender_id',
        'archive_information',
        'form_type',
        'division_id',
        'positions',
    ]

    def __init__(self,
                 special_invoice_kind=None,
                 special_invoice_date=None,
                 customer_id=None,
                 invoice_date=None,
                 booking_nr=None,
                 date_of_booking=None,
                 description=APIHelper.SKIP,
                 sender_id=APIHelper.SKIP,
                 archive_information=APIHelper.SKIP,
                 form_type=APIHelper.SKIP,
                 division_id=APIHelper.SKIP,
                 positions=APIHelper.SKIP):
        """Constructor for the LISPublicSpecialInvoice class"""

        # Initialize members of the class
        self.special_invoice_kind = special_invoice_kind 
        self.special_invoice_date = APIHelper.RFC3339DateTime(special_invoice_date) if special_invoice_date else None 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.customer_id = customer_id 
        if sender_id is not APIHelper.SKIP:
            self.sender_id = sender_id 
        self.invoice_date = APIHelper.RFC3339DateTime(invoice_date) if invoice_date else None 
        self.booking_nr = booking_nr 
        self.date_of_booking = APIHelper.RFC3339DateTime(date_of_booking) if date_of_booking else None 
        if archive_information is not APIHelper.SKIP:
            self.archive_information = archive_information 
        if form_type is not APIHelper.SKIP:
            self.form_type = form_type 
        if division_id is not APIHelper.SKIP:
            self.division_id = division_id 
        if positions is not APIHelper.SKIP:
            self.positions = positions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        special_invoice_kind = dictionary.get("specialInvoiceKind") if dictionary.get("specialInvoiceKind") else None
        special_invoice_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("specialInvoiceDate")).datetime if dictionary.get("specialInvoiceDate") else None
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else None
        invoice_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("invoiceDate")).datetime if dictionary.get("invoiceDate") else None
        booking_nr = dictionary.get("bookingNr") if dictionary.get("bookingNr") else None
        date_of_booking = APIHelper.RFC3339DateTime.from_value(dictionary.get("dateOfBooking")).datetime if dictionary.get("dateOfBooking") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        sender_id = dictionary.get("senderId") if dictionary.get("senderId") else APIHelper.SKIP
        archive_information = dictionary.get("archiveInformation") if dictionary.get("archiveInformation") else APIHelper.SKIP
        form_type = dictionary.get("formType") if dictionary.get("formType") else APIHelper.SKIP
        division_id = dictionary.get("divisionId") if dictionary.get("divisionId") else APIHelper.SKIP
        positions = None
        if dictionary.get('positions') is not None:
            positions = [LISPublicSpecialInvoicePosition.from_dictionary(x) for x in dictionary.get('positions')]
        else:
            positions = APIHelper.SKIP
        # Return an object of this model
        return cls(special_invoice_kind,
                   special_invoice_date,
                   customer_id,
                   invoice_date,
                   booking_nr,
                   date_of_booking,
                   description,
                   sender_id,
                   archive_information,
                   form_type,
                   division_id,
                   positions)
