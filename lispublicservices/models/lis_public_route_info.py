# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicRouteInfo(object):

    """Implementation of the 'LISPublicRouteInfo' model.

    Only the basic route informations.

    Attributes:
        distance_cost (float): Gets or sets the distance cost.
        distance_toll_cost (float): Gets or sets the distance toll cost.
        distance_toll_cost_provider (DistanceTollCostProviderEnum): Gets or
            sets the distance toll cost provider.
        currency (string): The currency like the company setting.
        distance (float): The distance in Meils / Kilometers like the company
            setting.
        distance_toll (float): The toll distance in Meils / Kilometers like
            the company setting.
        distance_empty (float): The distance emtpy in Meils / Kilometers like
            the company setting.
        distance_toll_empty (float): The toll empty distance in Meils /
            Kilometers like the company setting.
        time (int): The time in minutes.
        used_routing_provider (UsedRoutingProviderEnum): Gets or sets the used
            routing provider.
        distance_state (DistanceState1Enum): Gets or sets the state of the
            distance.
        declared_distance (float): Gets or sets the declared distance.
        declared_distance_toll (float): Gets or sets the declared distance
            toll.
        used_toll_provider (UsedTollProviderEnum): Gets or sets the used toll
            provider.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "distance_cost": 'distanceCost',
        "distance_toll_cost": 'distanceTollCost',
        "distance_toll_cost_provider": 'distanceTollCostProvider',
        "currency": 'currency',
        "distance": 'distance',
        "distance_toll": 'distanceToll',
        "distance_empty": 'distanceEmpty',
        "distance_toll_empty": 'distanceTollEmpty',
        "time": 'time',
        "used_routing_provider": 'usedRoutingProvider',
        "distance_state": 'distanceState',
        "declared_distance": 'declaredDistance',
        "declared_distance_toll": 'declaredDistanceToll',
        "used_toll_provider": 'usedTollProvider'
    }

    _optionals = [
        'distance_cost',
        'distance_toll_cost',
        'distance_toll_cost_provider',
        'currency',
        'distance',
        'distance_toll',
        'distance_empty',
        'distance_toll_empty',
        'time',
        'used_routing_provider',
        'distance_state',
        'declared_distance',
        'declared_distance_toll',
        'used_toll_provider',
    ]

    def __init__(self,
                 distance_cost=APIHelper.SKIP,
                 distance_toll_cost=APIHelper.SKIP,
                 distance_toll_cost_provider=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 distance=APIHelper.SKIP,
                 distance_toll=APIHelper.SKIP,
                 distance_empty=APIHelper.SKIP,
                 distance_toll_empty=APIHelper.SKIP,
                 time=APIHelper.SKIP,
                 used_routing_provider=APIHelper.SKIP,
                 distance_state=APIHelper.SKIP,
                 declared_distance=APIHelper.SKIP,
                 declared_distance_toll=APIHelper.SKIP,
                 used_toll_provider=APIHelper.SKIP):
        """Constructor for the LISPublicRouteInfo class"""

        # Initialize members of the class
        if distance_cost is not APIHelper.SKIP:
            self.distance_cost = distance_cost 
        if distance_toll_cost is not APIHelper.SKIP:
            self.distance_toll_cost = distance_toll_cost 
        if distance_toll_cost_provider is not APIHelper.SKIP:
            self.distance_toll_cost_provider = distance_toll_cost_provider 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if distance is not APIHelper.SKIP:
            self.distance = distance 
        if distance_toll is not APIHelper.SKIP:
            self.distance_toll = distance_toll 
        if distance_empty is not APIHelper.SKIP:
            self.distance_empty = distance_empty 
        if distance_toll_empty is not APIHelper.SKIP:
            self.distance_toll_empty = distance_toll_empty 
        if time is not APIHelper.SKIP:
            self.time = time 
        if used_routing_provider is not APIHelper.SKIP:
            self.used_routing_provider = used_routing_provider 
        if distance_state is not APIHelper.SKIP:
            self.distance_state = distance_state 
        if declared_distance is not APIHelper.SKIP:
            self.declared_distance = declared_distance 
        if declared_distance_toll is not APIHelper.SKIP:
            self.declared_distance_toll = declared_distance_toll 
        if used_toll_provider is not APIHelper.SKIP:
            self.used_toll_provider = used_toll_provider 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        distance_cost = dictionary.get("distanceCost") if dictionary.get("distanceCost") else APIHelper.SKIP
        distance_toll_cost = dictionary.get("distanceTollCost") if dictionary.get("distanceTollCost") else APIHelper.SKIP
        distance_toll_cost_provider = dictionary.get("distanceTollCostProvider") if dictionary.get("distanceTollCostProvider") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        distance = dictionary.get("distance") if dictionary.get("distance") else APIHelper.SKIP
        distance_toll = dictionary.get("distanceToll") if dictionary.get("distanceToll") else APIHelper.SKIP
        distance_empty = dictionary.get("distanceEmpty") if dictionary.get("distanceEmpty") else APIHelper.SKIP
        distance_toll_empty = dictionary.get("distanceTollEmpty") if dictionary.get("distanceTollEmpty") else APIHelper.SKIP
        time = dictionary.get("time") if dictionary.get("time") else APIHelper.SKIP
        used_routing_provider = dictionary.get("usedRoutingProvider") if dictionary.get("usedRoutingProvider") else APIHelper.SKIP
        distance_state = dictionary.get("distanceState") if dictionary.get("distanceState") else APIHelper.SKIP
        declared_distance = dictionary.get("declaredDistance") if dictionary.get("declaredDistance") else APIHelper.SKIP
        declared_distance_toll = dictionary.get("declaredDistanceToll") if dictionary.get("declaredDistanceToll") else APIHelper.SKIP
        used_toll_provider = dictionary.get("usedTollProvider") if dictionary.get("usedTollProvider") else APIHelper.SKIP
        # Return an object of this model
        return cls(distance_cost,
                   distance_toll_cost,
                   distance_toll_cost_provider,
                   currency,
                   distance,
                   distance_toll,
                   distance_empty,
                   distance_toll_empty,
                   time,
                   used_routing_provider,
                   distance_state,
                   declared_distance,
                   declared_distance_toll,
                   used_toll_provider)
