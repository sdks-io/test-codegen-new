# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper


class LISPublicScript(object):

    """Implementation of the 'LISPublicScript' model.

    This class represents a script that can be used for execution.

    Attributes:
        script_id (string): The script identifier (GUID).
        script_name (string): The name of the script.
        event_type (EventTypeEnum): The event type.
        implementation_type (string): The implementation type.
        python_code (string): The executable python code of the script.
        sub_scripts (list of LISPublicScript): A list of sub scripts.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "script_id": 'scriptId',
        "script_name": 'scriptName',
        "event_type": 'eventType',
        "implementation_type": 'implementationType',
        "python_code": 'pythonCode',
        "sub_scripts": 'subScripts'
    }

    _optionals = [
        'script_id',
        'script_name',
        'event_type',
        'implementation_type',
        'python_code',
        'sub_scripts',
    ]

    def __init__(self,
                 script_id=APIHelper.SKIP,
                 script_name=APIHelper.SKIP,
                 event_type=APIHelper.SKIP,
                 implementation_type=APIHelper.SKIP,
                 python_code=APIHelper.SKIP,
                 sub_scripts=APIHelper.SKIP):
        """Constructor for the LISPublicScript class"""

        # Initialize members of the class
        if script_id is not APIHelper.SKIP:
            self.script_id = script_id 
        if script_name is not APIHelper.SKIP:
            self.script_name = script_name 
        if event_type is not APIHelper.SKIP:
            self.event_type = event_type 
        if implementation_type is not APIHelper.SKIP:
            self.implementation_type = implementation_type 
        if python_code is not APIHelper.SKIP:
            self.python_code = python_code 
        if sub_scripts is not APIHelper.SKIP:
            self.sub_scripts = sub_scripts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        script_id = dictionary.get("scriptId") if dictionary.get("scriptId") else APIHelper.SKIP
        script_name = dictionary.get("scriptName") if dictionary.get("scriptName") else APIHelper.SKIP
        event_type = dictionary.get("eventType") if dictionary.get("eventType") else APIHelper.SKIP
        implementation_type = dictionary.get("implementationType") if dictionary.get("implementationType") else APIHelper.SKIP
        python_code = dictionary.get("pythonCode") if dictionary.get("pythonCode") else APIHelper.SKIP
        sub_scripts = None
        if dictionary.get('subScripts') is not None:
            sub_scripts = [LISPublicScript.from_dictionary(x) for x in dictionary.get('subScripts')]
        else:
            sub_scripts = APIHelper.SKIP
        # Return an object of this model
        return cls(script_id,
                   script_name,
                   event_type,
                   implementation_type,
                   python_code,
                   sub_scripts)
