# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_bordero_address_role import LISPublicBorderoAddressRole
from lispublicservices.models.lis_public_bordero_aggregates import LISPublicBorderoAggregates
from lispublicservices.models.lis_public_bordero_appointment import LISPublicBorderoAppointment
from lispublicservices.models.lis_public_bordero_information import LISPublicBorderoInformation
from lispublicservices.models.lis_public_bordero_permission import LISPublicBorderoPermission
from lispublicservices.models.lis_public_common_lump_sum import LISPublicCommonLumpSum
from lispublicservices.models.lis_public_route_info import LISPublicRouteInfo
from lispublicservices.models.lis_public_shipment_station import LISPublicShipmentStation


class LISPublicBordero(object):

    """Implementation of the 'LISPublicBordero' model.

    The LISBordero data contract.

    Attributes:
        loading_relation_id (string): Gets or sets the LoadingRelationId
            property. This property depends on the database field Relation.
        unloading_relation_id (string): Gets or sets the UnloadingRelationId
            property. This property depends on the database field Relation.
        destination_forwarder_id (int): Gets or sets the
            DestinationForwarderId property. This property depends on the
            database field EmpSped.
        disposition_text (string): Gets or sets the DispositionText property.
            This property depends on the database field AufText.
        remark (string): Gets or sets the Remark property. This property
            depends on the database field AufInfo.
        route_info (LISPublicRouteInfo): Only the basic route informations.
        destination_forwarder_condition_type
            (DestinationForwarderConditionTypeEnum): Gets or sets the
            DestinationForwarderConditionType property. This property depends
            on the database field ESKond.
        destination_forwarder_sales_tax_code (string): Gets or sets the
            DestinationForwarderSalesTaxCode property. This property depends
            on the database field ESUC.
        swap_body_1 (string): Gets or sets the SwapBody1 property. This
            property depends on the database field WB1.
        swap_body_2 (string): Gets or sets the SwapBody2 property. This
            property depends on the database field WB2.
        security_tag_1 (string): Gets or sets the SecurityTag1 property. This
            property depends on the database field Plombe1.
        security_tag_2 (string): Gets or sets the SecurityTag2 property. This
            property depends on the database field Plombe2.
        traffic_mode_id (string): Gets or sets the traffic mode identifier.
        aggregates (LISPublicBorderoAggregates): The
            LISPulbicBorderoAggregates. The LISPulbicBorderoAggregates are
            readonly.
        appointments (list of LISPublicBorderoAppointment): Gets or sets the
            appointments.
        bordero_informations (list of LISPublicBorderoInformation): Gets or
            sets the bordero informations.
        stations (list of LISPublicShipmentStation): Gets or sets the
            stations.
        address_roles (list of LISPublicBorderoAddressRole): Gets or sets the
            address roles.
        fees (list of LISPublicCommonLumpSum): Gets or sets Fees.
        has_manual_condition (bool): Gets or sets a value indicating whether
            this instance has manual condition.
        permission (LISPublicBorderoPermission): The LISBorderoPermission data
            contract.
        is_last (bool): Gets or sets a value indicating whether this instance
            is last.
        condition_temporary_identifier (string): Gets or sets the condition
            temporary identifier.
        company_id (int): Gets or sets CompanyId.
        division_id (int): Gets or sets DivisionId.
        department_id (int): Gets or sets DepartmentId.
        bordero_id (int): Gets or sets BorderoId.
        bordero_dummy_id (int): Gets or sets BorderoDummyId.
        bordero_no (int): Gets or sets BorderoNo.
        bordero_kind (BorderoKindEnum): Gets or sets BorderoKind.
        transshipment_bordero (TransshipmentBorderoEnum): Gets or sets
            TransshipmentBordero.
        transshipment_bordero_handover (TransshipmentBorderoHandoverEnum):
            Gets or sets the transshipment bordero handover.
        fill_type (FillType1Enum): Gets or sets FillType.
        capture_division (int): Gets or sets CaptureDivision.
        capture_department (int): Gets or sets CaptureDepartment.
        capture_date (datetime): Gets or sets CaptureDate.
        bordero_sequence (int): Gets or sets BorderoSequence.
        internal_cost_allocation_mode (InternalCostAllocationMode1Enum): Gets
            or sets InternalCostAllocationMode.
        bordero_type (BorderoTypeEnum): Gets or sets the type of the bordero.
        bordero_type_text_id (int): Gets or sets the bordero type text
            identifier.
        invoicing_type (InvoicingTypeEnum): Gets or sets the type of the
            invoicing.
        changed_on (datetime): Gets or sets ChangedOn.
        changed_by (string): Gets or sets ChangedBy.
        created_on (datetime): Gets or sets the date the item was created.
        created_by (string): Gets or sets the name of the user that created
            this item.
        order_type (OrderType1Enum): Gets or sets the type of the order.
        is_new (bool): Gets or sets a value indicating whether this entity
            will be inserted or updated.
        original_hash_snapshot (string): Gets or sets the original hash
            snapshot.
        original_snapshot (string): Gets or sets the original snapshot.
        current_snapshot (string): Gets or sets the current snapshot.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "loading_relation_id": 'loadingRelationId',
        "unloading_relation_id": 'unloadingRelationId',
        "destination_forwarder_id": 'destinationForwarderId',
        "disposition_text": 'dispositionText',
        "remark": 'remark',
        "route_info": 'routeInfo',
        "destination_forwarder_condition_type": 'destinationForwarderConditionType',
        "destination_forwarder_sales_tax_code": 'destinationForwarderSalesTaxCode',
        "swap_body_1": 'swapBody1',
        "swap_body_2": 'swapBody2',
        "security_tag_1": 'securityTag1',
        "security_tag_2": 'securityTag2',
        "traffic_mode_id": 'trafficModeId',
        "aggregates": 'aggregates',
        "appointments": 'appointments',
        "bordero_informations": 'borderoInformations',
        "stations": 'stations',
        "address_roles": 'addressRoles',
        "fees": 'fees',
        "has_manual_condition": 'hasManualCondition',
        "permission": 'permission',
        "is_last": 'isLast',
        "condition_temporary_identifier": 'conditionTemporaryIdentifier',
        "company_id": 'companyId',
        "division_id": 'divisionId',
        "department_id": 'departmentId',
        "bordero_id": 'borderoId',
        "bordero_dummy_id": 'borderoDummyId',
        "bordero_no": 'borderoNo',
        "bordero_kind": 'borderoKind',
        "transshipment_bordero": 'transshipmentBordero',
        "transshipment_bordero_handover": 'transshipmentBorderoHandover',
        "fill_type": 'fillType',
        "capture_division": 'captureDivision',
        "capture_department": 'captureDepartment',
        "capture_date": 'captureDate',
        "bordero_sequence": 'borderoSequence',
        "internal_cost_allocation_mode": 'internalCostAllocationMode',
        "bordero_type": 'borderoType',
        "bordero_type_text_id": 'borderoTypeTextId',
        "invoicing_type": 'invoicingType',
        "changed_on": 'changedOn',
        "changed_by": 'changedBy',
        "created_on": 'createdOn',
        "created_by": 'createdBy',
        "order_type": 'orderType',
        "is_new": 'isNew',
        "original_hash_snapshot": 'originalHashSnapshot',
        "original_snapshot": 'originalSnapshot',
        "current_snapshot": 'currentSnapshot'
    }

    _optionals = [
        'loading_relation_id',
        'unloading_relation_id',
        'destination_forwarder_id',
        'disposition_text',
        'remark',
        'route_info',
        'destination_forwarder_condition_type',
        'destination_forwarder_sales_tax_code',
        'swap_body_1',
        'swap_body_2',
        'security_tag_1',
        'security_tag_2',
        'traffic_mode_id',
        'aggregates',
        'appointments',
        'bordero_informations',
        'stations',
        'address_roles',
        'fees',
        'has_manual_condition',
        'permission',
        'is_last',
        'condition_temporary_identifier',
        'company_id',
        'division_id',
        'department_id',
        'bordero_id',
        'bordero_dummy_id',
        'bordero_no',
        'bordero_kind',
        'transshipment_bordero',
        'transshipment_bordero_handover',
        'fill_type',
        'capture_division',
        'capture_department',
        'capture_date',
        'bordero_sequence',
        'internal_cost_allocation_mode',
        'bordero_type',
        'bordero_type_text_id',
        'invoicing_type',
        'changed_on',
        'changed_by',
        'created_on',
        'created_by',
        'order_type',
        'is_new',
        'original_hash_snapshot',
        'original_snapshot',
        'current_snapshot',
    ]

    def __init__(self,
                 loading_relation_id=APIHelper.SKIP,
                 unloading_relation_id=APIHelper.SKIP,
                 destination_forwarder_id=APIHelper.SKIP,
                 disposition_text=APIHelper.SKIP,
                 remark=APIHelper.SKIP,
                 route_info=APIHelper.SKIP,
                 destination_forwarder_condition_type=APIHelper.SKIP,
                 destination_forwarder_sales_tax_code=APIHelper.SKIP,
                 swap_body_1=APIHelper.SKIP,
                 swap_body_2=APIHelper.SKIP,
                 security_tag_1=APIHelper.SKIP,
                 security_tag_2=APIHelper.SKIP,
                 traffic_mode_id=APIHelper.SKIP,
                 aggregates=APIHelper.SKIP,
                 appointments=APIHelper.SKIP,
                 bordero_informations=APIHelper.SKIP,
                 stations=APIHelper.SKIP,
                 address_roles=APIHelper.SKIP,
                 fees=APIHelper.SKIP,
                 has_manual_condition=APIHelper.SKIP,
                 permission=APIHelper.SKIP,
                 is_last=APIHelper.SKIP,
                 condition_temporary_identifier=APIHelper.SKIP,
                 company_id=APIHelper.SKIP,
                 division_id=APIHelper.SKIP,
                 department_id=APIHelper.SKIP,
                 bordero_id=APIHelper.SKIP,
                 bordero_dummy_id=APIHelper.SKIP,
                 bordero_no=APIHelper.SKIP,
                 bordero_kind=APIHelper.SKIP,
                 transshipment_bordero=APIHelper.SKIP,
                 transshipment_bordero_handover=APIHelper.SKIP,
                 fill_type=APIHelper.SKIP,
                 capture_division=APIHelper.SKIP,
                 capture_department=APIHelper.SKIP,
                 capture_date=APIHelper.SKIP,
                 bordero_sequence=APIHelper.SKIP,
                 internal_cost_allocation_mode=APIHelper.SKIP,
                 bordero_type=APIHelper.SKIP,
                 bordero_type_text_id=APIHelper.SKIP,
                 invoicing_type=APIHelper.SKIP,
                 changed_on=APIHelper.SKIP,
                 changed_by=APIHelper.SKIP,
                 created_on=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 order_type=APIHelper.SKIP,
                 is_new=APIHelper.SKIP,
                 original_hash_snapshot=APIHelper.SKIP,
                 original_snapshot=APIHelper.SKIP,
                 current_snapshot=APIHelper.SKIP):
        """Constructor for the LISPublicBordero class"""

        # Initialize members of the class
        if loading_relation_id is not APIHelper.SKIP:
            self.loading_relation_id = loading_relation_id 
        if unloading_relation_id is not APIHelper.SKIP:
            self.unloading_relation_id = unloading_relation_id 
        if destination_forwarder_id is not APIHelper.SKIP:
            self.destination_forwarder_id = destination_forwarder_id 
        if disposition_text is not APIHelper.SKIP:
            self.disposition_text = disposition_text 
        if remark is not APIHelper.SKIP:
            self.remark = remark 
        if route_info is not APIHelper.SKIP:
            self.route_info = route_info 
        if destination_forwarder_condition_type is not APIHelper.SKIP:
            self.destination_forwarder_condition_type = destination_forwarder_condition_type 
        if destination_forwarder_sales_tax_code is not APIHelper.SKIP:
            self.destination_forwarder_sales_tax_code = destination_forwarder_sales_tax_code 
        if swap_body_1 is not APIHelper.SKIP:
            self.swap_body_1 = swap_body_1 
        if swap_body_2 is not APIHelper.SKIP:
            self.swap_body_2 = swap_body_2 
        if security_tag_1 is not APIHelper.SKIP:
            self.security_tag_1 = security_tag_1 
        if security_tag_2 is not APIHelper.SKIP:
            self.security_tag_2 = security_tag_2 
        if traffic_mode_id is not APIHelper.SKIP:
            self.traffic_mode_id = traffic_mode_id 
        if aggregates is not APIHelper.SKIP:
            self.aggregates = aggregates 
        if appointments is not APIHelper.SKIP:
            self.appointments = appointments 
        if bordero_informations is not APIHelper.SKIP:
            self.bordero_informations = bordero_informations 
        if stations is not APIHelper.SKIP:
            self.stations = stations 
        if address_roles is not APIHelper.SKIP:
            self.address_roles = address_roles 
        if fees is not APIHelper.SKIP:
            self.fees = fees 
        if has_manual_condition is not APIHelper.SKIP:
            self.has_manual_condition = has_manual_condition 
        if permission is not APIHelper.SKIP:
            self.permission = permission 
        if is_last is not APIHelper.SKIP:
            self.is_last = is_last 
        if condition_temporary_identifier is not APIHelper.SKIP:
            self.condition_temporary_identifier = condition_temporary_identifier 
        if company_id is not APIHelper.SKIP:
            self.company_id = company_id 
        if division_id is not APIHelper.SKIP:
            self.division_id = division_id 
        if department_id is not APIHelper.SKIP:
            self.department_id = department_id 
        if bordero_id is not APIHelper.SKIP:
            self.bordero_id = bordero_id 
        if bordero_dummy_id is not APIHelper.SKIP:
            self.bordero_dummy_id = bordero_dummy_id 
        if bordero_no is not APIHelper.SKIP:
            self.bordero_no = bordero_no 
        if bordero_kind is not APIHelper.SKIP:
            self.bordero_kind = bordero_kind 
        if transshipment_bordero is not APIHelper.SKIP:
            self.transshipment_bordero = transshipment_bordero 
        if transshipment_bordero_handover is not APIHelper.SKIP:
            self.transshipment_bordero_handover = transshipment_bordero_handover 
        if fill_type is not APIHelper.SKIP:
            self.fill_type = fill_type 
        if capture_division is not APIHelper.SKIP:
            self.capture_division = capture_division 
        if capture_department is not APIHelper.SKIP:
            self.capture_department = capture_department 
        if capture_date is not APIHelper.SKIP:
            self.capture_date = APIHelper.RFC3339DateTime(capture_date) if capture_date else None 
        if bordero_sequence is not APIHelper.SKIP:
            self.bordero_sequence = bordero_sequence 
        if internal_cost_allocation_mode is not APIHelper.SKIP:
            self.internal_cost_allocation_mode = internal_cost_allocation_mode 
        if bordero_type is not APIHelper.SKIP:
            self.bordero_type = bordero_type 
        if bordero_type_text_id is not APIHelper.SKIP:
            self.bordero_type_text_id = bordero_type_text_id 
        if invoicing_type is not APIHelper.SKIP:
            self.invoicing_type = invoicing_type 
        if changed_on is not APIHelper.SKIP:
            self.changed_on = APIHelper.RFC3339DateTime(changed_on) if changed_on else None 
        if changed_by is not APIHelper.SKIP:
            self.changed_by = changed_by 
        if created_on is not APIHelper.SKIP:
            self.created_on = APIHelper.RFC3339DateTime(created_on) if created_on else None 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if order_type is not APIHelper.SKIP:
            self.order_type = order_type 
        if is_new is not APIHelper.SKIP:
            self.is_new = is_new 
        if original_hash_snapshot is not APIHelper.SKIP:
            self.original_hash_snapshot = original_hash_snapshot 
        if original_snapshot is not APIHelper.SKIP:
            self.original_snapshot = original_snapshot 
        if current_snapshot is not APIHelper.SKIP:
            self.current_snapshot = current_snapshot 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        loading_relation_id = dictionary.get("loadingRelationId") if dictionary.get("loadingRelationId") else APIHelper.SKIP
        unloading_relation_id = dictionary.get("unloadingRelationId") if dictionary.get("unloadingRelationId") else APIHelper.SKIP
        destination_forwarder_id = dictionary.get("destinationForwarderId") if dictionary.get("destinationForwarderId") else APIHelper.SKIP
        disposition_text = dictionary.get("dispositionText") if dictionary.get("dispositionText") else APIHelper.SKIP
        remark = dictionary.get("remark") if dictionary.get("remark") else APIHelper.SKIP
        route_info = LISPublicRouteInfo.from_dictionary(dictionary.get('routeInfo')) if 'routeInfo' in dictionary.keys() else APIHelper.SKIP
        destination_forwarder_condition_type = dictionary.get("destinationForwarderConditionType") if dictionary.get("destinationForwarderConditionType") else APIHelper.SKIP
        destination_forwarder_sales_tax_code = dictionary.get("destinationForwarderSalesTaxCode") if dictionary.get("destinationForwarderSalesTaxCode") else APIHelper.SKIP
        swap_body_1 = dictionary.get("swapBody1") if dictionary.get("swapBody1") else APIHelper.SKIP
        swap_body_2 = dictionary.get("swapBody2") if dictionary.get("swapBody2") else APIHelper.SKIP
        security_tag_1 = dictionary.get("securityTag1") if dictionary.get("securityTag1") else APIHelper.SKIP
        security_tag_2 = dictionary.get("securityTag2") if dictionary.get("securityTag2") else APIHelper.SKIP
        traffic_mode_id = dictionary.get("trafficModeId") if dictionary.get("trafficModeId") else APIHelper.SKIP
        aggregates = LISPublicBorderoAggregates.from_dictionary(dictionary.get('aggregates')) if 'aggregates' in dictionary.keys() else APIHelper.SKIP
        appointments = None
        if dictionary.get('appointments') is not None:
            appointments = [LISPublicBorderoAppointment.from_dictionary(x) for x in dictionary.get('appointments')]
        else:
            appointments = APIHelper.SKIP
        bordero_informations = None
        if dictionary.get('borderoInformations') is not None:
            bordero_informations = [LISPublicBorderoInformation.from_dictionary(x) for x in dictionary.get('borderoInformations')]
        else:
            bordero_informations = APIHelper.SKIP
        stations = None
        if dictionary.get('stations') is not None:
            stations = [LISPublicShipmentStation.from_dictionary(x) for x in dictionary.get('stations')]
        else:
            stations = APIHelper.SKIP
        address_roles = None
        if dictionary.get('addressRoles') is not None:
            address_roles = [LISPublicBorderoAddressRole.from_dictionary(x) for x in dictionary.get('addressRoles')]
        else:
            address_roles = APIHelper.SKIP
        fees = None
        if dictionary.get('fees') is not None:
            fees = [LISPublicCommonLumpSum.from_dictionary(x) for x in dictionary.get('fees')]
        else:
            fees = APIHelper.SKIP
        has_manual_condition = dictionary.get("hasManualCondition") if "hasManualCondition" in dictionary.keys() else APIHelper.SKIP
        permission = LISPublicBorderoPermission.from_dictionary(dictionary.get('permission')) if 'permission' in dictionary.keys() else APIHelper.SKIP
        is_last = dictionary.get("isLast") if "isLast" in dictionary.keys() else APIHelper.SKIP
        condition_temporary_identifier = dictionary.get("conditionTemporaryIdentifier") if dictionary.get("conditionTemporaryIdentifier") else APIHelper.SKIP
        company_id = dictionary.get("companyId") if dictionary.get("companyId") else APIHelper.SKIP
        division_id = dictionary.get("divisionId") if dictionary.get("divisionId") else APIHelper.SKIP
        department_id = dictionary.get("departmentId") if dictionary.get("departmentId") else APIHelper.SKIP
        bordero_id = dictionary.get("borderoId") if dictionary.get("borderoId") else APIHelper.SKIP
        bordero_dummy_id = dictionary.get("borderoDummyId") if dictionary.get("borderoDummyId") else APIHelper.SKIP
        bordero_no = dictionary.get("borderoNo") if dictionary.get("borderoNo") else APIHelper.SKIP
        bordero_kind = dictionary.get("borderoKind") if dictionary.get("borderoKind") else APIHelper.SKIP
        transshipment_bordero = dictionary.get("transshipmentBordero") if dictionary.get("transshipmentBordero") else APIHelper.SKIP
        transshipment_bordero_handover = dictionary.get("transshipmentBorderoHandover") if dictionary.get("transshipmentBorderoHandover") else APIHelper.SKIP
        fill_type = dictionary.get("fillType") if dictionary.get("fillType") else APIHelper.SKIP
        capture_division = dictionary.get("captureDivision") if dictionary.get("captureDivision") else APIHelper.SKIP
        capture_department = dictionary.get("captureDepartment") if dictionary.get("captureDepartment") else APIHelper.SKIP
        capture_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("captureDate")).datetime if dictionary.get("captureDate") else APIHelper.SKIP
        bordero_sequence = dictionary.get("borderoSequence") if dictionary.get("borderoSequence") else APIHelper.SKIP
        internal_cost_allocation_mode = dictionary.get("internalCostAllocationMode") if dictionary.get("internalCostAllocationMode") else APIHelper.SKIP
        bordero_type = dictionary.get("borderoType") if dictionary.get("borderoType") else APIHelper.SKIP
        bordero_type_text_id = dictionary.get("borderoTypeTextId") if dictionary.get("borderoTypeTextId") else APIHelper.SKIP
        invoicing_type = dictionary.get("invoicingType") if dictionary.get("invoicingType") else APIHelper.SKIP
        changed_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("changedOn")).datetime if dictionary.get("changedOn") else APIHelper.SKIP
        changed_by = dictionary.get("changedBy") if dictionary.get("changedBy") else APIHelper.SKIP
        created_on = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdOn")).datetime if dictionary.get("createdOn") else APIHelper.SKIP
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else APIHelper.SKIP
        order_type = dictionary.get("orderType") if dictionary.get("orderType") else APIHelper.SKIP
        is_new = dictionary.get("isNew") if "isNew" in dictionary.keys() else APIHelper.SKIP
        original_hash_snapshot = dictionary.get("originalHashSnapshot") if dictionary.get("originalHashSnapshot") else APIHelper.SKIP
        original_snapshot = dictionary.get("originalSnapshot") if dictionary.get("originalSnapshot") else APIHelper.SKIP
        current_snapshot = dictionary.get("currentSnapshot") if dictionary.get("currentSnapshot") else APIHelper.SKIP
        # Return an object of this model
        return cls(loading_relation_id,
                   unloading_relation_id,
                   destination_forwarder_id,
                   disposition_text,
                   remark,
                   route_info,
                   destination_forwarder_condition_type,
                   destination_forwarder_sales_tax_code,
                   swap_body_1,
                   swap_body_2,
                   security_tag_1,
                   security_tag_2,
                   traffic_mode_id,
                   aggregates,
                   appointments,
                   bordero_informations,
                   stations,
                   address_roles,
                   fees,
                   has_manual_condition,
                   permission,
                   is_last,
                   condition_temporary_identifier,
                   company_id,
                   division_id,
                   department_id,
                   bordero_id,
                   bordero_dummy_id,
                   bordero_no,
                   bordero_kind,
                   transshipment_bordero,
                   transshipment_bordero_handover,
                   fill_type,
                   capture_division,
                   capture_department,
                   capture_date,
                   bordero_sequence,
                   internal_cost_allocation_mode,
                   bordero_type,
                   bordero_type_text_id,
                   invoicing_type,
                   changed_on,
                   changed_by,
                   created_on,
                   created_by,
                   order_type,
                   is_new,
                   original_hash_snapshot,
                   original_snapshot,
                   current_snapshot)
