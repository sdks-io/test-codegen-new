# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.lis_public_extended_data_field import LISPublicExtendedDataField
from lispublicservices.models.lis_public_extended_table import LISPublicExtendedTable


class LISPublicExtendedDataTableRecord(object):

    """Implementation of the 'LISPublicExtendedDataTableRecord' model.

    This class represents a row within an extended table. Therefor it holds a
    collection of
    {LIS.NetSped.PublicServiceLayer.Models.Customer.ExtTables.LISPublicExtended
    DataField}.

    Attributes:
        table (LISPublicExtendedTable): LISExtendedTable class.
        primary_key (list of LISPublicExtendedDataField): Gets the primary
            key. It is delivered as a list as the pk may consist of  more than
            one column.
        fields (list of LISPublicExtendedDataField): Gets or sets the data
            fields of this row.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "table": 'table',
        "primary_key": 'primaryKey',
        "fields": 'fields'
    }

    _optionals = [
        'table',
        'primary_key',
        'fields',
    ]

    def __init__(self,
                 table=APIHelper.SKIP,
                 primary_key=APIHelper.SKIP,
                 fields=APIHelper.SKIP):
        """Constructor for the LISPublicExtendedDataTableRecord class"""

        # Initialize members of the class
        if table is not APIHelper.SKIP:
            self.table = table 
        if primary_key is not APIHelper.SKIP:
            self.primary_key = primary_key 
        if fields is not APIHelper.SKIP:
            self.fields = fields 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        table = LISPublicExtendedTable.from_dictionary(dictionary.get('table')) if 'table' in dictionary.keys() else APIHelper.SKIP
        primary_key = None
        if dictionary.get('primaryKey') is not None:
            primary_key = [LISPublicExtendedDataField.from_dictionary(x) for x in dictionary.get('primaryKey')]
        else:
            primary_key = APIHelper.SKIP
        fields = None
        if dictionary.get('fields') is not None:
            fields = [LISPublicExtendedDataField.from_dictionary(x) for x in dictionary.get('fields')]
        else:
            fields = APIHelper.SKIP
        # Return an object of this model
        return cls(table,
                   primary_key,
                   fields)
