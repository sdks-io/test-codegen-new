# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from lispublicservices.api_helper import APIHelper
from lispublicservices.models.key_value_pair_string_list_elisui_interaction_setting import KeyValuePairStringListELISUIInteractionSetting


class LISMetaInfoCollection(object):

    """Implementation of the 'LISMetaInfoCollection' model.

    TODO: type model description here.

    Attributes:
        meta_info (list of KeyValuePairStringListELISUIInteractionSetting):
            TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "meta_info": 'metaInfo'
    }

    _optionals = [
        'meta_info',
    ]

    def __init__(self,
                 meta_info=APIHelper.SKIP):
        """Constructor for the LISMetaInfoCollection class"""

        # Initialize members of the class
        if meta_info is not APIHelper.SKIP:
            self.meta_info = meta_info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        meta_info = None
        if dictionary.get('metaInfo') is not None:
            meta_info = [KeyValuePairStringListELISUIInteractionSetting.from_dictionary(x) for x in dictionary.get('metaInfo')]
        else:
            meta_info = APIHelper.SKIP
        # Return an object of this model
        return cls(meta_info)
