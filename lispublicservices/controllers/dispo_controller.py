# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lispublicservices.api_helper import APIHelper
from lispublicservices.configuration import Server
from lispublicservices.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lispublicservices.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from lispublicservices.models.lis_response_lis_public_tour import LISResponseLISPublicTour
from lispublicservices.models.lis_response_boolean import LISResponseBoolean
from lispublicservices.models.lis_response_list_lis_public_transport_section_base import LISResponseListLISPublicTransportSectionBase
from lispublicservices.models.lis_response_list_lis_public_transport_section_tour_view import LISResponseListLISPublicTransportSectionTourView
from lispublicservices.models.lis_response_list_lis_public_tour_view import LISResponseListLISPublicTourView
from lispublicservices.models.lis_response_lis_public_bordero import LISResponseLISPublicBordero


class DispoController(BaseController):

    """A Controller to access Endpoints in the lispublicservices API."""
    def __init__(self, config):
        super(DispoController, self).__init__(config)

    def get_tour(self,
                 tour_id,
                 tour_no):
        """Does a GET request to /Dispo/Tour/{TourId}/{TourNo}.

         Get dispo tour. Only one Parameter is required to get the Tour.
         
        **Priority** | **Parameter name**
        :---:|:---: 
        **1**| TourId
        **2** | TourNo
        ---

        Args:
            tour_id (int): The tour id.
            tour_no (int): The tour id.

        Returns:
            LISResponseLISPublicTour: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Dispo/Tour/{TourId}/{TourNo}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('TourId')
                            .value(tour_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TourNo')
                            .value(tour_no)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicTour.from_dictionary)
        ).execute()

    def dispatch_tour(self,
                      dispatch_request):
        """Does a POST request to /Dispo/Dispatch.

        Dispatch tour

        Args:
            dispatch_request (LISPublicDispatchTourRequest): The request.

        Returns:
            LISResponseBoolean: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Dispo/Dispatch')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(dispatch_request))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseBoolean.from_dictionary)
        ).execute()

    def set_tour_state(self,
                       state_request):
        """Does a POST request to /Dispo/State.

        Set tour state

        Args:
            state_request (LISPublicTourStateRequest): The request.

        Returns:
            LISResponseBoolean: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Dispo/State')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(state_request))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseBoolean.from_dictionary)
        ).execute()

    def get_transport_sections(self,
                               section_ids,
                               tour_id,
                               order_id,
                               order_no):
        """Does a GET request to /Dispo/TransportSection/{TourId}/{OrderId}/{OrderNo}.

         Gets a list of `LISPublicTransportSectionShipment` and
         `LISPublicTransportSectionBordero` objects that are derived from
         `LISPublicTransportSectionBase` with one of the following parameters.
         These classes are described in the list of public services structures
         on the left side. If multiple parameters are filled, then the
         prameter priority is as shown below.
         
        **Priority** | **Parameter name**
        :---:|:---: 
        **1**| TourId
        **2** | OrderId
        **3** | OrderNo
        **4** | SectionIds
        ---

        Args:
            section_ids (list of int): The ids for the coresponding sections
            tour_id (int): The mandatory tour id for the sections
            order_id (int): The Order id to use for its corresponding section
                ids. Any id for the corresponding OrderNo can be use.
            order_no (int): The Order No to use for its corresponding section
                ids. Any id for the corresponding OrderNo can be use.

        Returns:
            LISResponseListLISPublicTransportSectionBase: Response from the
                API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Dispo/TransportSection/{TourId}/{OrderId}/{OrderNo}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('SectionIds')
                         .value(section_ids))
            .template_param(Parameter()
                            .key('TourId')
                            .value(tour_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('OrderId')
                            .value(order_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('OrderNo')
                            .value(order_no)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseListLISPublicTransportSectionBase.from_dictionary)
        ).execute()

    def get_query_transport_section(self,
                                    transport_section_query_search_properties,
                                    query_object_maximum=None):
        """Does a GET request to /Dispo/QueryTransportSection.

         Gets Transport Sections
        **Numeric Value** | **Parameter name** | **Numeric Value** |
        **Parameter name**
        :---:|:---:|:---:|:---: 
        **1**| IsLessThan | **10** | IsContainedIn
        **2** | IsLessThanOrEqualTo | **11** | DoesNotContain
        **3** | IsEqualTo | **12** | IsNull
        **4** | IsNotEqualTo | **13** | IsNotNull
        **5** | IsGreaterThanOrEqualTo | **14** | IsEmpty
        **6** | IsGreaterThan | **15** | IsNotEmpty
        **7** | StartsWith | **16** | IsNullOrEmpty
        **8** | EndsWith | **17** | IsNotNullOrEmpty
        **9** | Contains | | |
        ---

        Args:
            transport_section_query_search_properties (list of object): The
                section properties to look for i.e.   {"propertyName":
                "OrderNo","propertyValue": "648","operator": "IsGreaterThan"}
            query_object_maximum (int, optional): The QueryObjectMaximum

        Returns:
            LISResponseListLISPublicTransportSectionTourView: Response from
                the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Dispo/QueryTransportSection')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('TransportSectionQuerySearchProperties')
                         .value(transport_section_query_search_properties))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('QueryObjectMaximum')
                         .value(query_object_maximum))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseListLISPublicTransportSectionTourView.from_dictionary)
        ).execute()

    def get_query_tour(self,
                       transport_section_query_search_properties,
                       query_object_maximum=None):
        """Does a GET request to /Dispo/QueryTour.

         Gets Tour Query
        **Numeric Value** | **Parameter name** | **Numeric Value** |
        **Parameter name**
        :---:|:---:|:---:|:---: 
        **1**| IsLessThan | **10** | IsContainedIn
        **2** | IsLessThanOrEqualTo | **11** | DoesNotContain
        **3** | IsEqualTo | **12** | IsNull
        **4** | IsNotEqualTo | **13** | IsNotNull
        **5** | IsGreaterThanOrEqualTo | **14** | IsEmpty
        **6** | IsGreaterThan | **15** | IsNotEmpty
        **7** | StartsWith | **16** | IsNullOrEmpty
        **8** | EndsWith | **17** | IsNotNullOrEmpty
        **9** | Contains | | |
        ---

        Args:
            transport_section_query_search_properties (list of object): The
                section properties to look for i.e. {"propertyName":
                "TourId","propertyValue": "122","operator": "IsGreaterThan"}
            query_object_maximum (int, optional): The QueryObjectMaximum

        Returns:
            LISResponseListLISPublicTourView: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Dispo/QueryTour')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('TransportSectionQuerySearchProperties')
                         .value(transport_section_query_search_properties))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('QueryObjectMaximum')
                         .value(query_object_maximum))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseListLISPublicTourView.from_dictionary)
        ).execute()

    def get_bordero_by_id(self,
                          bordero_id):
        """Does a GET request to /Dispo/Bordero.

        Returns the bordero for the bordero id.

        Args:
            bordero_id (int): TODO: type description here.

        Returns:
            LISResponseLISPublicBordero: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Dispo/Bordero')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('BorderoId')
                         .value(bordero_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicBordero.from_dictionary)
        ).execute()
