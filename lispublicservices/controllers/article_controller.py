# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lispublicservices.api_helper import APIHelper
from lispublicservices.configuration import Server
from lispublicservices.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lispublicservices.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from lispublicservices.models.lis_response_lis_public_article import LISResponseLISPublicArticle


class ArticleController(BaseController):

    """A Controller to access Endpoints in the lispublicservices API."""
    def __init__(self, config):
        super(ArticleController, self).__init__(config)

    def get_article(self,
                    customer_no,
                    article_no):
        """Does a GET request to /Article/GetArticle.

        Gets the article via customer number and article nummber

        Args:
            customer_no (int): TODO: type description here.
            article_no (string): TODO: type description here.

        Returns:
            LISResponseLISPublicArticle: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Article/GetArticle')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('CustomerNo')
                         .value(customer_no))
            .query_param(Parameter()
                         .key('ArticleNo')
                         .value(article_no))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicArticle.from_dictionary)
        ).execute()

    def get_new_article(self):
        """Does a GET request to /Article/GetNewArticle.

        Creates a new article that includes ExtendedDataFields///

        Returns:
            LISResponseLISPublicArticle: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Article/GetNewArticle')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicArticle.from_dictionary)
        ).execute()

    def save_article(self,
                     article):
        """Does a POST request to /Article/SaveArticle.

        TODO: type endpoint description here.

        Args:
            article (LISPublicArticle): TODO: type description here.

        Returns:
            LISResponseLISPublicArticle: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Article/SaveArticle')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(article))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicArticle.from_dictionary)
        ).execute()
