# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lispublicservices.api_helper import APIHelper
from lispublicservices.configuration import Server
from lispublicservices.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lispublicservices.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from lispublicservices.models.lis_response_lis_public_special_invoice import LISResponseLISPublicSpecialInvoice


class SpecialInvoiceController(BaseController):

    """A Controller to access Endpoints in the lispublicservices API."""
    def __init__(self, config):
        super(SpecialInvoiceController, self).__init__(config)

    def create_accrual_special_invoice(self,
                                       request):
        """Does a POST request to /AccrualSpecialInvoice.

        Creates a special invoice for Accruals

        Args:
            request (LISCreateSpecialInvoiceRequest): The request

        Returns:
            LISResponseLISPublicSpecialInvoice: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/AccrualSpecialInvoice')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(request))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicSpecialInvoice.from_dictionary)
        ).execute()

    def create_special_invoice(self,
                               request):
        """Does a POST request to /SpecialInvoice.

        Creates a special invoice

        Args:
            request (LISCreateSpecialInvoiceRequest): The request

        Returns:
            LISResponseLISPublicSpecialInvoice: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/SpecialInvoice')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(request))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicSpecialInvoice.from_dictionary)
        ).execute()
