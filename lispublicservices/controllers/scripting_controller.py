# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lispublicservices.api_helper import APIHelper
from lispublicservices.configuration import Server
from lispublicservices.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lispublicservices.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from lispublicservices.models.lis_response_lis_public_script import LISResponseLISPublicScript
from lispublicservices.models.lis_response_list_lis_public_script import LISResponseListLISPublicScript
from lispublicservices.models.lis_response_list_lis_public_script_info import LISResponseListLISPublicScriptInfo


class ScriptingController(BaseController):

    """A Controller to access Endpoints in the lispublicservices API."""
    def __init__(self, config):
        super(ScriptingController, self).__init__(config)

    def get_script_for_execution(self,
                                 event_type,
                                 implementation_type):
        """Does a GET request to /Scripting/script.

        Gets the script including sub scripts for the specified event and
        implementation.

        Args:
            event_type (EventType2Enum): The event type.
            implementation_type (string): The implementation type.

        Returns:
            LISResponseLISPublicScript: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Scripting/script')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('eventType')
                         .value(event_type))
            .query_param(Parameter()
                         .key('implementationType')
                         .value(implementation_type))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicScript.from_dictionary)
        ).execute()

    def get_script_for_execution_1(self,
                                   event_type,
                                   implementation_type,
                                   script_id):
        """Does a GET request to /Scripting/script/{scriptId}.

        Gets the script including sub scripts for the script id.

        Args:
            event_type (EventType2Enum): The event type.
            implementation_type (string): The implementation type.
            script_id (string): The script id.

        Returns:
            LISResponseLISPublicScript: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Scripting/script/{scriptId}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('eventType')
                         .value(event_type))
            .query_param(Parameter()
                         .key('implementationType')
                         .value(implementation_type))
            .template_param(Parameter()
                            .key('scriptId')
                            .value(script_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicScript.from_dictionary)
        ).execute()

    def get_scripts_by_request(self,
                               implementation_type=None,
                               event_type=None,
                               external_key=None,
                               product=None):
        """Does a GET request to /Scripting/scripts.

        Gets all scripts that match the specified criteria.

        Args:
            implementation_type (string, optional): The implementation type
                (optional).
            event_type (list of EventType2Enum, optional): The event type
                (optional).
            external_key (string, optional): The external key (optional).
            product (Product1Enum, optional): The product (optional).

        Returns:
            LISResponseListLISPublicScript: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Scripting/scripts')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('implementationType')
                         .value(implementation_type))
            .query_param(Parameter()
                         .key('eventType')
                         .value(event_type))
            .query_param(Parameter()
                         .key('externalKey')
                         .value(external_key))
            .query_param(Parameter()
                         .key('product')
                         .value(product))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseListLISPublicScript.from_dictionary)
        ).execute()

    def get_script_infos_by_request(self,
                                    implementation_type=None,
                                    event_type=None,
                                    external_key=None,
                                    product=None):
        """Does a GET request to /Scripting/scriptinfos.

        Gets meta information for all scripts that match the specified
        criteria.

        Args:
            implementation_type (string, optional): The implementation type
                (optional).
            event_type (list of EventType2Enum, optional): The event type
                (optional).
            external_key (string, optional): The external key (optional).
            product (Product1Enum, optional): The product (optional).

        Returns:
            LISResponseListLISPublicScriptInfo: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Scripting/scriptinfos')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('implementationType')
                         .value(implementation_type))
            .query_param(Parameter()
                         .key('eventType')
                         .value(event_type))
            .query_param(Parameter()
                         .key('externalKey')
                         .value(external_key))
            .query_param(Parameter()
                         .key('product')
                         .value(product))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseListLISPublicScriptInfo.from_dictionary)
        ).execute()
