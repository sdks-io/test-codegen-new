# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lispublicservices.api_helper import APIHelper
from lispublicservices.configuration import Server
from lispublicservices.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lispublicservices.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from lispublicservices.models.lis_response_lis_public_order import LISResponseLISPublicOrder
from lispublicservices.models.lis_response_list_lis_public_order_status_history import LISResponseListLISPublicOrderStatusHistory
from lispublicservices.models.lis_response_list_lis_public_order_view import LISResponseListLISPublicOrderView


class OrderController(BaseController):

    """A Controller to access Endpoints in the lispublicservices API."""
    def __init__(self, config):
        super(OrderController, self).__init__(config)

    def get_order(self,
                  order_id,
                  order_no):
        """Does a GET request to /Order/{OrderId}/{OrderNo}.

         Gets the order with for the specified id. Only one parameter is
         required.
         
        **Priority** | **Parameter name**
        :---:|:---: 
        **1**| OrderId
        **2** | OrderNo
        ---

        Args:
            order_id (int): The id of the order.
            order_no (int): The number of the order.

        Returns:
            LISResponseLISPublicOrder: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Order/{OrderId}/{OrderNo}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('OrderId')
                            .value(order_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('OrderNo')
                            .value(order_no)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicOrder.from_dictionary)
        ).execute()

    def save_order(self,
                   public_order,
                   skip_relation_refresh=None):
        """Does a POST request to /Order/SaveOrder.

        Saves an order.Changes for the order aggregates won't be carried
        because they represent just a summary of the order.

        Args:
            public_order (LISPublicOrder): The Public Order that has to be
                saved
            skip_relation_refresh (bool, optional): Additional save option for
                the saving process.

        Returns:
            LISResponseLISPublicOrder: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Order/SaveOrder')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(public_order))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('SkipRelationRefresh')
                         .value(skip_relation_refresh))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicOrder.from_dictionary)
        ).execute()

    def get_order_status_history(self,
                                 order_id,
                                 order_no,
                                 dossier_no,
                                 tour_id):
        """Does a GET request to /Order/StatusHistory/{OrderId}/{OrderNo}/{DossierNo}/{TourId}.

         Gets the order status history with the specified order id and one of
         the optional parameters
         
        **Priority** | **Parameter name**
        :---:|:---: 
        **1**| OrderId
        **2** | OrderNo
        **3**| DossierNo
        **4** | Tourid
        ---

        Args:
            order_id (int): The OrderId for the order status history.
            order_no (int): The OrderNo for the order status history.
            dossier_no (string): The DossierNo for the order status history.
            tour_id (int): The TourId for the order status history.

        Returns:
            LISResponseListLISPublicOrderStatusHistory: Response from the API.
                OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Order/StatusHistory/{OrderId}/{OrderNo}/{DossierNo}/{TourId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('OrderId')
                            .value(order_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('OrderNo')
                            .value(order_no)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('DossierNo')
                            .value(dossier_no)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TourId')
                            .value(tour_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseListLISPublicOrderStatusHistory.from_dictionary)
        ).execute()

    def get_order_query(self,
                        transport_section_query_search_properties,
                        query_object_maximum=None):
        """Does a GET request to /Order/QueryOrder.

         Gets Transport Sections
        **Numeric Value** | **Parameter name** | **Numeric Value** |
        **Parameter name**
        :---:|:---:|:---:|:---: 
        **1**| IsLessThan | **10** | IsContainedIn
        **2** | IsLessThanOrEqualTo | **11** | DoesNotContain
        **3** | IsEqualTo | **12** | IsNull
        **4** | IsNotEqualTo | **13** | IsNotNull
        **5** | IsGreaterThanOrEqualTo | **14** | IsEmpty
        **6** | IsGreaterThan | **15** | IsNotEmpty
        **7** | StartsWith | **16** | IsNullOrEmpty
        **8** | EndsWith | **17** | IsNotNullOrEmpty
        **9** | Contains | | |
        ---

        Args:
            transport_section_query_search_properties (list of object): The
                section properties to look for i.e.   {"propertyName":
                "ShipmentId","propertyValue": "647","operator":
                "IsGreaterThan"}
            query_object_maximum (int, optional): The QueryObjectMaximum

        Returns:
            LISResponseListLISPublicOrderView: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Order/QueryOrder')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('TransportSectionQuerySearchProperties')
                         .value(transport_section_query_search_properties))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('QueryObjectMaximum')
                         .value(query_object_maximum))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseListLISPublicOrderView.from_dictionary)
        ).execute()
