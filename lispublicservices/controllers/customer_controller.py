# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from lispublicservices.api_helper import APIHelper
from lispublicservices.configuration import Server
from lispublicservices.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from lispublicservices.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from lispublicservices.models.lis_response_lis_public_customer import LISResponseLISPublicCustomer
from lispublicservices.models.lis_response_list_lis_public_customer_base_view import LISResponseListLISPublicCustomerBaseView


class CustomerController(BaseController):

    """A Controller to access Endpoints in the lispublicservices API."""
    def __init__(self, config):
        super(CustomerController, self).__init__(config)

    def get_customer(self,
                     customer_id,
                     customer_scopes):
        """Does a GET request to /Customer.

        Gets customer by Id

        Args:
            customer_id (int): The id for the reqested customer
            customer_scopes (list of CustomerScopeEnum): TODO: type
                description here.

        Returns:
            LISResponseLISPublicCustomer: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Customer')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('CustomerId')
                         .value(customer_id))
            .query_param(Parameter()
                         .key('CustomerScopes')
                         .value(customer_scopes))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicCustomer.from_dictionary)
        ).execute()

    def get_customer_query(self,
                           transport_section_query_search_properties,
                           query_object_maximum=None):
        """Does a GET request to /Customer/CustomerQuery.

         Gets Transport Sections
        **Numeric Value** | **Parameter name** | **Numeric Value** |
        **Parameter name**
        :---:|:---:|:---:|:---: 
        **1**| IsLessThan | **10** | IsContainedIn
        **2** | IsLessThanOrEqualTo | **11** | DoesNotContain
        **3** | IsEqualTo | **12** | IsNull
        **4** | IsNotEqualTo | **13** | IsNotNull
        **5** | IsGreaterThanOrEqualTo | **14** | IsEmpty
        **6** | IsGreaterThan | **15** | IsNotEmpty
        **7** | StartsWith | **16** | IsNullOrEmpty
        **8** | EndsWith | **17** | IsNotNullOrEmpty
        **9** | Contains | | |
        ---

        Args:
            transport_section_query_search_properties (list of object): The
                section properties to look for i.e.{"propertyName":
                "CustomerId","propertyValue": "42","operator":
                "IsGreaterThan"}
            query_object_maximum (int, optional): The QueryObjectMaximum

        Returns:
            LISResponseListLISPublicCustomerBaseView: Response from the API.
                OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Customer/CustomerQuery')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('TransportSectionQuerySearchProperties')
                         .value(transport_section_query_search_properties))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('QueryObjectMaximum')
                         .value(query_object_maximum))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseListLISPublicCustomerBaseView.from_dictionary)
        ).execute()

    def save_customer(self,
                      save_customer_request):
        """Does a POST request to /Customer/Save.

        Save or Update Customer

        Args:
            save_customer_request (LISPublicCustomer): The id for the reqested
                customer

        Returns:
            LISResponseLISPublicCustomer: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Customer/Save')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(save_customer_request))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LISResponseLISPublicCustomer.from_dictionary)
        ).execute()
