# -*- coding: utf-8 -*-

"""
lispublicservices

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from lispublicservices.configuration import Configuration
from lispublicservices.controllers.base_controller import BaseController
from lispublicservices.configuration import Environment
from lispublicservices.http.auth.o_auth_2 import OAuth2
from lispublicservices.controllers.article_controller import ArticleController
from lispublicservices.controllers.authentication_controller\
    import AuthenticationController
from lispublicservices.controllers.customer_controller\
    import CustomerController
from lispublicservices.controllers.dispo_controller import DispoController
from lispublicservices.controllers.dms_document_controller\
    import DMSDocumentController
from lispublicservices.controllers.order_controller import OrderController
from lispublicservices.controllers.permission_controller\
    import PermissionController
from lispublicservices.controllers.print_controller import PrintController
from lispublicservices.controllers.scanning_controller\
    import ScanningController
from lispublicservices.controllers.scripting_controller\
    import ScriptingController
from lispublicservices.controllers.special_invoice_controller\
    import SpecialInvoiceController
from lispublicservices.controllers.status_manager_controller\
    import StatusManagerController
from lispublicservices.controllers.unit_controller import UnitController


class LispublicservicesClient(object):

    @LazyProperty
    def article(self):
        return ArticleController(self.global_configuration)

    @LazyProperty
    def authentication(self):
        return AuthenticationController(self.global_configuration)

    @LazyProperty
    def customer(self):
        return CustomerController(self.global_configuration)

    @LazyProperty
    def dispo(self):
        return DispoController(self.global_configuration)

    @LazyProperty
    def dms_document(self):
        return DMSDocumentController(self.global_configuration)

    @LazyProperty
    def order(self):
        return OrderController(self.global_configuration)

    @LazyProperty
    def permission(self):
        return PermissionController(self.global_configuration)

    @LazyProperty
    def mprint(self):
        return PrintController(self.global_configuration)

    @LazyProperty
    def scanning(self):
        return ScanningController(self.global_configuration)

    @LazyProperty
    def scripting(self):
        return ScriptingController(self.global_configuration)

    @LazyProperty
    def special_invoice(self):
        return SpecialInvoiceController(self.global_configuration)

    @LazyProperty
    def status_manager(self):
        return StatusManagerController(self.global_configuration)

    @LazyProperty
    def unit(self):
        return UnitController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=[408, 413, 429, 500, 502, 503, 504, 521, 522, 524, 408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                 retry_methods=['GET', 'PUT', 'GET', 'PUT'],
                 environment=Environment.PRODUCTION, access_token='',
                 config=None):
        if config is None:
            self.config = Configuration(
                                         http_client_instance=http_client_instance,
                                         override_http_client_configuration=override_http_client_configuration,
                                         http_call_back=http_call_back,
                                         timeout=timeout,
                                         max_retries=max_retries,
                                         backoff_factor=backoff_factor,
                                         retry_statuses=retry_statuses,
                                         retry_methods=retry_methods,
                                         environment=environment,
                                         access_token=access_token)
        else:
            self.config = config

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())
        self.initialize_auth_managers(self.global_configuration)

        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

    def initialize_auth_managers(self, global_config):
        http_client_config = global_config.get_http_client_configuration()
        self.auth_managers = { key: None for key in ['global']}
        self.auth_managers['global'] = OAuth2(http_client_config.access_token)
        return self.auth_managers
